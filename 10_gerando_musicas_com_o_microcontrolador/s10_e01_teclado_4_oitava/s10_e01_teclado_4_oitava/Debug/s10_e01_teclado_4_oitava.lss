
s10_e01_teclado_4_oitava.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  0000044e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8c  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000790  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065a  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000455  00000000  00000000  00002326  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000277b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
void toca_nota(unsigned int duracao_nota); //declaração de função para tocar uma nota
ISR(TIMER0_OVF_vect); //declaração da rotina de tratamento da interrupção do estouro do TCNT0

int main(void) //função principal
{
    DDRD = 0x0F;   //define os pinos PD7:4 como entradas e PD3:0 como saídas
  a6:	8f e0       	ldi	r24, 0x0F	; 15
  a8:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;   //define todo o PORTB como saída
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 b9       	out	0x04, r24	; 4
    PORTD = 0xFF;  //habilita o resistores de pull-up das entradas e coloca as saídas em nível alto
  ae:	8b b9       	out	0x0b, r24	; 11
    PORTB = 0x00;  //coloca todo o PORTB em nível baixo
  b0:	15 b8       	out	0x05, r1	; 5
    UCSR0B = 0x00; //configura os pinos PD0 e PD1 como IOs digitas
  b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    Inicializa_TC0(TC0_modo_normal, TC0_OC0A_normal&TC0_OC0B_normal&TC0_CLK_1024, TC0_TOIE0);
  b6:	4e ef       	ldi	r20, 0xFE	; 254
  b8:	6d e0       	ldi	r22, 0x0D	; 13
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <Inicializa_TC0>
    TCNT0 = 100;
  c0:	84 e6       	ldi	r24, 0x64	; 100
  c2:	86 bd       	out	0x26, r24	; 38
    /* modo normal, f_osc igual a 16MHz, prescaler igual a 1024, saídas comparadoras desabilitadas,
       interrupção por estouro do TCNT0 habilitada: 
       t_estouro = 1024 * ((255 - 100) + 1) / 16M = 9,98ms */    
    sei(); //habilita todas as fontes de interrupção setando o bit I do registrador SREG
  c4:	78 94       	sei
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x20>

000000c8 <toca_nota>:
    while(1) //loop infinito
    { }
}

void toca_nota(unsigned int duracao_nota) //implementando a função para tocar uma nota
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
    //unsigned char o, d, n; //declaração de variáveis
    unsigned char d, n; //declaração de variáveis
    //habilita o TC1
    Inicializa_TC1(TC1_modo_PWM_r_TOP_ICR1, TC1_OC1A_n_inv&TC1_OC1B_normal&TC1_CLK_1, TC1_INT_OFF);
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	69 e8       	ldi	r22, 0x89	; 137
  d2:	8e e0       	ldi	r24, 0x0E	; 14
  d4:	0e 94 9a 01 	call	0x334	; 0x334 <Inicializa_TC1>
    /* modo PWM rápido com valor TOP igual a ICR1 e ciclo ativo igual a OCR1A, prescaler igual a 1,
       saídas comparadoras desabilitadas e interrupções desabilitadas */
    //o = o_padrao;              //carrega a escala padrão
    d = d_padrao;              //carrega a durção da nota
    OCR1A = duracao_nota >> 1; //carrega a nota
  d8:	ce 01       	movw	r24, r28
  da:	96 95       	lsr	r25
  dc:	87 95       	ror	r24
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    n = 32 / d;                //calcula quantas vezes a nota será repetida
    ICR1 = duracao_nota;       //carrega a oitava
  e6:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ea:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    //pausa da CPU pelo tempo de execução da nota
    for(unsigned char k = 0; k < n; k++)         //duração de uma nota com uma base de tempo de 1 fusa
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	0d c0       	rjmp	.+26     	; 0x10c <toca_nota+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	ef e8       	ldi	r30, 0x8F	; 143
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <toca_nota+0x2e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <toca_nota+0x34>
  fc:	00 00       	nop
        for(unsigned int t = t_min; t != 0; t--) //duração de uma fusa com uma base de tempo de 100us
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	02 c0       	rjmp	.+4      	; 0x106 <toca_nota+0x3e>
 102:	86 ea       	ldi	r24, 0xA6	; 166
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	a1 f7       	brne	.-24     	; 0xf2 <toca_nota+0x2a>
    d = d_padrao;              //carrega a durção da nota
    OCR1A = duracao_nota >> 1; //carrega a nota
    n = 32 / d;                //calcula quantas vezes a nota será repetida
    ICR1 = duracao_nota;       //carrega a oitava
    //pausa da CPU pelo tempo de execução da nota
    for(unsigned char k = 0; k < n; k++)         //duração de uma nota com uma base de tempo de 1 fusa
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	22 30       	cpi	r18, 0x02	; 2
 10e:	c8 f3       	brcs	.-14     	; 0x102 <toca_nota+0x3a>
        for(unsigned int t = t_min; t != 0; t--) //duração de uma fusa com uma base de tempo de 100us
            _delay_us(100);
    //desabilita o TC1
    TCCR1A = 0x00;
 110:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0x00;
 114:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <__vector_16>:

ISR(TIMER0_OVF_vect) //implementação da rotina de tratamento da interrupção do estouro do TCNT0
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
    conta_tempo++;        //incrementa a variável auxiliar de contagem do tempo
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
    TCNT0 = 100;          //reinicia o registrador do TC0
 14a:	84 e6       	ldi	r24, 0x64	; 100
 14c:	86 bd       	out	0x26, r24	; 38
    if(conta_tempo == 10) //varredura do teclado a cada 99,8ms
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 152:	8a 30       	cpi	r24, 0x0A	; 10
 154:	09 f0       	breq	.+2      	; 0x158 <__vector_16+0x3a>
 156:	a9 c0       	rjmp	.+338    	; 0x2aa <__vector_16+0x18c>
    {
        static unsigned char controle_coluna = 0x01;            //variável auxiliar para leitura do teclado
        if(tst_bit(PORTD, coluna_1) && controle_coluna == 0x01) //verifica as teclas da primeira linha
 158:	58 9b       	sbis	0x0b, 0	; 11
 15a:	28 c0       	rjmp	.+80     	; 0x1ac <__vector_16+0x8e>
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	21 f5       	brne	.+72     	; 0x1ac <__vector_16+0x8e>
        {
	        controle_coluna = 0x02;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	        clr_bit(PORTD, coluna_1);
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8e 7f       	andi	r24, 0xFE	; 254
 16e:	8b b9       	out	0x0b, r24	; 11
	        set_bit(PORTD, coluna_2);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	82 60       	ori	r24, 0x02	; 2
 174:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_3);
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_4);
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	87 7f       	andi	r24, 0xF7	; 247
 180:	8b b9       	out	0x0b, r24	; 11
	        if(!tst_bit(PIND, linha_1))      toca_nota(15287); //Dó
 182:	4c 99       	sbic	0x09, 4	; 9
 184:	05 c0       	rjmp	.+10     	; 0x190 <__vector_16+0x72>
 186:	87 eb       	ldi	r24, 0xB7	; 183
 188:	9b e3       	ldi	r25, 0x3B	; 59
 18a:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 18e:	8b c0       	rjmp	.+278    	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_2)) toca_nota(10199); //Sol
 190:	4d 99       	sbic	0x09, 5	; 9
 192:	05 c0       	rjmp	.+10     	; 0x19e <__vector_16+0x80>
 194:	87 ed       	ldi	r24, 0xD7	; 215
 196:	97 e2       	ldi	r25, 0x27	; 39
 198:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 19c:	84 c0       	rjmp	.+264    	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_3)) toca_nota(12852); //Ré#
 19e:	4e 99       	sbic	0x09, 6	; 9
 1a0:	82 c0       	rjmp	.+260    	; 0x2a6 <__vector_16+0x188>
 1a2:	84 e3       	ldi	r24, 0x34	; 52
 1a4:	92 e3       	ldi	r25, 0x32	; 50
 1a6:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 1aa:	7d c0       	rjmp	.+250    	; 0x2a6 <__vector_16+0x188>
        }
        else if(tst_bit(PORTD, coluna_2) && controle_coluna == 0x02)
 1ac:	59 9b       	sbis	0x0b, 1	; 11
 1ae:	28 c0       	rjmp	.+80     	; 0x200 <__vector_16+0xe2>
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	21 f5       	brne	.+72     	; 0x200 <__vector_16+0xe2>
        {
	        controle_coluna = 0x03;
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	        clr_bit(PORTD, coluna_1);
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_2);
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8d 7f       	andi	r24, 0xFD	; 253
 1c8:	8b b9       	out	0x0b, r24	; 11
	        set_bit(PORTD, coluna_3);
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_4);
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	87 7f       	andi	r24, 0xF7	; 247
 1d4:	8b b9       	out	0x0b, r24	; 11
	        if(!tst_bit(PIND, linha_1))      toca_nota(13618); //Ré
 1d6:	4c 99       	sbic	0x09, 4	; 9
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <__vector_16+0xc6>
 1da:	82 e3       	ldi	r24, 0x32	; 50
 1dc:	95 e3       	ldi	r25, 0x35	; 53
 1de:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 1e2:	61 c0       	rjmp	.+194    	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_2)) toca_nota(18181); //Lá
 1e4:	4d 99       	sbic	0x09, 5	; 9
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <__vector_16+0xd4>
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	97 e4       	ldi	r25, 0x47	; 71
 1ec:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 1f0:	5a c0       	rjmp	.+180    	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_3)) toca_nota(10807); //Fá#
 1f2:	4e 99       	sbic	0x09, 6	; 9
 1f4:	58 c0       	rjmp	.+176    	; 0x2a6 <__vector_16+0x188>
 1f6:	87 e3       	ldi	r24, 0x37	; 55
 1f8:	9a e2       	ldi	r25, 0x2A	; 42
 1fa:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 1fe:	53 c0       	rjmp	.+166    	; 0x2a6 <__vector_16+0x188>
        }
        else if(tst_bit(PORTD, coluna_3) && controle_coluna == 0x03)
 200:	5a 9b       	sbis	0x0b, 2	; 11
 202:	28 c0       	rjmp	.+80     	; 0x254 <__vector_16+0x136>
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	21 f5       	brne	.+72     	; 0x254 <__vector_16+0x136>
        {
	        controle_coluna = 0x04;
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	        clr_bit(PORTD, coluna_1);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	8e 7f       	andi	r24, 0xFE	; 254
 216:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_2);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	8d 7f       	andi	r24, 0xFD	; 253
 21c:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_3);
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8b 7f       	andi	r24, 0xFB	; 251
 222:	8b b9       	out	0x0b, r24	; 11
	        set_bit(PORTD, coluna_4);
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	88 60       	ori	r24, 0x08	; 8
 228:	8b b9       	out	0x0b, r24	; 11
	        if(!tst_bit(PIND, linha_1))      toca_nota(12131); //Mi
 22a:	4c 99       	sbic	0x09, 4	; 9
 22c:	05 c0       	rjmp	.+10     	; 0x238 <__vector_16+0x11a>
 22e:	83 e6       	ldi	r24, 0x63	; 99
 230:	9f e2       	ldi	r25, 0x2F	; 47
 232:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 236:	37 c0       	rjmp	.+110    	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_2)) toca_nota(16197); //Si
 238:	4d 99       	sbic	0x09, 5	; 9
 23a:	05 c0       	rjmp	.+10     	; 0x246 <__vector_16+0x128>
 23c:	85 e4       	ldi	r24, 0x45	; 69
 23e:	9f e3       	ldi	r25, 0x3F	; 63
 240:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 244:	30 c0       	rjmp	.+96     	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_3)) toca_nota(9627);  //Sol#
 246:	4e 99       	sbic	0x09, 6	; 9
 248:	2e c0       	rjmp	.+92     	; 0x2a6 <__vector_16+0x188>
 24a:	8b e9       	ldi	r24, 0x9B	; 155
 24c:	95 e2       	ldi	r25, 0x25	; 37
 24e:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 252:	29 c0       	rjmp	.+82     	; 0x2a6 <__vector_16+0x188>
        }
        else if(tst_bit(PORTD, coluna_4) && controle_coluna == 0x04)
 254:	5b 9b       	sbis	0x0b, 3	; 11
 256:	27 c0       	rjmp	.+78     	; 0x2a6 <__vector_16+0x188>
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	19 f5       	brne	.+70     	; 0x2a6 <__vector_16+0x188>
        {
	        controle_coluna = 0x01;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	        set_bit(PORTD, coluna_1);
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_2);
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	8d 7f       	andi	r24, 0xFD	; 253
 270:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_3);
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	8b 7f       	andi	r24, 0xFB	; 251
 276:	8b b9       	out	0x0b, r24	; 11
	        clr_bit(PORTD, coluna_4);
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	87 7f       	andi	r24, 0xF7	; 247
 27c:	8b b9       	out	0x0b, r24	; 11
	        if(!tst_bit(PIND, linha_1))      toca_nota(11499); //Fá
 27e:	4c 99       	sbic	0x09, 4	; 9
 280:	05 c0       	rjmp	.+10     	; 0x28c <__vector_16+0x16e>
 282:	8b ee       	ldi	r24, 0xEB	; 235
 284:	9c e2       	ldi	r25, 0x2C	; 44
 286:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 28a:	0d c0       	rjmp	.+26     	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_2)) toca_nota(14429); //Dó#
 28c:	4d 99       	sbic	0x09, 5	; 9
 28e:	05 c0       	rjmp	.+10     	; 0x29a <__vector_16+0x17c>
 290:	8d e5       	ldi	r24, 0x5D	; 93
 292:	98 e3       	ldi	r25, 0x38	; 56
 294:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <__vector_16+0x188>
	        else if(!tst_bit(PIND, linha_3)) toca_nota(17159); //Lá#
 29a:	4e 99       	sbic	0x09, 6	; 9
 29c:	04 c0       	rjmp	.+8      	; 0x2a6 <__vector_16+0x188>
 29e:	87 e0       	ldi	r24, 0x07	; 7
 2a0:	93 e4       	ldi	r25, 0x43	; 67
 2a2:	0e 94 64 00 	call	0xc8	; 0xc8 <toca_nota>
        }
        conta_tempo = 0; //reinicia a variável auxiliar de contagem do tempo
 2a6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    }
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <Inicializa_TC0>:
 * - _TC0_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC0_INT:    configura as interrupções
 */
void Inicializa_TC0(unsigned char _TC0_modo, unsigned char _TC0_OCAB_N, unsigned char _TC0_INT)
{
	TCCR0A = 0x00;
 2cc:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 2ce:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= 0xF7;
 2d0:	ee e6       	ldi	r30, 0x6E	; 110
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	90 81       	ld	r25, Z
 2d6:	97 7f       	andi	r25, 0xF7	; 247
 2d8:	90 83       	st	Z, r25
	if(_TC0_modo == 0) TCCR0B |= (_TC0_OCAB_N & 0x07);
 2da:	81 11       	cpse	r24, r1
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <Inicializa_TC0+0x1c>
 2de:	85 b5       	in	r24, 0x25	; 37
 2e0:	67 70       	andi	r22, 0x07	; 7
 2e2:	68 2b       	or	r22, r24
 2e4:	65 bd       	out	0x25, r22	; 37
 2e6:	1f c0       	rjmp	.+62     	; 0x326 <Inicializa_TC0+0x5a>
	else if(_TC0_modo < 5)
 2e8:	85 30       	cpi	r24, 0x05	; 5
 2ea:	60 f4       	brcc	.+24     	; 0x304 <Inicializa_TC0+0x38>
	{		
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 2ec:	94 b5       	in	r25, 0x24	; 36
 2ee:	26 2f       	mov	r18, r22
 2f0:	20 7f       	andi	r18, 0xF0	; 240
 2f2:	83 70       	andi	r24, 0x03	; 3
 2f4:	82 2b       	or	r24, r18
 2f6:	89 2b       	or	r24, r25
 2f8:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= (_TC0_OCAB_N & 0x07);
 2fa:	85 b5       	in	r24, 0x25	; 37
 2fc:	67 70       	andi	r22, 0x07	; 7
 2fe:	68 2b       	or	r22, r24
 300:	65 bd       	out	0x25, r22	; 37
 302:	11 c0       	rjmp	.+34     	; 0x326 <Inicializa_TC0+0x5a>
	}
	else
	{
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 304:	24 b5       	in	r18, 0x24	; 36
 306:	36 2f       	mov	r19, r22
 308:	30 7f       	andi	r19, 0xF0	; 240
 30a:	98 2f       	mov	r25, r24
 30c:	93 70       	andi	r25, 0x03	; 3
 30e:	93 2b       	or	r25, r19
 310:	92 2b       	or	r25, r18
 312:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (((_TC0_modo << 1) & 0x08) | (_TC0_OCAB_N & 0x07));
 314:	25 b5       	in	r18, 0x25	; 37
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 70       	andi	r24, 0x08	; 8
 31e:	67 70       	andi	r22, 0x07	; 7
 320:	86 2b       	or	r24, r22
 322:	82 2b       	or	r24, r18
 324:	85 bd       	out	0x25, r24	; 37
		
	}
	TIMSK0 |= ~(_TC0_INT);
 326:	ee e6       	ldi	r30, 0x6E	; 110
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	40 95       	com	r20
 32e:	48 2b       	or	r20, r24
 330:	40 83       	st	Z, r20
 332:	08 95       	ret

00000334 <Inicializa_TC1>:
 * - _TC1_OCAB_N: seleciona o prescaler e configura a entrada de captura e as saídas de comparação
 * - _TC1_INT:    configura as interrupções
 */
void Inicializa_TC1(unsigned char _TC1_modo, unsigned char _TC1_OCAB_N, unsigned char _TC1_INT)
{
    TCCR1A = 0x00;
 334:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x00;
 338:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 &= 0xD7;
 33c:	ef e6       	ldi	r30, 0x6F	; 111
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	90 81       	ld	r25, Z
 342:	97 7d       	andi	r25, 0xD7	; 215
 344:	90 83       	st	Z, r25
	if(_TC1_INT == 0) TCCR1B |= (_TC1_OCAB_N & 0x47);
 346:	41 11       	cpse	r20, r1
 348:	07 c0       	rjmp	.+14     	; 0x358 <Inicializa_TC1+0x24>
 34a:	e1 e8       	ldi	r30, 0x81	; 129
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	67 74       	andi	r22, 0x47	; 71
 352:	68 2b       	or	r22, r24
 354:	60 83       	st	Z, r22
 356:	27 c0       	rjmp	.+78     	; 0x3a6 <Inicializa_TC1+0x72>
	else if(_TC1_OCAB_N < 4)
 358:	64 30       	cpi	r22, 0x04	; 4
 35a:	80 f4       	brcc	.+32     	; 0x37c <Inicializa_TC1+0x48>
	{
		TCCR1A |= ((_TC1_OCAB_N & 0xF0) | (_TC1_modo & 0x03));
 35c:	e0 e8       	ldi	r30, 0x80	; 128
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	90 81       	ld	r25, Z
 362:	26 2f       	mov	r18, r22
 364:	20 7f       	andi	r18, 0xF0	; 240
 366:	83 70       	andi	r24, 0x03	; 3
 368:	82 2b       	or	r24, r18
 36a:	89 2b       	or	r24, r25
 36c:	80 83       	st	Z, r24
		TCCR1B |= (_TC1_OCAB_N & 0x07);
 36e:	e1 e8       	ldi	r30, 0x81	; 129
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	67 70       	andi	r22, 0x07	; 7
 376:	68 2b       	or	r22, r24
 378:	60 83       	st	Z, r22
 37a:	15 c0       	rjmp	.+42     	; 0x3a6 <Inicializa_TC1+0x72>
	}
	else
	{
		TCCR1A |= ((_TC1_OCAB_N & 0xF0) | (_TC1_modo & 0x03));
 37c:	e0 e8       	ldi	r30, 0x80	; 128
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	20 81       	ld	r18, Z
 382:	36 2f       	mov	r19, r22
 384:	30 7f       	andi	r19, 0xF0	; 240
 386:	98 2f       	mov	r25, r24
 388:	93 70       	andi	r25, 0x03	; 3
 38a:	93 2b       	or	r25, r19
 38c:	92 2b       	or	r25, r18
 38e:	90 83       	st	Z, r25
		TCCR1B |= (((_TC1_modo << 1) & 0x18) | (_TC1_OCAB_N & 0x07));
 390:	e1 e8       	ldi	r30, 0x81	; 129
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	20 81       	ld	r18, Z
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	88 71       	andi	r24, 0x18	; 24
 39e:	67 70       	andi	r22, 0x07	; 7
 3a0:	86 2b       	or	r24, r22
 3a2:	82 2b       	or	r24, r18
 3a4:	80 83       	st	Z, r24
	}
	TIMSK1 |= ~(_TC1_INT);
 3a6:	ef e6       	ldi	r30, 0x6F	; 111
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	40 95       	com	r20
 3ae:	48 2b       	or	r20, r24
 3b0:	40 83       	st	Z, r20
 3b2:	08 95       	ret

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
