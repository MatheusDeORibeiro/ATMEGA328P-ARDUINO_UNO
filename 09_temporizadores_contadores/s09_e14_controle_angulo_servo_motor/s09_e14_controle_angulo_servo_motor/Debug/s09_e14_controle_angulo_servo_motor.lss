
s09_e14_controle_angulo_servo_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084e  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00000b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000419  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023f  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

ISR(TIMER0_OVF_vect); //declaração de rotina de tratamento do estouro do TCNT0

int main(void) //função principal
{
    DDRD = 0xF3;  //configura PD3:2 como entradas e os pinos restantes como saídas
  90:	83 ef       	ldi	r24, 0xF3	; 243
  92:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0xFF;  //configura todo o PORTB como saída
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  //configura todo o PORTC como saída
  98:	87 b9       	out	0x07, r24	; 7
    PORTD = 0x0C; //habilita os resistores pull-up das entradas e coloca os pinos restantes em nível baixo
  9a:	8c e0       	ldi	r24, 0x0C	; 12
  9c:	8b b9       	out	0x0b, r24	; 11
    PORTB = 0x00; //coloca todo o PORTB em nível baixo
  9e:	15 b8       	out	0x05, r1	; 5
    PORTC = 0x00; //coloca todo o PORTC em nível baixo
  a0:	18 b8       	out	0x08, r1	; 8

    Inicializa_TC0(TC0_modo_normal, TC0_CLK_1024, TC0_TOIE0);
  a2:	4e ef       	ldi	r20, 0xFE	; 254
  a4:	6d ef       	ldi	r22, 0xFD	; 253
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 a9 00 	call	0x152	; 0x152 <Inicializa_TC0>
    /* modo normal com valor TOP igual a 100(TCNT0), f_osc igual 16MHz, prescaler igual a 1024, 
       saídas comparadoras desabilitadas, interrupção por estouro do TCNT0 habilitada:
       t_estouro = 9,98ms, com a variável conta_temp igual a 10, t_estouro = 99,8ms */
    TCNT0 = 100; //para gerar varrer os botões a cada 99,8ms
  ac:	84 e6       	ldi	r24, 0x64	; 100
  ae:	86 bd       	out	0x26, r24	; 38

    Inicializa_TC1(TC1_modo_PWM_r_TOP_ICR1, TC1_OC1A_n_inv&TC1_CLK_8, TC1_INT_OFF);
  b0:	4f ef       	ldi	r20, 0xFF	; 255
  b2:	6a eb       	ldi	r22, 0xBA	; 186
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Inicializa_TC1>
    /* modo PWM rápido com valor TOP igual a 39999(ICR1), f_osc igual a 16MHz, prescaler igual a 8,
       saída comparadora A não inversora, interrupções desabilitadas:
       T_PWM = 20ms*/
    ICR1 = 39999; //definição do período
  ba:	8f e3       	ldi	r24, 0x3F	; 63
  bc:	9c e9       	ldi	r25, 0x9C	; 156
  be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    OCR1A = 1000; //definição do ciclo ativo mínimo
  c6:	88 ee       	ldi	r24, 0xE8	; 232
  c8:	93 e0       	ldi	r25, 0x03	; 3
  ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    sei(); //habilita todas as fontes de interrupção setando o bit I do registrador SREG
  d2:	78 94       	sei
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x44>

000000d6 <__vector_16>:

    while(1); //loop infinito
}

ISR(TIMER0_OVF_vect) //implementando a rotina de tratamento do estouro do TCNT0
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
    conta_tempo++;        //incrementa a variável auxiliar do tempo
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	8f 5f       	subi	r24, 0xFF	; 255
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    if(conta_tempo == 10) //se a variável auxiliar for igual a 10...
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	8a 30       	cpi	r24, 0x0A	; 10
  f6:	29 f5       	brne	.+74     	; 0x142 <__vector_16+0x6c>
    {
        if(!tst_bit(PIND, INCR) && OCR1A < 5000)      OCR1A += PASSO; //incrementa o ângulo de giro do motor
  f8:	4a 99       	sbic	0x09, 2	; 9
  fa:	0e c0       	rjmp	.+28     	; 0x118 <__vector_16+0x42>
  fc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 100:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 104:	88 38       	cpi	r24, 0x88	; 136
 106:	93 41       	sbci	r25, 0x13	; 19
 108:	38 f4       	brcc	.+14     	; 0x118 <__vector_16+0x42>
 10a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 10e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	8c 59       	subi	r24, 0x9C	; 156
 114:	9f 4f       	sbci	r25, 0xFF	; 255
 116:	0f c0       	rjmp	.+30     	; 0x136 <__vector_16+0x60>
        else if(!tst_bit(PIND, DECR) && OCR1A > 1000) OCR1A -= PASSO; //decrementa o ângulo do giro do motor
 118:	4b 99       	sbic	0x09, 3	; 9
 11a:	11 c0       	rjmp	.+34     	; 0x13e <__vector_16+0x68>
 11c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 120:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 124:	89 3e       	cpi	r24, 0xE9	; 233
 126:	93 40       	sbci	r25, 0x03	; 3
 128:	50 f0       	brcs	.+20     	; 0x13e <__vector_16+0x68>
 12a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 12e:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 132:	84 56       	subi	r24, 0x64	; 100
 134:	91 09       	sbc	r25, r1
 136:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
        conta_tempo = 0;                                              //reinicia a variável auxiliar do tempo
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <Inicializa_TC0>:
 * - _TC0_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC0_INT:    configura as interrupções
 */
void Inicializa_TC0(unsigned char _TC0_modo, unsigned char _TC0_OCAB_N, unsigned char _TC0_INT)
{
	TCCR0A = 0x00;
 152:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 154:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= 0xF7;
 156:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 15a:	97 7f       	andi	r25, 0xF7	; 247
 15c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 160:	36 2f       	mov	r19, r22
 162:	37 70       	andi	r19, 0x07	; 7
	if(_TC0_modo == 0) TCCR0B |= (_TC0_OCAB_N & 0x07);
 164:	88 23       	and	r24, r24
 166:	49 f0       	breq	.+18     	; 0x17a <Inicializa_TC0+0x28>
 168:	60 7f       	andi	r22, 0xF0	; 240
 16a:	98 2f       	mov	r25, r24
 16c:	93 70       	andi	r25, 0x03	; 3
	else if(_TC0_modo < 5)
 16e:	85 30       	cpi	r24, 0x05	; 5
 170:	40 f4       	brcc	.+16     	; 0x182 <Inicializa_TC0+0x30>
	{		
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 172:	84 b5       	in	r24, 0x24	; 36
 174:	68 2b       	or	r22, r24
 176:	96 2b       	or	r25, r22
 178:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (_TC0_OCAB_N & 0x07);
 17a:	95 b5       	in	r25, 0x25	; 37
 17c:	93 2b       	or	r25, r19
 17e:	95 bd       	out	0x25, r25	; 37
 180:	0b c0       	rjmp	.+22     	; 0x198 <Inicializa_TC0+0x46>
	}
	else
	{
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 182:	24 b5       	in	r18, 0x24	; 36
 184:	62 2b       	or	r22, r18
 186:	96 2b       	or	r25, r22
 188:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (((_TC0_modo << 1) & 0x08) | (_TC0_OCAB_N & 0x07));
 18a:	25 b5       	in	r18, 0x25	; 37
 18c:	88 0f       	add	r24, r24
 18e:	88 70       	andi	r24, 0x08	; 8
 190:	93 2f       	mov	r25, r19
 192:	92 2b       	or	r25, r18
 194:	89 2b       	or	r24, r25
 196:	85 bd       	out	0x25, r24	; 37
		
	}
	TIMSK0 |= ~(_TC0_INT);
 198:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 19c:	40 95       	com	r20
 19e:	48 2b       	or	r20, r24
 1a0:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 1a4:	08 95       	ret

000001a6 <Inicializa_TC1>:
 * - _TC1_OCAB_N: seleciona o prescaler e configura a entrada de captura e as saídas de comparação
 * - _TC1_INT:    configura as interrupções
 */
void Inicializa_TC1(unsigned char _TC1_modo, unsigned char _TC1_OCAB_N, unsigned char _TC1_INT)
{
    TCCR1A = 0x00;
 1a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x00;
 1aa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 &= 0xD7;
 1ae:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 1b2:	97 7d       	andi	r25, 0xD7	; 215
 1b4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	if(_TC1_INT == 0) TCCR1B |= (_TC1_OCAB_N & 0x47);
 1b8:	41 11       	cpse	r20, r1
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <Inicializa_TC1+0x1e>
 1bc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1c0:	67 74       	andi	r22, 0x47	; 71
 1c2:	1a c0       	rjmp	.+52     	; 0x1f8 <Inicializa_TC1+0x52>
 1c4:	98 2f       	mov	r25, r24
 1c6:	93 70       	andi	r25, 0x03	; 3
	else if(_TC1_OCAB_N < 4)
 1c8:	64 30       	cpi	r22, 0x04	; 4
 1ca:	40 f4       	brcc	.+16     	; 0x1dc <Inicializa_TC1+0x36>
	{
		TCCR1A |= ((_TC1_OCAB_N & 0xF0) | (_TC1_modo & 0x03));
 1cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 1d0:	98 2b       	or	r25, r24
 1d2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B |= (_TC1_OCAB_N & 0x07);
 1d6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1da:	0e c0       	rjmp	.+28     	; 0x1f8 <Inicializa_TC1+0x52>
	}
	else
	{
		TCCR1A |= ((_TC1_OCAB_N & 0xF0) | (_TC1_modo & 0x03));
 1dc:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 1e0:	92 2b       	or	r25, r18
 1e2:	26 2f       	mov	r18, r22
 1e4:	20 7f       	andi	r18, 0xF0	; 240
 1e6:	92 2b       	or	r25, r18
 1e8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B |= (((_TC1_modo << 1) & 0x18) | (_TC1_OCAB_N & 0x07));
 1ec:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1f0:	67 70       	andi	r22, 0x07	; 7
 1f2:	69 2b       	or	r22, r25
 1f4:	88 0f       	add	r24, r24
 1f6:	88 71       	andi	r24, 0x18	; 24
 1f8:	68 2b       	or	r22, r24
 1fa:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	}
	TIMSK1 |= ~(_TC1_INT);
 1fe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 202:	40 95       	com	r20
 204:	48 2b       	or	r20, r24
 206:	40 93 6f 00 	sts	0x006F, r20	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
