
PWM_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000194  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ba  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000626  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022d  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038a  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000157d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
volatile unsigned int Passo_PWM1 = 0;
volatile unsigned int Ciclo_Ativo_PWM1;

//-----------------------------------------------------------------------------------
ISR(TIMER0_OVF_vect) //o tempo de estouro do TC0 determina a menor resolução temporal
{                    //para o PWM (ciclo ativo)
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	Passo_PWM1++; //incremento do passo de tempo
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(Passo_PWM1 == Resol_PWM1)
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  bc:	88 3e       	cpi	r24, 0xE8	; 232
  be:	93 40       	sbci	r25, 0x03	; 3
  c0:	39 f4       	brne	.+14     	; 0xd0 <__vector_16+0x40>
	{
		Passo_PWM1 = 0;       //inicializa o contador
  c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		set_bit(PORTB, PWM1); //na igualdade de comparação coloca o pino PWM1 em 1
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 b9       	out	0x05, r24	; 5
	}
	
	if(Passo_PWM1 == Ciclo_Ativo_PWM1)
  d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Ciclo_Ativo_PWM1>
  dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <Ciclo_Ativo_PWM1+0x1>
  e0:	28 17       	cp	r18, r24
  e2:	39 07       	cpc	r19, r25
  e4:	19 f4       	brne	.+6      	; 0xec <__vector_16+0x5c>
	clr_bit(PORTB, PWM1); /*quando o contador atinge o valor do ciclo ativo do
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	85 b9       	out	0x05, r24	; 5
	                        PWM1 o pino vai a zero*/
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	3f 91       	pop	r19
  f2:	2f 91       	pop	r18
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:
//-----------------------------------------------------------------------------------
int main()
{
	DDRB = 0b00000001;  //somente o pino do LED como saída
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11111110; //apaga o LED e habilita pull-ups nos pinos não utilizados
 102:	9e ef       	ldi	r25, 0xFE	; 254
 104:	95 b9       	out	0x05, r25	; 5
	
	TCCR0B = 1 << CS00;  //TC0 com prescaler de 1, a 16 MHz gera uma interrupção a cada 16 us
 106:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 1 << TOIE0; //habilita a interrupção do TC0	
 108:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	sei(); //habilita interrupções globais
 10c:	78 94       	sei
	
	Ciclo_Ativo_PWM1 = 500; //determinação do ciclo ativo para o PWM1
 10e:	84 ef       	ldi	r24, 0xF4	; 244
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Ciclo_Ativo_PWM1+0x1>
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Ciclo_Ativo_PWM1>
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x1c>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
