
s09_e11_gerando_4_PWM_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000306  0000039a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000449  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024c  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 81 01 	jmp	0x302	; 0x302 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

ISR(TIMER0_OVF_vect); //declaração do protótipo da rotina de tratamento da interrupção por estouro do TCNT0

int main(void) //função principal
{
    DDRB = 0xFF;  //configura todo o PORTB como saída
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
    PORTB = 0xFF; //coloca todo o PORTB em nível alto
  aa:	85 b9       	out	0x05, r24	; 5

    Inicializa_TC0(TC0_modo_normal, TC0_CLK_1, TC0_TOIE0);
  ac:	4e ef       	ldi	r20, 0xFE	; 254
  ae:	69 ef       	ldi	r22, 0xF9	; 249
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 57 01 	call	0x2ae	; 0x2ae <Inicializa_TC0>
    /* temporizador contador 0 no modo normal, f_osc igual a 16MHz, prescaler igual a 1, 
       saídas comparadoras desabilitadas, interrupção por estouro do TCNT0 habilitada:
       t_estouro = 16us */
    sei(); //habilita todas as fontes de interrupção setando o bit I do registrador SREG
  b6:	78 94       	sei
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x12>

000000ba <__vector_16>:

    while(1); //loop infinito
}

ISR(TIMER0_OVF_vect) //implementação da rotina de tratamento da interrupção por estouro do TCNT0
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
    static unsigned int n_PWM1, n_PWM2, n_PWM3, n_PWM4 = 0; //variáveis estáticas auxiliares
    quant_estouros++; //incrementa a variável que armazena a quantidade de estouros do TCNT0
  cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
  d0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <quant_estouros+0x1>
  da:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <quant_estouros>
    //gera PWM1
    if(quant_estouros - n_PWM1 == periodo_PWM1) //controle do período
  de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
  e2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
  e6:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <n_PWM1.1758>
  ea:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <n_PWM1.1758+0x1>
  ee:	82 1b       	sub	r24, r18
  f0:	93 0b       	sbc	r25, r19
  f2:	84 36       	cpi	r24, 0x64	; 100
  f4:	91 05       	cpc	r25, r1
  f6:	49 f4       	brne	.+18     	; 0x10a <__vector_16+0x50>
    {
        set_bit(PORTB, pino_PWM1);
  f8:	28 9a       	sbi	0x05, 0	; 5
        n_PWM1 = quant_estouros;
  fa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
  fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 102:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <n_PWM1.1758+0x1>
 106:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <n_PWM1.1758>
    }
    if(quant_estouros - n_PWM1 == dc_PWM1)      //controle do ciclo ativo
 10a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <quant_estouros>
 10e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <quant_estouros+0x1>
 112:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <n_PWM1.1758>
 116:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <n_PWM1.1758+0x1>
 11a:	28 1b       	sub	r18, r24
 11c:	39 0b       	sbc	r19, r25
 11e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dc_PWM1>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	09 f4       	brne	.+2      	; 0x12c <__vector_16+0x72>
        clr_bit(PORTB, pino_PWM1);
 12a:	28 98       	cbi	0x05, 0	; 5
    //gera PWM2
    if(quant_estouros - n_PWM2 == periodo_PWM2) //controle do período
 12c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 130:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 134:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <n_PWM2.1759>
 138:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <n_PWM2.1759+0x1>
 13c:	82 1b       	sub	r24, r18
 13e:	93 0b       	sbc	r25, r19
 140:	80 39       	cpi	r24, 0x90	; 144
 142:	91 40       	sbci	r25, 0x01	; 1
 144:	49 f4       	brne	.+18     	; 0x158 <__vector_16+0x9e>
    {
        set_bit(PORTB, pino_PWM2);
 146:	29 9a       	sbi	0x05, 1	; 5
        n_PWM2 = quant_estouros;
 148:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 14c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 150:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <n_PWM2.1759+0x1>
 154:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <n_PWM2.1759>
    }
    if(quant_estouros - n_PWM2 == dc_PWM2)      //controle do ciclo ativo
 158:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 15c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 160:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <n_PWM2.1759>
 164:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <n_PWM2.1759+0x1>
 168:	82 1b       	sub	r24, r18
 16a:	93 0b       	sbc	r25, r19
 16c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <dc_PWM2>
 170:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <dc_PWM2+0x1>
 174:	82 17       	cp	r24, r18
 176:	93 07       	cpc	r25, r19
 178:	09 f4       	brne	.+2      	; 0x17c <__vector_16+0xc2>
        clr_bit(PORTB, pino_PWM2);
 17a:	29 98       	cbi	0x05, 1	; 5
    //gera PWM3
    if(quant_estouros - n_PWM3 == periodo_PWM3) //controle do período
 17c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 180:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 184:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <n_PWM3.1760>
 188:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <n_PWM3.1760+0x1>
 18c:	82 1b       	sub	r24, r18
 18e:	93 0b       	sbc	r25, r19
 190:	88 3e       	cpi	r24, 0xE8	; 232
 192:	93 40       	sbci	r25, 0x03	; 3
 194:	49 f4       	brne	.+18     	; 0x1a8 <__vector_16+0xee>
    {
        set_bit(PORTB, pino_PWM3);
 196:	2a 9a       	sbi	0x05, 2	; 5
        n_PWM3 = quant_estouros;
 198:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 19c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 1a0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <n_PWM3.1760+0x1>
 1a4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <n_PWM3.1760>
    }
    if(quant_estouros - n_PWM3 == dc_PWM3)      //controle do ciclo ativo
 1a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 1ac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 1b0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <n_PWM3.1760>
 1b4:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <n_PWM3.1760+0x1>
 1b8:	82 1b       	sub	r24, r18
 1ba:	93 0b       	sbc	r25, r19
 1bc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <dc_PWM3>
 1c0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <dc_PWM3+0x1>
 1c4:	82 17       	cp	r24, r18
 1c6:	93 07       	cpc	r25, r19
 1c8:	09 f4       	brne	.+2      	; 0x1cc <__vector_16+0x112>
        clr_bit(PORTB, pino_PWM3);
 1ca:	2a 98       	cbi	0x05, 2	; 5
    //gera PWM4
    if(quant_estouros - n_PWM4 == periodo_PWM4) //controle do período
 1cc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 1d0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 1d4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 1d8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 1dc:	82 1b       	sub	r24, r18
 1de:	93 0b       	sbc	r25, r19
 1e0:	88 38       	cpi	r24, 0x88	; 136
 1e2:	93 41       	sbci	r25, 0x13	; 19
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <__vector_16+0x13e>
    {
        set_bit(PORTB, pino_PWM4);
 1e6:	2b 9a       	sbi	0x05, 3	; 5
        n_PWM4 = quant_estouros;
 1e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 1ec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 1f0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 1f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    }
    if(quant_estouros - n_PWM4 == dc_PWM4)      //controle do ciclo ativo
 1f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 1fc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 200:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 204:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 208:	82 1b       	sub	r24, r18
 20a:	93 0b       	sbc	r25, r19
 20c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 210:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 214:	82 17       	cp	r24, r18
 216:	93 07       	cpc	r25, r19
 218:	09 f4       	brne	.+2      	; 0x21c <__vector_16+0x162>
        clr_bit(PORTB, pino_PWM4);
 21a:	2b 98       	cbi	0x05, 3	; 5
    //para evitar que o estouro da variável quant_estouros desincronize os sinais
	if(n_PWM1 == quant_estouros && n_PWM2 == quant_estouros && n_PWM3 == quant_estouros && n_PWM4 == quant_estouros)
 21c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 220:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 224:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <n_PWM1.1758>
 228:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <n_PWM1.1758+0x1>
 22c:	28 17       	cp	r18, r24
 22e:	39 07       	cpc	r19, r25
 230:	a9 f5       	brne	.+106    	; 0x29c <__vector_16+0x1e2>
 232:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 236:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 23a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <n_PWM2.1759>
 23e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <n_PWM2.1759+0x1>
 242:	28 17       	cp	r18, r24
 244:	39 07       	cpc	r19, r25
 246:	51 f5       	brne	.+84     	; 0x29c <__vector_16+0x1e2>
 248:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 24c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 250:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <n_PWM3.1760>
 254:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <n_PWM3.1760+0x1>
 258:	28 17       	cp	r18, r24
 25a:	39 07       	cpc	r19, r25
 25c:	f9 f4       	brne	.+62     	; 0x29c <__vector_16+0x1e2>
 25e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <quant_estouros>
 262:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <quant_estouros+0x1>
 266:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__data_end>
 26a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__data_end+0x1>
 26e:	28 17       	cp	r18, r24
 270:	39 07       	cpc	r19, r25
 272:	a1 f4       	brne	.+40     	; 0x29c <__vector_16+0x1e2>
	    quant_estouros = 0, n_PWM1 = 0, n_PWM2 = 0, n_PWM3 = 0, n_PWM4 = 0;
 274:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <quant_estouros+0x1>
 278:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <quant_estouros>
 27c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <n_PWM1.1758+0x1>
 280:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <n_PWM1.1758>
 284:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <n_PWM2.1759+0x1>
 288:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <n_PWM2.1759>
 28c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <n_PWM3.1760+0x1>
 290:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <n_PWM3.1760>
 294:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <__data_end+0x1>
 298:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
}  
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <Inicializa_TC0>:
 * - _TC0_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC0_INT:    configura as interrupções
 */
void Inicializa_TC0(unsigned char _TC0_modo, unsigned char _TC0_OCAB_N, unsigned char _TC0_INT)
{
	TCCR0A = 0x00;
 2ae:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 2b0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= 0xF7;
 2b2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2b6:	97 7f       	andi	r25, 0xF7	; 247
 2b8:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2bc:	36 2f       	mov	r19, r22
 2be:	37 70       	andi	r19, 0x07	; 7
	if(_TC0_modo == 0) TCCR0B |= (_TC0_OCAB_N & 0x07);
 2c0:	88 23       	and	r24, r24
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <Inicializa_TC0+0x28>
 2c4:	60 7f       	andi	r22, 0xF0	; 240
 2c6:	98 2f       	mov	r25, r24
 2c8:	93 70       	andi	r25, 0x03	; 3
	else if(_TC0_modo < 5)
 2ca:	85 30       	cpi	r24, 0x05	; 5
 2cc:	40 f4       	brcc	.+16     	; 0x2de <Inicializa_TC0+0x30>
	{		
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 2ce:	84 b5       	in	r24, 0x24	; 36
 2d0:	68 2b       	or	r22, r24
 2d2:	96 2b       	or	r25, r22
 2d4:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (_TC0_OCAB_N & 0x07);
 2d6:	95 b5       	in	r25, 0x25	; 37
 2d8:	93 2b       	or	r25, r19
 2da:	95 bd       	out	0x25, r25	; 37
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <Inicializa_TC0+0x46>
	}
	else
	{
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 2de:	24 b5       	in	r18, 0x24	; 36
 2e0:	62 2b       	or	r22, r18
 2e2:	96 2b       	or	r25, r22
 2e4:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (((_TC0_modo << 1) & 0x08) | (_TC0_OCAB_N & 0x07));
 2e6:	25 b5       	in	r18, 0x25	; 37
 2e8:	88 0f       	add	r24, r24
 2ea:	88 70       	andi	r24, 0x08	; 8
 2ec:	93 2f       	mov	r25, r19
 2ee:	92 2b       	or	r25, r18
 2f0:	89 2b       	or	r24, r25
 2f2:	85 bd       	out	0x25, r24	; 37
		
	}
	TIMSK0 |= ~(_TC0_INT);
 2f4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2f8:	40 95       	com	r20
 2fa:	48 2b       	or	r20, r24
 2fc:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 300:	08 95       	ret

00000302 <_exit>:
 302:	f8 94       	cli

00000304 <__stop_program>:
 304:	ff cf       	rjmp	.-2      	; 0x304 <__stop_program>
