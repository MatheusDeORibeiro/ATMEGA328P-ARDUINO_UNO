
teste_TC1_modo_PWM_fase_freq_corr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f5  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ad  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000298  00000000  00000000  00001919  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "timers.h"


int main(void) //função principal
{
    DDRB = 0xFF;  //configura todo o PORTB como saída
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //coloca todo o PORTB em nível baixo
  84:	15 b8       	out	0x05, r1	; 5
	
	Inicializa_TC1(TC1_modo_PWM_ffc_TOP_OCR1A, TC1_OC1A_normal&TC1_OC1B_n_inv&TC1_CLK_1, TC1_INT_OFF);
  86:	4f ef       	ldi	r20, 0xFF	; 255
  88:	69 e2       	ldi	r22, 0x29	; 41
  8a:	89 e0       	ldi	r24, 0x09	; 9
  8c:	0e 94 55 00 	call	0xaa	; 0xaa <Inicializa_TC1>
	OCR1A = 300;
  90:	8c e2       	ldi	r24, 0x2C	; 44
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 100;
  9c:	84 e6       	ldi	r24, 0x64	; 100
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  a4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x28>

000000aa <Inicializa_TC1>:
 * - _TC1_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC1_INT:    configura as interrupções
 */
void Inicializa_TC1(unsigned char _TC1_modo, unsigned char _TC1_OCAB_N, unsigned char _TC1_INT)
{
    TCCR1A = 0x00;
  aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x00;
  ae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 &= 0xD7;
  b2:	ef e6       	ldi	r30, 0x6F	; 111
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	97 7d       	andi	r25, 0xD7	; 215
  ba:	90 83       	st	Z, r25
	if(_TC1_INT == 0) TCCR1B |= (_TC1_OCAB_N & 0x07);
  bc:	41 11       	cpse	r20, r1
  be:	07 c0       	rjmp	.+14     	; 0xce <Inicializa_TC1+0x24>
  c0:	e1 e8       	ldi	r30, 0x81	; 129
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	67 70       	andi	r22, 0x07	; 7
  c8:	68 2b       	or	r22, r24
  ca:	60 83       	st	Z, r22
  cc:	27 c0       	rjmp	.+78     	; 0x11c <Inicializa_TC1+0x72>
	else if(_TC1_OCAB_N < 4)
  ce:	64 30       	cpi	r22, 0x04	; 4
  d0:	80 f4       	brcc	.+32     	; 0xf2 <Inicializa_TC1+0x48>
	{
		TCCR1A |= ((_TC1_OCAB_N & 0xF0) | (_TC1_modo & 0x03));
  d2:	e0 e8       	ldi	r30, 0x80	; 128
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	26 2f       	mov	r18, r22
  da:	20 7f       	andi	r18, 0xF0	; 240
  dc:	83 70       	andi	r24, 0x03	; 3
  de:	82 2b       	or	r24, r18
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
		TCCR1B |= (_TC1_OCAB_N & 0x07);
  e4:	e1 e8       	ldi	r30, 0x81	; 129
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	67 70       	andi	r22, 0x07	; 7
  ec:	68 2b       	or	r22, r24
  ee:	60 83       	st	Z, r22
  f0:	15 c0       	rjmp	.+42     	; 0x11c <Inicializa_TC1+0x72>
	}
	else
	{
		TCCR1A |= ((_TC1_OCAB_N & 0xF0) | (_TC1_modo & 0x03));
  f2:	e0 e8       	ldi	r30, 0x80	; 128
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	20 81       	ld	r18, Z
  f8:	36 2f       	mov	r19, r22
  fa:	30 7f       	andi	r19, 0xF0	; 240
  fc:	98 2f       	mov	r25, r24
  fe:	93 70       	andi	r25, 0x03	; 3
 100:	93 2b       	or	r25, r19
 102:	92 2b       	or	r25, r18
 104:	90 83       	st	Z, r25
		TCCR1B |= (((_TC1_modo << 1) & 0x18) | (_TC1_OCAB_N & 0x03));
 106:	e1 e8       	ldi	r30, 0x81	; 129
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	20 81       	ld	r18, Z
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	88 71       	andi	r24, 0x18	; 24
 114:	63 70       	andi	r22, 0x03	; 3
 116:	86 2b       	or	r24, r22
 118:	82 2b       	or	r24, r18
 11a:	80 83       	st	Z, r24
	}
	TIMSK1 |= ~(_TC1_INT);
 11c:	ef e6       	ldi	r30, 0x6F	; 111
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	40 95       	com	r20
 124:	48 2b       	or	r20, r24
 126:	40 83       	st	Z, r20
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
