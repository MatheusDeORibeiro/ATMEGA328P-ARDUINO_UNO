
Sonar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000046a  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  00000502  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001113  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008cf  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065b  00000000  00000000  00001fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000261c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000937  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000034c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_10>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	78 78       	andi	r23, 0x88	; 136
  6a:	78 00       	.word	0x0078	; ????
	...

0000006d <mensagem1>:
  6d:	44 69 73 74 61 6e 63 20 3d 20 63 6d 00 00 00        Distanc = cm...

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea e6       	ldi	r30, 0x6A	; 106
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a8 30       	cpi	r26, 0x08	; 8
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  b2:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <cmd_LCD>:
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//-----------------------------------------------------------------------------------
//c é o dado e cd indica se é instrução ou caractere (0 ou 1)
void cmd_LCD(unsigned char c, char cd)
{
	if(cd == 0)                //instrução
  ba:	61 11       	cpse	r22, r1
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <cmd_LCD+0xc>
	    clr_bit(CONTR_LCD,RS);
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	9b 7f       	andi	r25, 0xFB	; 251
  c2:	9b b9       	out	0x0b, r25	; 11
  c4:	03 c0       	rjmp	.+6      	; 0xcc <cmd_LCD+0x12>
	else                       //caractere
	    set_bit(CONTR_LCD,RS);
  c6:	9b b1       	in	r25, 0x0b	; 11
  c8:	94 60       	ori	r25, 0x04	; 4
  ca:	9b b9       	out	0x0b, r25	; 11
		
	//primeiro nibble de dados - 4 MSB
	#if (nibble_dados) //compila o código para os pinos de dados do LCD nos 4 MSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & c);
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	28 2f       	mov	r18, r24
  d2:	20 7f       	andi	r18, 0xF0	; 240
  d4:	92 2b       	or	r25, r18
  d6:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	45 e0       	ldi	r20, 0x05	; 5
  da:	4a 95       	dec	r20
  dc:	f1 f7       	brne	.-4      	; 0xda <cmd_LCD+0x20>
  de:	00 00       	nop
	#else              //compila o código para os pinos de dados do LCD nos 4 LSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0xF0) | (c >> 4);
	#endif
	
	pulso_enable();
  e0:	9b b1       	in	r25, 0x0b	; 11
  e2:	98 60       	ori	r25, 0x08	; 8
  e4:	9b b9       	out	0x0b, r25	; 11
  e6:	95 e0       	ldi	r25, 0x05	; 5
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <cmd_LCD+0x2e>
  ec:	00 00       	nop
  ee:	9b b1       	in	r25, 0x0b	; 11
  f0:	97 7f       	andi	r25, 0xF7	; 247
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	40 ef       	ldi	r20, 0xF0	; 240
  f6:	4a 95       	dec	r20
  f8:	f1 f7       	brne	.-4      	; 0xf6 <cmd_LCD+0x3c>
	
	//segundo nibble de dados - 4 LSB
	#if (nibble_dados) //compila o código para os pinos de dados do LCD nos 4 MSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & (c << 4));
  fa:	9b b1       	in	r25, 0x0b	; 11
  fc:	40 e1       	ldi	r20, 0x10	; 16
  fe:	84 9f       	mul	r24, r20
 100:	90 01       	movw	r18, r0
 102:	11 24       	eor	r1, r1
 104:	9f 70       	andi	r25, 0x0F	; 15
 106:	29 2b       	or	r18, r25
 108:	2b b9       	out	0x0b, r18	; 11
 10a:	95 e0       	ldi	r25, 0x05	; 5
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <cmd_LCD+0x52>
 110:	00 00       	nop
	#else              //compila o código para os pinos de dados do LCD nos 4 LSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0xF0) | (0x0F & c);
	#endif
	
	pulso_enable();
 112:	9b b1       	in	r25, 0x0b	; 11
 114:	98 60       	ori	r25, 0x08	; 8
 116:	9b b9       	out	0x0b, r25	; 11
 118:	45 e0       	ldi	r20, 0x05	; 5
 11a:	4a 95       	dec	r20
 11c:	f1 f7       	brne	.-4      	; 0x11a <cmd_LCD+0x60>
 11e:	00 00       	nop
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	97 7f       	andi	r25, 0xF7	; 247
 124:	9b b9       	out	0x0b, r25	; 11
 126:	90 ef       	ldi	r25, 0xF0	; 240
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <cmd_LCD+0x6e>
	
	if((cd == 0) && (c < 4)) //se for instrução de retorno ou limpeza espera LCD estar pronto
 12c:	61 11       	cpse	r22, r1
 12e:	08 c0       	rjmp	.+16     	; 0x140 <cmd_LCD+0x86>
 130:	84 30       	cpi	r24, 0x04	; 4
 132:	30 f4       	brcc	.+12     	; 0x140 <cmd_LCD+0x86>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	8f e3       	ldi	r24, 0x3F	; 63
 136:	9f e1       	ldi	r25, 0x1F	; 31
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <cmd_LCD+0x7e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <cmd_LCD+0x84>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <inic_LCD_4bits>:
//Sub-rotina para inicialização do LCD com via de dados de 4 bits
//-----------------------------------------------------------------------------------
void inic_LCD_4bits()//sequência ditada pelo fabricando do circuito integrado HD44780
{                    //o LCD será só escrito. Então, R/W é sempre zero.
	
	clr_bit(CONTR_LCD, RS); //RS em zero indicando que o dado para o LCD será uma instrução
 142:	8b b1       	in	r24, 0x0b	; 11
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	8b b9       	out	0x0b, r24	; 11
	clr_bit(CONTR_LCD, E); //pino de habilitação em zero
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <inic_LCD_4bits+0x12>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <inic_LCD_4bits+0x1c>
 15e:	00 00       	nop
	
	_delay_ms(20); /* tempo para estabilizar a tensão do LCD, após VCC
	                  ultrapassar 4.5 V (na prática pode ser maior). */
	//interface de 8 bits
	#if (nibble_dados)
	    DADOS_LCD = (DADOS_LCD & 0x0F) | 0x30;
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	80 63       	ori	r24, 0x30	; 48
 166:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	25 e0       	ldi	r18, 0x05	; 5
 16a:	2a 95       	dec	r18
 16c:	f1 f7       	brne	.-4      	; 0x16a <inic_LCD_4bits+0x28>
 16e:	00 00       	nop
	#else
	    DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;
	#endif
	
	pulso_enable(); //habilitação respeitando os tempos de resposta do LCD
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	88 60       	ori	r24, 0x08	; 8
 174:	8b b9       	out	0x0b, r24	; 11
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <inic_LCD_4bits+0x36>
 17c:	00 00       	nop
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	8b b9       	out	0x0b, r24	; 11
 184:	90 ef       	ldi	r25, 0xF0	; 240
 186:	9a 95       	dec	r25
 188:	f1 f7       	brne	.-4      	; 0x186 <inic_LCD_4bits+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	8f e1       	ldi	r24, 0x1F	; 31
 18c:	9e e4       	ldi	r25, 0x4E	; 78
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <inic_LCD_4bits+0x4c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <inic_LCD_4bits+0x52>
 194:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	95 e0       	ldi	r25, 0x05	; 5
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <inic_LCD_4bits+0x56>
 19c:	00 00       	nop
	_delay_ms(5);
	pulso_enable();
 19e:	8b b1       	in	r24, 0x0b	; 11
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	25 e0       	ldi	r18, 0x05	; 5
 1a6:	2a 95       	dec	r18
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <inic_LCD_4bits+0x64>
 1aa:	00 00       	nop
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	80 ef       	ldi	r24, 0xF0	; 240
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <inic_LCD_4bits+0x72>
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <inic_LCD_4bits+0x7a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <inic_LCD_4bits+0x80>
 1c2:	00 00       	nop
 1c4:	95 e0       	ldi	r25, 0x05	; 5
 1c6:	9a 95       	dec	r25
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <inic_LCD_4bits+0x84>
 1ca:	00 00       	nop
	_delay_us(200);
	pulso_enable(); //até aqui ainda é uma interface de 8 bits.
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	25 e0       	ldi	r18, 0x05	; 5
 1d4:	2a 95       	dec	r18
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <inic_LCD_4bits+0x92>
 1d8:	00 00       	nop
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	87 7f       	andi	r24, 0xF7	; 247
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	80 ef       	ldi	r24, 0xF0	; 240
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <inic_LCD_4bits+0xa0>
	
	//interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
	#if (nibble_dados)
	    DADOS_LCD = (DADOS_LCD & 0x0F) | 0x20;
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	8f 70       	andi	r24, 0x0F	; 15
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	8b b9       	out	0x0b, r24	; 11
 1ee:	95 e0       	ldi	r25, 0x05	; 5
 1f0:	9a 95       	dec	r25
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <inic_LCD_4bits+0xae>
 1f4:	00 00       	nop
	#else
	    DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;
	#endif
	
	pulso_enable();
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	25 e0       	ldi	r18, 0x05	; 5
 1fe:	2a 95       	dec	r18
 200:	f1 f7       	brne	.-4      	; 0x1fe <inic_LCD_4bits+0xbc>
 202:	00 00       	nop
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	80 ef       	ldi	r24, 0xF0	; 240
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <inic_LCD_4bits+0xca>
	cmd_LCD(0x28, 0);  //interface de 4 bits 2 linhas (aqui se habilita as 2 linhas)
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
	                  //são enviados os 2 nibbles (0x2 e 0x8)
	cmd_LCD(0x08, 0); //desliga o display
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	88 e0       	ldi	r24, 0x08	; 8
 21c:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
	cmd_LCD(0x01, 0); //limpa todo o display
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
	cmd_LCD(0x0C, 0); //mensagem aparente cursor inativo não piscando
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	8c e0       	ldi	r24, 0x0C	; 12
 22c:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
	cmd_LCD(0x80, 0); //inicializa cursor na primeira posição a esquerda - 1a linha
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
 238:	08 95       	ret

0000023a <escreve_LCD>:
}
//------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD - dados armazenados na RAM
//------------------------------------------------------------------------------------
void escreve_LCD(char *c)
{
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
	for (; *c != 0; c++) cmd_LCD(*c, 1);
 240:	04 c0       	rjmp	.+8      	; 0x24a <escreve_LCD+0x10>
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	88 81       	ld	r24, Y
 24c:	81 11       	cpse	r24, r1
 24e:	f9 cf       	rjmp	.-14     	; 0x242 <escreve_LCD+0x8>
}
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <escreve_LCD_Flash>:
//------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD - dados armazenados na FLASH
//------------------------------------------------------------------------------------
void escreve_LCD_Flash(const char *c)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
	for (; pgm_read_byte(&(*c)) != 0; c++) cmd_LCD(pgm_read_byte(&(*c)), 1);
 25c:	06 c0       	rjmp	.+12     	; 0x26a <escreve_LCD_Flash+0x14>
 25e:	fe 01       	movw	r30, r28
 260:	84 91       	lpm	r24, Z
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	fe 01       	movw	r30, r28
 26c:	84 91       	lpm	r24, Z
 26e:	81 11       	cpse	r24, r1
 270:	f6 cf       	rjmp	.-20     	; 0x25e <escreve_LCD_Flash+0x8>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <ident_num>:
//------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais  função auxiliar
//-----------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{
 278:	ac 01       	movw	r20, r24
 27a:	fb 01       	movw	r30, r22
	unsigned char n;
	
	for(n = 0; n < tam_vetor; n++)
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	06 c0       	rjmp	.+12     	; 0x28c <ident_num+0x14>
	    disp[n] = 0 + conv_ascii; //limpa vetor para armazenagem dos digitos
 280:	df 01       	movw	r26, r30
 282:	a8 0f       	add	r26, r24
 284:	b1 1d       	adc	r27, r1
 286:	90 e3       	ldi	r25, 0x30	; 48
 288:	9c 93       	st	X, r25
//-----------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{
	unsigned char n;
	
	for(n = 0; n < tam_vetor; n++)
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 28c:	85 30       	cpi	r24, 0x05	; 5
 28e:	c0 f3       	brcs	.-16     	; 0x280 <ident_num+0x8>
	    disp[n] = 0 + conv_ascii; //limpa vetor para armazenagem dos digitos
	do
	{
		*disp = (valor % 10) + conv_ascii; //pega o resto da divisão por 10
 290:	9a 01       	movw	r18, r20
 292:	ad ec       	ldi	r26, 0xCD	; 205
 294:	bc ec       	ldi	r27, 0xCC	; 204
 296:	0e 94 24 02 	call	0x448	; 0x448 <__umulhisi3>
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	96 95       	lsr	r25
 2a0:	87 95       	ror	r24
 2a2:	96 95       	lsr	r25
 2a4:	87 95       	ror	r24
 2a6:	9c 01       	movw	r18, r24
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	82 0f       	add	r24, r18
 2ba:	93 1f       	adc	r25, r19
 2bc:	9a 01       	movw	r18, r20
 2be:	28 1b       	sub	r18, r24
 2c0:	39 0b       	sbc	r19, r25
 2c2:	c9 01       	movw	r24, r18
 2c4:	80 5d       	subi	r24, 0xD0	; 208
 2c6:	81 93       	st	Z+, r24
		valor /= 10;                       //pega o inteiro da divisão por 10
 2c8:	9a 01       	movw	r18, r20
 2ca:	0e 94 24 02 	call	0x448	; 0x448 <__umulhisi3>
 2ce:	ac 01       	movw	r20, r24
 2d0:	56 95       	lsr	r21
 2d2:	47 95       	ror	r20
 2d4:	56 95       	lsr	r21
 2d6:	47 95       	ror	r20
 2d8:	56 95       	lsr	r21
 2da:	47 95       	ror	r20
		disp++;
	}
	while(valor != 0);
 2dc:	41 15       	cp	r20, r1
 2de:	51 05       	cpc	r21, r1
 2e0:	b9 f6       	brne	.-82     	; 0x290 <ident_num+0x18>
}
 2e2:	08 95       	ret

000002e4 <__vector_10>:
const char mensagem1[] PROGMEM = "Distanc = cm\0";
//prog_char mensagem2[] = "xxx\0";
const char mensagem2[] PROGMEM = "xxx\0";
//------------------------------------------------------------------------------------
ISR(TIMER1_CAPT_vect) //interrupção por captura do valor do TCNT1
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	cpl_bit(TCCR1B, ICES1);     //troca a borda de captura do sinal
 304:	e1 e8       	ldi	r30, 0x81	; 129
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	90 81       	ld	r25, Z
 30a:	80 e4       	ldi	r24, 0x40	; 64
 30c:	89 27       	eor	r24, r25
 30e:	80 83       	st	Z, r24
	
	if(!tst_bit(TCCR1B, ICES1)) //lê o valor de contagem do TC1 na borda de subida do sinal
 310:	80 81       	ld	r24, Z
 312:	86 fd       	sbrc	r24, 6
 314:	09 c0       	rjmp	.+18     	; 0x328 <__vector_10+0x44>
	    Inicio_Sinal = ICR1;    //salva a primeira contagem para determinar a largura do pulso
 316:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 31a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 31e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <Inicio_Sinal+0x1>
 322:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Inicio_Sinal>
 326:	18 c0       	rjmp	.+48     	; 0x358 <__vector_10+0x74>
	else                        //lê o valor de contagem do TC1 na borda de descida do sinal
	    //Distancia = (ICR1 - Inicio_Sinal) / 58; /*agora ICR1 tem o valor do TC1 na borda de
	    //                                          descida do sinal, então calcula a distância */	
	    Distancia = (8 * (ICR1 - Inicio_Sinal) / (F_CPU / 1000000)) / 58; //calculo da distância levando em conta o prescaller e a frequência do cristal em MHz
 328:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 32c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 330:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <Inicio_Sinal>
 334:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <Inicio_Sinal+0x1>
 338:	82 1b       	sub	r24, r18
 33a:	93 0b       	sbc	r25, r19
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	60 ea       	ldi	r22, 0xA0	; 160
 34a:	73 e0       	ldi	r23, 0x03	; 3
 34c:	0e 94 10 02 	call	0x420	; 0x420 <__udivmodhi4>
 350:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 354:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <main>:
//------------------------------------------------------------------------------------
int main()
{
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	00 d0       	rcall	.+0      	; 0x37e <main+0x6>
 37e:	00 d0       	rcall	.+0      	; 0x380 <main+0x8>
 380:	1f 92       	push	r1
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
	unsigned char digitos[tam_vetor]; //declaração da variável para armazenagem dos digitos
	DDRD = 0xFF;
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00000010; //somente pino de disparo como saída (PB1), captura no PB0 (ICP1)
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11111101;
 38e:	8d ef       	ldi	r24, 0xFD	; 253
 390:	85 b9       	out	0x05, r24	; 5
	TCCR1B = (1 << ICES1) | (1 << CS11); //TC1 com prescaler = 8, captura na borda de subida
 392:	82 e4       	ldi	r24, 0x42	; 66
 394:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = 1 << ICIE1;                 //habilita a interrupção por captura
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	sei();                               //habilita a chave de interrupções globais
 39e:	78 94       	sei
	
	inic_LCD_4bits();
 3a0:	0e 94 a1 00 	call	0x142	; 0x142 <inic_LCD_4bits>
	escreve_LCD_Flash(mensagem1);
 3a4:	8d e6       	ldi	r24, 0x6D	; 109
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 2b 01 	call	0x256	; 0x256 <escreve_LCD_Flash>
	
	while(1)
	{
		//pulso de disparo
		set_bit(PORTB, DISPARO);
 3ac:	85 b1       	in	r24, 0x05	; 5
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	85 b9       	out	0x05, r24	; 5
 3b2:	25 e3       	ldi	r18, 0x35	; 53
 3b4:	2a 95       	dec	r18
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x3c>
 3b8:	00 00       	nop
		_delay_us(10);
		clr_bit(PORTB, DISPARO);
 3ba:	85 b1       	in	r24, 0x05	; 5
 3bc:	8d 7f       	andi	r24, 0xFD	; 253
 3be:	85 b9       	out	0x05, r24	; 5
		
		cmd_LCD(0x8A, 0);		
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	8a e8       	ldi	r24, 0x8A	; 138
 3c4:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
		if(Distancia < 431) //se o pulso for menor que 25 ms mostra o valor da distância
 3c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3cc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 3d0:	8f 3a       	cpi	r24, 0xAF	; 175
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	92 07       	cpc	r25, r18
 3d6:	b0 f4       	brcc	.+44     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			ident_num(Distancia, digitos);
 3d8:	be 01       	movw	r22, r28
 3da:	6f 5f       	subi	r22, 0xFF	; 255
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	0e 94 3c 01 	call	0x278	; 0x278 <ident_num>
			cmd_LCD(digitos[2], 1);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
			cmd_LCD(digitos[1], 1);
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
			cmd_LCD(digitos[0], 1);
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	0e 94 5d 00 	call	0xba	; 0xba <cmd_LCD>
			escreve_LCD("cm");
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 1d 01 	call	0x23a	; 0x23a <escreve_LCD>
 402:	04 c0       	rjmp	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		}
		else                //senão escreve xxx no valor
		    escreve_LCD_Flash(mensagem2);
 404:	88 e6       	ldi	r24, 0x68	; 104
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 2b 01 	call	0x256	; 0x256 <escreve_LCD_Flash>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	90 e7       	ldi	r25, 0x70	; 112
 410:	22 e0       	ldi	r18, 0x02	; 2
 412:	81 50       	subi	r24, 0x01	; 1
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	20 40       	sbci	r18, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	c6 cf       	rjmp	.-116    	; 0x3ac <main+0x34>

00000420 <__udivmodhi4>:
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	51 e1       	ldi	r21, 0x11	; 17
 426:	07 c0       	rjmp	.+14     	; 0x436 <__udivmodhi4_ep>

00000428 <__udivmodhi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	a6 17       	cp	r26, r22
 42e:	b7 07       	cpc	r27, r23
 430:	10 f0       	brcs	.+4      	; 0x436 <__udivmodhi4_ep>
 432:	a6 1b       	sub	r26, r22
 434:	b7 0b       	sbc	r27, r23

00000436 <__udivmodhi4_ep>:
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	5a 95       	dec	r21
 43c:	a9 f7       	brne	.-22     	; 0x428 <__udivmodhi4_loop>
 43e:	80 95       	com	r24
 440:	90 95       	com	r25
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	08 95       	ret

00000448 <__umulhisi3>:
 448:	a2 9f       	mul	r26, r18
 44a:	b0 01       	movw	r22, r0
 44c:	b3 9f       	mul	r27, r19
 44e:	c0 01       	movw	r24, r0
 450:	a3 9f       	mul	r26, r19
 452:	70 0d       	add	r23, r0
 454:	81 1d       	adc	r24, r1
 456:	11 24       	eor	r1, r1
 458:	91 1d       	adc	r25, r1
 45a:	b2 9f       	mul	r27, r18
 45c:	70 0d       	add	r23, r0
 45e:	81 1d       	adc	r24, r1
 460:	11 24       	eor	r1, r1
 462:	91 1d       	adc	r25, r1
 464:	08 95       	ret

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
