
teste_modo_pwm_rapido_pwm_periodo_v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075a  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  00001009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ee  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "timers.h"


int main(void) //função principal
{
	DDRD = 0xFF;  //configura todo o PORTD como saída
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; //coloca todo o PORTD em nível baixo
  84:	1b b8       	out	0x0b, r1	; 11
	
	Inicializa_TC0(TC0_modo_pwm_r_TOP_OCR0A, TC0_OC0A_toggle&TC0_OC0B_n_inv&TC0_CLK_1, TC0_INT_OFF);
  86:	4f ef       	ldi	r20, 0xFF	; 255
  88:	69 e6       	ldi	r22, 0x69	; 105
  8a:	87 e0       	ldi	r24, 0x07	; 7
  8c:	0e 94 4d 00 	call	0x9a	; 0x9a <Inicializa_TC0>
	OCR0A = 100; //controle do período do sinal pwm
  90:	84 e6       	ldi	r24, 0x64	; 100
  92:	87 bd       	out	0x27, r24	; 39
	OCR0B = 30;  //controle o duty cycle do sinal pwm
  94:	8e e1       	ldi	r24, 0x1E	; 30
  96:	88 bd       	out	0x28, r24	; 40
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x18>

0000009a <Inicializa_TC0>:
 * - _TC0_N:    seleciona o prescaler e configura as saídas de comparação
 * - _TC0_INT:  configura as interrupções
 */
void Inicializa_TC0(unsigned char _TC0_modo, unsigned char _TC0_OCAB_N, unsigned char _TC0_INT)
{
	TCCR0A = 0x00;
  9a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
  9c:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= 0xF7;
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	97 7f       	andi	r25, 0xF7	; 247
  a6:	90 83       	st	Z, r25
	
	switch(_TC0_modo)
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	71 f0       	breq	.+28     	; 0xc8 <Inicializa_TC0+0x2e>
  ac:	18 f4       	brcc	.+6      	; 0xb4 <Inicializa_TC0+0x1a>
  ae:	88 23       	and	r24, r24
  b0:	31 f0       	breq	.+12     	; 0xbe <Inicializa_TC0+0x24>
  b2:	31 c0       	rjmp	.+98     	; 0x116 <Inicializa_TC0+0x7c>
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	a1 f0       	breq	.+40     	; 0xe0 <Inicializa_TC0+0x46>
  b8:	87 30       	cpi	r24, 0x07	; 7
  ba:	e1 f0       	breq	.+56     	; 0xf4 <Inicializa_TC0+0x5a>
  bc:	2c c0       	rjmp	.+88     	; 0x116 <Inicializa_TC0+0x7c>
	{
		case 0:
		    TCCR0B |= (_TC0_OCAB_N & 0x07);
  be:	95 b5       	in	r25, 0x25	; 37
  c0:	67 70       	andi	r22, 0x07	; 7
  c2:	69 2b       	or	r22, r25
  c4:	65 bd       	out	0x25, r22	; 37
		    break;
  c6:	27 c0       	rjmp	.+78     	; 0x116 <Inicializa_TC0+0x7c>
		case 2:
		    TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
  c8:	94 b5       	in	r25, 0x24	; 36
  ca:	26 2f       	mov	r18, r22
  cc:	20 7f       	andi	r18, 0xF0	; 240
  ce:	83 70       	andi	r24, 0x03	; 3
  d0:	82 2b       	or	r24, r18
  d2:	89 2b       	or	r24, r25
  d4:	84 bd       	out	0x24, r24	; 36
			TCCR0B |= (_TC0_OCAB_N & 0x07);
  d6:	95 b5       	in	r25, 0x25	; 37
  d8:	67 70       	andi	r22, 0x07	; 7
  da:	69 2b       	or	r22, r25
  dc:	65 bd       	out	0x25, r22	; 37
			break;
  de:	1b c0       	rjmp	.+54     	; 0x116 <Inicializa_TC0+0x7c>
		case 3:
		    TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
  e0:	94 b5       	in	r25, 0x24	; 36
  e2:	26 2f       	mov	r18, r22
  e4:	20 7f       	andi	r18, 0xF0	; 240
  e6:	83 70       	andi	r24, 0x03	; 3
  e8:	82 2b       	or	r24, r18
  ea:	89 2b       	or	r24, r25
  ec:	84 bd       	out	0x24, r24	; 36
			TCCR0B = (_TC0_OCAB_N & 0x07);
  ee:	67 70       	andi	r22, 0x07	; 7
  f0:	65 bd       	out	0x25, r22	; 37
		    break;
  f2:	11 c0       	rjmp	.+34     	; 0x116 <Inicializa_TC0+0x7c>
		case 7:
		    TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
  f4:	24 b5       	in	r18, 0x24	; 36
  f6:	36 2f       	mov	r19, r22
  f8:	30 7f       	andi	r19, 0xF0	; 240
  fa:	98 2f       	mov	r25, r24
  fc:	93 70       	andi	r25, 0x03	; 3
  fe:	93 2b       	or	r25, r19
 100:	92 2b       	or	r25, r18
 102:	94 bd       	out	0x24, r25	; 36
			TCCR0B |= (((_TC0_modo << 1) & 0x08) | (_TC0_OCAB_N & 0x07));
 104:	25 b5       	in	r18, 0x25	; 37
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	88 70       	andi	r24, 0x08	; 8
 10e:	67 70       	andi	r22, 0x07	; 7
 110:	86 2b       	or	r24, r22
 112:	82 2b       	or	r24, r18
 114:	85 bd       	out	0x25, r24	; 37
		    break;
	}
	TIMSK0 |= ~(_TC0_INT);
 116:	ee e6       	ldi	r30, 0x6E	; 110
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	40 95       	com	r20
 11e:	48 2b       	or	r20, r24
 120:	40 83       	st	Z, r20
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
