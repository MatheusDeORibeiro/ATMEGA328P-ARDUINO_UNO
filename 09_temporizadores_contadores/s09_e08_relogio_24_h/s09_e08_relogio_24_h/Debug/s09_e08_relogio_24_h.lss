
s09_e08_relogio_24_h.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004e8  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  00000580  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001614  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a31  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bad  00000000  00000000  0000272d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000639  00000000  00000000  00003540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec7  00000000  00000000  00003b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 01 	call	0x332	; 0x332 <main>
  9e:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Status_BF>:
	clr_bit(PORT_CONT, _EN);
	_delay_us(45);                            //aguarda tempo de execução da isntrução
	clr_bit(PORT_CONT, _RS);
	clr_bit(PORT_CONT, _RW);
	return leitura;                           //retorna o dado lido
}
  a6:	2a 98       	cbi	0x05, 2	; 5
  a8:	29 9a       	sbi	0x05, 1	; 5
  aa:	00 00       	nop
  ac:	28 9a       	sbi	0x05, 0	; 5
  ae:	00 00       	nop
  b0:	89 b1       	in	r24, 0x09	; 9
  b2:	28 98       	cbi	0x05, 0	; 5
  b4:	00 00       	nop
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	00 00       	nop
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	29 98       	cbi	0x05, 1	; 5
  be:	87 ff       	sbrs	r24, 7
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Status_BF+0x20>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret

000000ca <Pulso_Enable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	00 c0       	rjmp	.+0      	; 0xcc <Pulso_Enable+0x2>

/* Esta função envia um pulso para o pino Enable */
void Pulso_Enable(void)
{
	_delay_us(2);
	set_bit(PORT_CONT, _EN);
  cc:	28 9a       	sbi	0x05, 0	; 5
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <Pulso_Enable+0x6>
	_delay_us(2);
	clr_bit(PORT_CONT, _EN);
  d0:	28 98       	cbi	0x05, 0	; 5
  d2:	08 95       	ret

000000d4 <Escreve_CMD>:

//implementação das funções

/* Esta função envia um comando para o barramento de dados do display */
void Escreve_CMD(unsigned char comando)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	//4 bits mais significativos
	#if (_slc_nibble) 
	    PORT_DADOS = ((PORT_DADOS & 0x0F) | (comando & 0xF0));        //msn
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	9c 2f       	mov	r25, r28
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	89 2b       	or	r24, r25
  e2:	8b b9       	out	0x0b, r24	; 11
	#else 
	    PORT_DADOS = ((PORT_DADOS & 0xF0) | ((comando >> 4) & 0x0F)); //lsn
	#endif
	Pulso_Enable();
  e4:	0e 94 65 00 	call	0xca	; 0xca <Pulso_Enable>
	//4 bits menos significativos
	#if (_slc_nibble)
	    PORT_DADOS = ((PORT_DADOS & 0x0F) | ((comando << 4) & 0xF0)); //msn
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	28 2f       	mov	r18, r24
  ec:	2f 70       	andi	r18, 0x0F	; 15
  ee:	30 e1       	ldi	r19, 0x10	; 16
  f0:	c3 9f       	mul	r28, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	82 2b       	or	r24, r18
  f8:	8b b9       	out	0x0b, r24	; 11
	#else 
	    PORT_DADOS = ((PORT_DADOS & 0xF0) | (comando & 0x0F));        //lsn
	#endif
	Pulso_Enable();
}
  fa:	cf 91       	pop	r28
	#if (_slc_nibble)
	    PORT_DADOS = ((PORT_DADOS & 0x0F) | ((comando << 4) & 0xF0)); //msn
	#else 
	    PORT_DADOS = ((PORT_DADOS & 0xF0) | (comando & 0x0F));        //lsn
	#endif
	Pulso_Enable();
  fc:	0c 94 65 00 	jmp	0xca	; 0xca <Pulso_Enable>

00000100 <Escreve_Instrucao>:

/* Esta escreve uma instrução para o display */
void Escreve_Instrucao(unsigned char instrucao)
{
    #if (_slc_nibble)
	    DIR_DADOS |= 0xF0; //configura o ms nibble do barramento de dados como saída
 100:	9a b1       	in	r25, 0x0a	; 10
 102:	90 6f       	ori	r25, 0xF0	; 240
 104:	9a b9       	out	0x0a, r25	; 10
    #else 
	    DIR_DADOS |= 0x0F; //configura o ls nibble do barramento de dados como saída
	#endif
	//seleciona operação
	clr_bit(PORT_CONT, _RS); //instrução
 106:	2a 98       	cbi	0x05, 2	; 5
	clr_bit(PORT_CONT, _RW); //escrita
 108:	29 98       	cbi	0x05, 1	; 5
	Escreve_CMD(instrucao);
 10a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Escreve_CMD>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <Escreve_Instrucao+0x10>
	_delay_us(45);           //aguarda o tempo de execução da instrução
	clr_bit(PORT_CONT, _RW);          
 114:	29 98       	cbi	0x05, 1	; 5
	#if (_slc_nibble)
	    DIR_DADOS &= 0x0F; //configura o ms nibble do barramento de dados como entrada
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	8a b9       	out	0x0a, r24	; 10
 11c:	08 95       	ret

0000011e <Escreve_Dado>:

/* Esta função escreve um dado no display */
void Escreve_Dado(unsigned char dado)
{
	#if (_slc_nibble)
	    DIR_DADOS |= 0xF0; //configura o ms nibble do barramento de dados como saída
 11e:	9a b1       	in	r25, 0x0a	; 10
 120:	90 6f       	ori	r25, 0xF0	; 240
 122:	9a b9       	out	0x0a, r25	; 10
	#else 
	    DIR_DADOS |= 0x0F; //configura o ls nibble do barramento de dados como saída
	#endif
	//seleciiona operação
	set_bit(PORT_CONT, _RS);   //dado
 124:	2a 9a       	sbi	0x05, 2	; 5
	clr_bit(PORT_CONT, _RW);   //escrita
 126:	29 98       	cbi	0x05, 1	; 5
	Escreve_CMD(dado);
 128:	0e 94 6a 00 	call	0xd4	; 0xd4 <Escreve_CMD>
	clr_bit(PORT_CONT, _RS);
 12c:	2a 98       	cbi	0x05, 2	; 5
 12e:	8f e0       	ldi	r24, 0x0F	; 15
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <Escreve_Dado+0x12>
	_delay_us(45);             //aguarda o tempo de execução da instrução
	#if (_slc_nibble)
	    DIR_DADOS &= 0x0F; //configura o ms nibble do barramento de dados como entrada
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	8a b9       	out	0x0a, r24	; 10
 13a:	08 95       	ret

0000013c <Inicializa_LCD>:
	clr_bit(PORT_CONT, _EN);
}

/* Esta função inicializa o display com a interface de 4 bits */
void Inicializa_LCD(unsigned char numero_linhas)
{
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <Inicializa_LCD+0xe>
 14a:	1f 92       	push	r1
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	08 2f       	mov	r16, r24
	unsigned char i;
	unsigned char ajuste[3] = {0x0F, 0x01, 0x06};
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	ab 83       	std	Y+3, r26	; 0x03
                  //display ON e cursor piscante, limpa display e deslocamento para a direita
	
	//configuração de hardware
	clr_bit(PORT_CONT, _RS);
 164:	2a 98       	cbi	0x05, 2	; 5
	clr_bit(PORT_CONT, _RW);
 166:	29 98       	cbi	0x05, 1	; 5
	clr_bit(PORT_CONT, _EN);	
 168:	28 98       	cbi	0x05, 0	; 5
	#if (_slc_nibble)
	    DIR_DADOS |= 0xF0; //configura o ms nibble do barramento de dados como saída
 16a:	8a b1       	in	r24, 0x0a	; 10
 16c:	80 6f       	ori	r24, 0xF0	; 240
 16e:	8a b9       	out	0x0a, r24	; 10
	#else 
	    DIR_DADOS |= 0x0F; //configura o ls nibble do barramento de dados como saída
	#endif
	DIR_CONT  |= 0x07;       //configura o barramento de controle como saída
 170:	84 b1       	in	r24, 0x04	; 4
 172:	87 60       	ori	r24, 0x07	; 7
 174:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	85 ea       	ldi	r24, 0xA5	; 165
 178:	9e e0       	ldi	r25, 0x0E	; 14
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <Inicializa_LCD+0x3e>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <Inicializa_LCD+0x44>
 180:	00 00       	nop
 182:	13 e0       	ldi	r17, 0x03	; 3
	
	//ajuste de função
	for(i = 0; i < 3; i++)
	{
		#if (_slc_nibble)
		PORT_DADOS = ((PORT_DADOS & 0x0F) | (0x30 & 0xF0));        //msn
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	80 63       	ori	r24, 0x30	; 48
 18a:	8b b9       	out	0x0b, r24	; 11
		#else
		PORT_DADOS = ((PORT_DADOS & 0xF0) | ((0x30 >> 4) & 0x0F)); //lsn
		#endif
		Pulso_Enable();
 18c:	0e 94 65 00 	call	0xca	; 0xca <Pulso_Enable>
 190:	e1 ee       	ldi	r30, 0xE1	; 225
 192:	f4 e0       	ldi	r31, 0x04	; 4
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <Inicializa_LCD+0x58>
 198:	00 c0       	rjmp	.+0      	; 0x19a <Inicializa_LCD+0x5e>
 19a:	00 00       	nop
 19c:	11 50       	subi	r17, 0x01	; 1
	DIR_CONT  |= 0x07;       //configura o barramento de controle como saída
	
	_delay_ms(15);           //aguarda 15ms após Vcc atingir no mínimo 4,5V
	
	//ajuste de função
	for(i = 0; i < 3; i++)
 19e:	91 f7       	brne	.-28     	; 0x184 <Inicializa_LCD+0x48>
		_delay_ms(5);
	}
	
	//ajuste de função
	#if (_slc_nibble)
	PORT_DADOS = ((PORT_DADOS & 0x0F) | (0x20 & 0xF0));        //msn
 1a0:	8b b1       	in	r24, 0x0b	; 11
 1a2:	8f 70       	andi	r24, 0x0F	; 15
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	8b b9       	out	0x0b, r24	; 11
	#else
	PORT_DADOS = ((PORT_DADOS & 0xF0) | ((0x20 >> 4) & 0x0F)); //lsn
	#endif
	Pulso_Enable();
 1a8:	0e 94 65 00 	call	0xca	; 0xca <Pulso_Enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	fd e0       	ldi	r31, 0x0D	; 13
 1ae:	fa 95       	dec	r31
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <Inicializa_LCD+0x72>
 1b2:	00 00       	nop
	_delay_us(40);
	
	//ajuste de função - 4bits e 5x8 pontos
	if(numero_linhas) 
 1b4:	00 23       	and	r16, r16
 1b6:	11 f0       	breq	.+4      	; 0x1bc <Inicializa_LCD+0x80>
	{
		Escreve_CMD(0x28);
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <Inicializa_LCD+0x82>
	}
	else
	{
		Escreve_CMD(0x20);
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	0e 94 6a 00 	call	0xd4	; 0xd4 <Escreve_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	81 ee       	ldi	r24, 0xE1	; 225
 1c4:	94 e0       	ldi	r25, 0x04	; 4
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <Inicializa_LCD+0x8a>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <Inicializa_LCD+0x90>
 1cc:	00 00       	nop
 1ce:	8e 01       	movw	r16, r28
 1d0:	0f 5f       	subi	r16, 0xFF	; 255
 1d2:	1f 4f       	sbci	r17, 0xFF	; 255
 1d4:	7e 01       	movw	r14, r28
 1d6:	94 e0       	ldi	r25, 0x04	; 4
 1d8:	e9 0e       	add	r14, r25
 1da:	f1 1c       	adc	r15, r1
	_delay_ms(5);
	
	//configurações do vetor ajustes
	for(i = 0; i < 3; i++)
	{
		Escreve_CMD(ajuste[i]);
 1dc:	f8 01       	movw	r30, r16
 1de:	81 91       	ld	r24, Z+
 1e0:	8f 01       	movw	r16, r30
 1e2:	0e 94 6a 00 	call	0xd4	; 0xd4 <Escreve_CMD>
		clr_bit(PORT_CONT, _EN);
 1e6:	28 98       	cbi	0x05, 0	; 5
 1e8:	83 ef       	ldi	r24, 0xF3	; 243
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Inicializa_LCD+0xb0>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <Inicializa_LCD+0xb6>
 1f2:	00 00       	nop
		Escreve_CMD(0x20);
	}
	_delay_ms(5);
	
	//configurações do vetor ajustes
	for(i = 0; i < 3; i++)
 1f4:	0e 15       	cp	r16, r14
 1f6:	1f 05       	cpc	r17, r15
 1f8:	89 f7       	brne	.-30     	; 0x1dc <Inicializa_LCD+0xa0>
		clr_bit(PORT_CONT, _EN);
		_delay_ms(2);
	}
	
	#if (_slc_nibble) 
	    DIR_DADOS &= 0x0F; //configura o ms nibble do barramento de dados como entrada
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	8a b9       	out	0x0a, r24	; 10
	#else 
	    DIR_DADOS &= 0xF0; //configura o ls nibble do barramento de dados como entrada
    #endif
}
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <Limpa_Display>:

/* Esta função limpa a tela do display */
void Limpa_Display(void)
{
	Escreve_Instrucao(0x01);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 80 00 	call	0x100	; 0x100 <Escreve_Instrucao>
	//_delay_ms(2);
	while(Status_BF());
 21a:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 21e:	81 11       	cpse	r24, r1
 220:	fc cf       	rjmp	.-8      	; 0x21a <Limpa_Display+0x6>
}
 222:	08 95       	ret

00000224 <Cursor_Home>:

/* Esta função posiciona o cursor na primeira coluna da primeira linha */
void Cursor_Home(void)
{
	Escreve_Instrucao(0x02);
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 80 00 	call	0x100	; 0x100 <Escreve_Instrucao>
 22a:	83 ef       	ldi	r24, 0xF3	; 243
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <Cursor_Home+0xa>
 232:	00 c0       	rjmp	.+0      	; 0x234 <Cursor_Home+0x10>
 234:	00 00       	nop
 236:	08 95       	ret

00000238 <Desloca_Mensagem>:
}

/* Esta função desloca o display/cursor */
void Desloca_Mensagem(unsigned char deslocamento)
{
	Escreve_Instrucao(deslocamento);
 238:	0e 94 80 00 	call	0x100	; 0x100 <Escreve_Instrucao>
	while(Status_BF());
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 240:	81 11       	cpse	r24, r1
 242:	fc cf       	rjmp	.-8      	; 0x23c <Desloca_Mensagem+0x4>
}
 244:	08 95       	ret

00000246 <Display_Cursor_ON_OFF>:
 246:	0c 94 1c 01 	jmp	0x238	; 0x238 <Desloca_Mensagem>

0000024a <Posiciona_Cursor>:

/* Esta função posiciona o cursor em uma determinda coluna de determinada linha */
void Posiciona_Cursor(unsigned char linha, unsigned coluna)
{
	switch(linha)
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	19 f0       	breq	.+6      	; 0x254 <Posiciona_Cursor+0xa>
 24e:	82 30       	cpi	r24, 0x02	; 2
 250:	29 f0       	breq	.+10     	; 0x25c <Posiciona_Cursor+0x12>
 252:	08 95       	ret
	{
		case 1:                                     //posiciona na primeira linha
		    Escreve_Instrucao(0x80 | (coluna - 1));
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	86 0f       	add	r24, r22
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	03 c0       	rjmp	.+6      	; 0x262 <Posiciona_Cursor+0x18>
			break;
		case 2:			                            //posiciona na segunda linha
			Escreve_Instrucao(0xC0 | (coluna - 1));
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	86 0f       	add	r24, r22
 260:	80 6c       	ori	r24, 0xC0	; 192
 262:	0c 94 80 00 	jmp	0x100	; 0x100 <Escreve_Instrucao>

00000266 <relogio_24h>:
	}
}

//implementando função para exibir o relógio
void relogio_24h(void)
{
 266:	cf 93       	push	r28
	//declaração de variável auxiliar
	unsigned char aux;

	Limpa_Display();        //limpa a tela do display
 268:	0e 94 0a 01 	call	0x214	; 0x214 <Limpa_Display>
	Posiciona_Cursor(1, 5); //posiciona o cursor na quinta coluna da primeira linha
 26c:	65 e0       	ldi	r22, 0x05	; 5
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 25 01 	call	0x24a	; 0x24a <Posiciona_Cursor>
	if(horas < 10)          //para exibir as horas
 276:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 27a:	8a 30       	cpi	r24, 0x0A	; 10
 27c:	38 f4       	brcc	.+14     	; 0x28c <relogio_24h+0x26>
	{
		Escreve_Dado('0');
 27e:	80 e3       	ldi	r24, 0x30	; 48
 280:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
		Escreve_Dado((horas + _valor_decod));
 284:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 288:	80 5d       	subi	r24, 0xD0	; 208
 28a:	10 c0       	rjmp	.+32     	; 0x2ac <relogio_24h+0x46>
	}
	else
	{
		aux = (horas / 10) + _valor_decod;
 28c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		Escreve_Dado(aux);
 290:	ca e0       	ldi	r28, 0x0A	; 10
 292:	6c 2f       	mov	r22, r28
 294:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodqi4>
 298:	80 5d       	subi	r24, 0xD0	; 208
 29a:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
		aux = (horas % 10) + _valor_decod;
 29e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		Escreve_Dado(aux);
 2a2:	6c 2f       	mov	r22, r28
 2a4:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodqi4>
 2a8:	80 e3       	ldi	r24, 0x30	; 48
 2aa:	89 0f       	add	r24, r25
 2ac:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
	}
	Escreve_Dado(':');
 2b0:	8a e3       	ldi	r24, 0x3A	; 58
 2b2:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
	if(minutos < 10)        //para exibir os minutos
 2b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
 2ba:	8a 30       	cpi	r24, 0x0A	; 10
 2bc:	38 f4       	brcc	.+14     	; 0x2cc <relogio_24h+0x66>
	{
		Escreve_Dado('0');
 2be:	80 e3       	ldi	r24, 0x30	; 48
 2c0:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
		Escreve_Dado((minutos + _valor_decod));
 2c4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
 2c8:	80 5d       	subi	r24, 0xD0	; 208
 2ca:	10 c0       	rjmp	.+32     	; 0x2ec <relogio_24h+0x86>
	}
	else
	{
		aux = (minutos / 10) + _valor_decod;
 2cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
		Escreve_Dado(aux);
 2d0:	ca e0       	ldi	r28, 0x0A	; 10
 2d2:	6c 2f       	mov	r22, r28
 2d4:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodqi4>
 2d8:	80 5d       	subi	r24, 0xD0	; 208
 2da:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
		aux = (minutos % 10) + _valor_decod;
 2de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
		Escreve_Dado(aux);
 2e2:	6c 2f       	mov	r22, r28
 2e4:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodqi4>
 2e8:	80 e3       	ldi	r24, 0x30	; 48
 2ea:	89 0f       	add	r24, r25
 2ec:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
	}
	Escreve_Dado(':');
 2f0:	8a e3       	ldi	r24, 0x3A	; 58
 2f2:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
	if(segundos < 10)       //para exibir os segundos
 2f6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segundos>
 2fa:	8a 30       	cpi	r24, 0x0A	; 10
 2fc:	38 f4       	brcc	.+14     	; 0x30c <relogio_24h+0xa6>
	{
		Escreve_Dado('0');
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
		Escreve_Dado((segundos + _valor_decod));
 304:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segundos>
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	10 c0       	rjmp	.+32     	; 0x32c <relogio_24h+0xc6>
	}
	else
	{
		aux = (segundos / 10) + _valor_decod;
 30c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segundos>
		Escreve_Dado(aux);
 310:	ca e0       	ldi	r28, 0x0A	; 10
 312:	6c 2f       	mov	r22, r28
 314:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodqi4>
 318:	80 5d       	subi	r24, 0xD0	; 208
 31a:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Dado>
		aux = (segundos % 10) + _valor_decod;
 31e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segundos>
		Escreve_Dado(aux);
 322:	6c 2f       	mov	r22, r28
 324:	0e 94 66 02 	call	0x4cc	; 0x4cc <__udivmodqi4>
 328:	80 e3       	ldi	r24, 0x30	; 48
 32a:	89 0f       	add	r24, r25
	}
}
 32c:	cf 91       	pop	r28
	else
	{
		aux = (segundos / 10) + _valor_decod;
		Escreve_Dado(aux);
		aux = (segundos % 10) + _valor_decod;
		Escreve_Dado(aux);
 32e:	0c 94 8f 00 	jmp	0x11e	; 0x11e <Escreve_Dado>

00000332 <main>:
ISR(TIMER2_OVF_vect);


int main(void) //função principal
{
	DDRD = 0xFF;  //configura todo o PORTD como saída
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xC7;  //configura os pinos PC5:3 como entrada e os pinos restantes como saída
 336:	97 ec       	ldi	r25, 0xC7	; 199
 338:	97 b9       	out	0x07, r25	; 7
	DDRB = 0xFF;  //configura todo o PORTB como saída
 33a:	84 b9       	out	0x04, r24	; 4
	PORTD = 0x00; //coloca todo o PORTD em nível baixo
 33c:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0x38; //habilita os resistores de pull-up dos pinos PC5:3 e coloca os pinos restantes em nível baixo
 33e:	88 e3       	ldi	r24, 0x38	; 56
 340:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x00; //coloca todo o PORTB em nível baixo
 342:	15 b8       	out	0x05, r1	; 5

	Inicializa_LCD(LCD_1_N); //inicializa o dispay LCD com uma linha
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	0e 94 9e 00 	call	0x13c	; 0x13c <Inicializa_LCD>
	Display_Cursor_ON_OFF(LCD_DSP_ON_CS_OFF); //mantém a tela do display ligada e o cursor desligado
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 23 01 	call	0x246	; 0x246 <Display_Cursor_ON_OFF>
	Limpa_Display(); //limpa a tela do display
 350:	0e 94 0a 01 	call	0x214	; 0x214 <Limpa_Display>
	Cursor_Home();   //posiciona o cursor na primeira coluna da primeira linha
 354:	0e 94 12 01 	call	0x224	; 0x224 <Cursor_Home>
	
	Inicializa_TC2(TC2_modo_assincrono, TC2_CLK_128, TC2_TOIE2);
 358:	40 e1       	ldi	r20, 0x10	; 16
 35a:	6d ef       	ldi	r22, 0xFD	; 253
 35c:	88 e0       	ldi	r24, 0x08	; 8
 35e:	0e 94 2b 02 	call	0x456	; 0x456 <Inicializa_TC2>
	/* modo assíncrono, f_osc igual a 32768Hz, prescaler igual a 128 */
	/* t_estouro = 1s */

	sei(); //habilita todas as fontes de interrupção
 362:	78 94       	sei
	
	while(1) //loop infinito
	{
		relogio_24h();                      //exibe o relógio
 364:	0e 94 33 01 	call	0x266	; 0x266 <relogio_24h>
		if(!tst_bit(PINC, AJUSTE))          //botão de ajuste pressionado?
 368:	33 99       	sbic	0x06, 3	; 6
 36a:	19 c0       	rjmp	.+50     	; 0x39e <main+0x6c>
 36c:	83 ec       	ldi	r24, 0xC3	; 195
 36e:	99 e0       	ldi	r25, 0x09	; 9
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <main+0x3e>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x44>
 376:	00 00       	nop
		{
			_delay_ms(10);                  //elimina ruído
			cli();                          //desabilita todas as fontes de interrupções
 378:	f8 94       	cli
 37a:	11 c0       	rjmp	.+34     	; 0x39e <main+0x6c>
		}
		while(!tst_bit(PINC, AJUSTE))       //se o botão for mantido pressionado
		{
			if(!tst_bit(PINC, HORA))        //botão de ajuste da hora pressionado?
 37c:	34 9b       	sbis	0x06, 4	; 6
 37e:	12 c0       	rjmp	.+36     	; 0x3a4 <main+0x72>
				while(tst_bit(PINC, HORA)); //aguarda o botão ser solto
				_delay_ms(10);              //elimina ruído
				horas++;
				if(horas == 25) horas = 0;
			}
			if(!tst_bit(PINC, MIN))         //botão de ajuste de minuto pressionado?
 380:	35 9b       	sbis	0x06, 5	; 6
 382:	24 c0       	rjmp	.+72     	; 0x3cc <main+0x9a>
				while(tst_bit(PINC, MIN));  //aguarda o botão ser solto
				_delay_ms(10);              //elimina ruído
				minutos++;                  //incrementa minutos
				if(minutos == 60) minutos = 0;
			}
			relogio_24h();                  //exibe o relógio
 384:	0e 94 33 01 	call	0x266	; 0x266 <relogio_24h>
			if(tst_bit(PINC, AJUSTE))           //botão de ajuste solto?
 388:	33 9b       	sbis	0x06, 3	; 6
 38a:	09 c0       	rjmp	.+18     	; 0x39e <main+0x6c>
 38c:	83 ec       	ldi	r24, 0xC3	; 195
 38e:	99 e0       	ldi	r25, 0x09	; 9
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x5e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x64>
 396:	00 00       	nop
		    {
			    _delay_ms(10);                  //habilita todoas as fontes de interrupção
			    sei();
 398:	78 94       	sei
				segundos = 0;
 39a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <segundos>
		if(!tst_bit(PINC, AJUSTE))          //botão de ajuste pressionado?
		{
			_delay_ms(10);                  //elimina ruído
			cli();                          //desabilita todas as fontes de interrupções
		}
		while(!tst_bit(PINC, AJUSTE))       //se o botão for mantido pressionado
 39e:	33 9b       	sbis	0x06, 3	; 6
 3a0:	ed cf       	rjmp	.-38     	; 0x37c <main+0x4a>
 3a2:	e0 cf       	rjmp	.-64     	; 0x364 <main+0x32>
		{
			if(!tst_bit(PINC, HORA))        //botão de ajuste da hora pressionado?
			{
				while(tst_bit(PINC, HORA)); //aguarda o botão ser solto
 3a4:	34 99       	sbic	0x06, 4	; 6
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <main+0x72>
 3a8:	83 ec       	ldi	r24, 0xC3	; 195
 3aa:	99 e0       	ldi	r25, 0x09	; 9
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x7a>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x80>
 3b2:	00 00       	nop
				_delay_ms(10);              //elimina ruído
				horas++;
 3b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
				if(horas == 25) horas = 0;
 3be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3c2:	89 31       	cpi	r24, 0x19	; 25
 3c4:	e9 f6       	brne	.-70     	; 0x380 <main+0x4e>
 3c6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 3ca:	da cf       	rjmp	.-76     	; 0x380 <main+0x4e>
			}
			if(!tst_bit(PINC, MIN))         //botão de ajuste de minuto pressionado?
			{
				while(tst_bit(PINC, MIN));  //aguarda o botão ser solto
 3cc:	35 99       	sbic	0x06, 5	; 6
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <main+0x9a>
 3d0:	83 ec       	ldi	r24, 0xC3	; 195
 3d2:	99 e0       	ldi	r25, 0x09	; 9
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0xa2>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0xa8>
 3da:	00 00       	nop
				_delay_ms(10);              //elimina ruído
				minutos++;                  //incrementa minutos
 3dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <minutos>
				if(minutos == 60) minutos = 0;
 3e6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
 3ea:	8c 33       	cpi	r24, 0x3C	; 60
 3ec:	59 f6       	brne	.-106    	; 0x384 <main+0x52>
 3ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <minutos>
 3f2:	c8 cf       	rjmp	.-112    	; 0x384 <main+0x52>

000003f4 <__vector_9>:
	}
}

//impementação da função de tratamento de interrupção
ISR(TIMER2_OVF_vect)
{
 3f4:	1f 92       	push	r1
 3f6:	0f 92       	push	r0
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	8f 93       	push	r24
	segundos++;             //incrementa os segundos
 400:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segundos>
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <segundos>
	if(segundos == 60)      //se passou um minuto?
 40a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <segundos>
 40e:	8c 33       	cpi	r24, 0x3C	; 60
 410:	e1 f4       	brne	.+56     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	{
		segundos = 0;
 412:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <segundos>
		minutos++;          //incrementa minutos
 416:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <minutos>
		if(minutos == 60)   //se passou uma hora?
 420:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <minutos>
 424:	8c 33       	cpi	r24, 0x3C	; 60
 426:	89 f4       	brne	.+34     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			minutos = 0;
 428:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <minutos>
			horas++;        //incrementa horas
 42c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			if(horas == 24) //se passou um dia?
 436:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 43a:	88 31       	cpi	r24, 0x18	; 24
 43c:	31 f4       	brne	.+12     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			{
				segundos = 0;
 43e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <segundos>
				minutos = 0;
 442:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <minutos>
				horas = 0;
 446:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			}
		}
	}
}
 44a:	8f 91       	pop	r24
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <Inicializa_TC2>:
 * - _TC2_N:    seleciona o prescaler e configura as saídas de comparação
 * - _TC2_INT:  configura as interrupções
 */
void Inicializa_TC2(unsigned char _TC2_modo, unsigned char _TC2_OCAB_N, unsigned char _TC2_INT)
{
	TCCR2A = 0x00;
 456:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0x00;
 45a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	ASSR = 0x00;
 45e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
	TIMSK2 &= 0xF7;
 462:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 466:	97 7f       	andi	r25, 0xF7	; 247
 468:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 46c:	96 2f       	mov	r25, r22
 46e:	97 70       	andi	r25, 0x07	; 7
	if(_TC2_modo == 0) TCCR2B |= (_TC2_OCAB_N & 0x07);
 470:	88 23       	and	r24, r24
 472:	01 f1       	breq	.+64     	; 0x4b4 <Inicializa_TC2+0x5e>
 474:	60 7f       	andi	r22, 0xF0	; 240
	else if(_TC2_modo < 5)
 476:	85 30       	cpi	r24, 0x05	; 5
 478:	40 f4       	brcc	.+16     	; 0x48a <Inicializa_TC2+0x34>
	{		
		TCCR2A |= ((_TC2_OCAB_N & 0xF0) | (_TC2_modo & 0x03));
 47a:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 47e:	62 2b       	or	r22, r18
 480:	83 70       	andi	r24, 0x03	; 3
 482:	86 2b       	or	r24, r22
 484:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 488:	15 c0       	rjmp	.+42     	; 0x4b4 <Inicializa_TC2+0x5e>
		TCCR2B |= (_TC2_OCAB_N & 0x07);
	}
	else if(_TC2_modo < 8)
 48a:	88 30       	cpi	r24, 0x08	; 8
 48c:	58 f4       	brcc	.+22     	; 0x4a4 <Inicializa_TC2+0x4e>
	{
		TCCR2A |= ((_TC2_OCAB_N & 0xF0) | (_TC2_modo & 0x03));
 48e:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 492:	62 2b       	or	r22, r18
 494:	83 70       	andi	r24, 0x03	; 3
 496:	86 2b       	or	r24, r22
 498:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B |= (((_TC2_modo << 1) & 0x08) | (_TC2_OCAB_N & 0x07));
 49c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 4a0:	88 60       	ori	r24, 0x08	; 8
 4a2:	0a c0       	rjmp	.+20     	; 0x4b8 <Inicializa_TC2+0x62>
		
	}
	else
	{
	    ASSR = 1 << AS2;
 4a4:	80 e2       	ldi	r24, 0x20	; 32
 4a6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
	    TCCR2A |= (_TC2_OCAB_N & 0xF0);
 4aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 4ae:	68 2b       	or	r22, r24
 4b0:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	    TCCR2B |= (_TC2_OCAB_N & 0x07);
 4b4:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 4b8:	98 2b       	or	r25, r24
 4ba:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	}
	TIMSK2 |= ~(_TC2_INT);
 4be:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 4c2:	40 95       	com	r20
 4c4:	48 2b       	or	r20, r24
 4c6:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 4ca:	08 95       	ret

000004cc <__udivmodqi4>:
 4cc:	99 1b       	sub	r25, r25
 4ce:	79 e0       	ldi	r23, 0x09	; 9
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <__udivmodqi4_ep>

000004d2 <__udivmodqi4_loop>:
 4d2:	99 1f       	adc	r25, r25
 4d4:	96 17       	cp	r25, r22
 4d6:	08 f0       	brcs	.+2      	; 0x4da <__udivmodqi4_ep>
 4d8:	96 1b       	sub	r25, r22

000004da <__udivmodqi4_ep>:
 4da:	88 1f       	adc	r24, r24
 4dc:	7a 95       	dec	r23
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__udivmodqi4_loop>
 4e0:	80 95       	com	r24
 4e2:	08 95       	ret

000004e4 <_exit>:
 4e4:	f8 94       	cli

000004e6 <__stop_program>:
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <__stop_program>
