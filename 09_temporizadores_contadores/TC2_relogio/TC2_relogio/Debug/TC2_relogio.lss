
TC2_relogio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000018a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cc  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000626  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000245  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000382  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000156f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:
                     delas devem ser declaradas como volatile. Isto é uma exigência
                     para o compilador. Respostas imprevisíveis correrão se o comando
                     volatile não for empregado. */
//-----------------------------------------------------------------------------------
ISR(TIMER2_OVF_vect)    //entrada aqui a cada 1 segundo
{                       //rotina para contagem das horas, minutos e segundos
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	cpl_bit(PORTB,LED); //pisca LED
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	89 27       	eor	r24, r25
  a4:	85 b9       	out	0x05, r24	; 5
	
	segundos++;	
  a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <segundos>
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <segundos>
	if(segundos == 60)
  b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <segundos>
  b4:	8c 33       	cpi	r24, 0x3C	; 60
  b6:	c1 f4       	brne	.+48     	; 0xe8 <__vector_9+0x58>
	{
		segundos = 0;
  b8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <segundos>
		minutos++;
  bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minutos>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <minutos>
		if (minutos == 60)
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <minutos>
  ca:	8c 33       	cpi	r24, 0x3C	; 60
  cc:	69 f4       	brne	.+26     	; 0xe8 <__vector_9+0x58>
		{
			minutos = 0;
  ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <minutos>
			horas++;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if (horas == 24)
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	88 31       	cpi	r24, 0x18	; 24
  e2:	11 f4       	brne	.+4      	; 0xe8 <__vector_9+0x58>
			    horas = 0;
  e4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <main>:
//----------------------------------------------------------------------------------
int main()
{
	DDRB = 0b00100000;//cristal ext., não importa a config. dos pinos TOSC1 e TOSC2
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	84 b9       	out	0x04, r24	; 4
	PORTB= 0b11011111;//pull-ups habilitados nos pinos não utilizados
  fa:	9f ed       	ldi	r25, 0xDF	; 223
  fc:	95 b9       	out	0x05, r25	; 5
	
	ASSR = 1<<AS2;    //habilita o cristal externo para o contador de tempo real
  fe:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
	TCCR2B = (1 << CS22) | (1 << CS20); /* prescaler = 128, freq. p/ o contador = 32.768/128,
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	                                       o que resulta em uma freq. de 256 Hz. Como o contador
	                                       é de 8 bits, ele conta 256 vezes, resultando em um
	                                       estouro preciso a cada 1 segundo */
	TIMSK2 = 1<<TOIE2; //habilita interrupção do TC2
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	
	sei();             //habilita interrupção global
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x1a>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
