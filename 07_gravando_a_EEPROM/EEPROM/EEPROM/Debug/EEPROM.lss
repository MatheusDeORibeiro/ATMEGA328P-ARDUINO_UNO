
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  000001d2  2**0
                  ALLOC
  3 .eeprom       00000014  00810000  00810000  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000a0  00000000  00000000  00000258  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000ad5  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006cc  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000483  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000024  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000413  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
{
	unsigned char ucDado_escrita = 0x13;
	unsigned char ucDdado_leitura;
	unsigned int  uiEndereco = 0x3FF;    /*endereço 0x3FF (1024° posição da memória)
	                                       valores entre 0 e 1023*/
	_EEPUT(uiEndereco, ucDado_escrita);  //gravando 0x13 no endereço 0x3FF da EEPROM
  90:	63 e1       	ldi	r22, 0x13	; 19
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	0e 94 8f 00 	call	0x11e	; 0x11e <eeprom_write_byte>
	_EEGET(ucDdado_leitura, uiEndereco); /*lendo o conteúdo do endereço 0x3FF para a
	                                       variável ucDado_leitura*/
	//lendo valores da EEPROM para a RAM
	RAM_byte = eeprom_read_byte(&uc_valor); /*lendo a variável uc_valor para a
  9a:	83 e1       	ldi	r24, 0x13	; 19
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 81 00 	call	0x102	; 0x102 <eeprom_read_byte>
  a2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <RAM_byte>
	                                          variável RAM_byte*/
	RAM_word = eeprom_read_word(&ui_valor); /*lendo a variável ui_valor para a
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 89 00 	call	0x112	; 0x112 <eeprom_read_word>
  ae:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <RAM_word+0x1>
  b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <RAM_word>
	                                          variável RAM_word*/
	eeprom_read_block(RAM_string, uc_string, 13); /*lendo a variável uc_string com 13
  b6:	4d e0       	ldi	r20, 0x0D	; 13
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 71 00 	call	0xe2	; 0xe2 <eeprom_read_block>
	                                                bytes para a variável RAM_string*/
	eeprom_read_block(RAM_bytes, uc_vetor, 4);    /*lendo a variável uc_vetor com 4 bytes
  c6:	44 e0       	ldi	r20, 0x04	; 4
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	6f e0       	ldi	r22, 0x0F	; 15
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	80 e1       	ldi	r24, 0x10	; 16
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 71 00 	call	0xe2	; 0xe2 <eeprom_read_block>
	                                                para a variável RAM_bytes*/
	//escrevendo um dado na EEPROM
	eeprom_write_byte(&uc_valor, 0xEE); /*escreve o valor 0xEE na variável uc_valor da
  d6:	6e ee       	ldi	r22, 0xEE	; 238
  d8:	83 e1       	ldi	r24, 0x13	; 19
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 8f 00 	call	0x11e	; 0x11e <eeprom_write_byte>
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x50>

000000e2 <eeprom_read_block>:
  e2:	dc 01       	movw	r26, r24
  e4:	cb 01       	movw	r24, r22

000000e6 <eeprom_read_blraw>:
  e6:	fc 01       	movw	r30, r24
  e8:	f9 99       	sbic	0x1f, 1	; 31
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <eeprom_read_blraw+0x2>
  ec:	06 c0       	rjmp	.+12     	; 0xfa <eeprom_read_blraw+0x14>
  ee:	f2 bd       	out	0x22, r31	; 34
  f0:	e1 bd       	out	0x21, r30	; 33
  f2:	f8 9a       	sbi	0x1f, 0	; 31
  f4:	31 96       	adiw	r30, 0x01	; 1
  f6:	00 b4       	in	r0, 0x20	; 32
  f8:	0d 92       	st	X+, r0
  fa:	41 50       	subi	r20, 0x01	; 1
  fc:	50 40       	sbci	r21, 0x00	; 0
  fe:	b8 f7       	brcc	.-18     	; 0xee <eeprom_read_blraw+0x8>
 100:	08 95       	ret

00000102 <eeprom_read_byte>:
 102:	f9 99       	sbic	0x1f, 1	; 31
 104:	fe cf       	rjmp	.-4      	; 0x102 <eeprom_read_byte>
 106:	92 bd       	out	0x22, r25	; 34
 108:	81 bd       	out	0x21, r24	; 33
 10a:	f8 9a       	sbi	0x1f, 0	; 31
 10c:	99 27       	eor	r25, r25
 10e:	80 b5       	in	r24, 0x20	; 32
 110:	08 95       	ret

00000112 <eeprom_read_word>:
 112:	a8 e1       	ldi	r26, 0x18	; 24
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	42 e0       	ldi	r20, 0x02	; 2
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	0c 94 73 00 	jmp	0xe6	; 0xe6 <eeprom_read_blraw>

0000011e <eeprom_write_byte>:
 11e:	26 2f       	mov	r18, r22

00000120 <eeprom_write_r18>:
 120:	f9 99       	sbic	0x1f, 1	; 31
 122:	fe cf       	rjmp	.-4      	; 0x120 <eeprom_write_r18>
 124:	1f ba       	out	0x1f, r1	; 31
 126:	92 bd       	out	0x22, r25	; 34
 128:	81 bd       	out	0x21, r24	; 33
 12a:	20 bd       	out	0x20, r18	; 32
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	fa 9a       	sbi	0x1f, 2	; 31
 132:	f9 9a       	sbi	0x1f, 1	; 31
 134:	0f be       	out	0x3f, r0	; 63
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
