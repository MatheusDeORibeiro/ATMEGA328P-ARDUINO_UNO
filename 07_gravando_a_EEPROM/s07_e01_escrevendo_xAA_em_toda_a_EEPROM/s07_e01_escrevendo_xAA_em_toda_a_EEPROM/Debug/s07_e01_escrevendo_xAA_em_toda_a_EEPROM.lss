
s07_e01_escrevendo_xAA_em_toda_a_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c8  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000637  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000289  00000000  00000000  00000f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bf  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000081  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_22>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
//rotina de tratamento de interrupção
ISR(EE_READY_vect);

int main(void) //função principal
{
	DDRB = 0xFF; //define todo o PORTB como saída
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //coloca todo o PORTB em nível baixo
  94:	15 b8       	out	0x05, r1	; 5

	EECR = (1 << EERIE); //habilita a interrupção da EEPROM
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	8f bb       	out	0x1f, r24	; 31
	sei(); //seta o bit I do registrador SREG para habilitar todas as interrupções
  9a:	78 94       	sei
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0xc>

0000009e <__vector_22>:
}

//implementando rotina de tratamento de interrupção

ISR(EE_READY_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
    static unsigned int end_eeprom = 0x00; //declaração de variável local estática
	
	if(end_eeprom <= 0x03FF) //escrita de 0x0000 até 0x3FF
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b8:	81 15       	cp	r24, r1
  ba:	24 e0       	ldi	r18, 0x04	; 4
  bc:	92 07       	cpc	r25, r18
  be:	d0 f4       	brcc	.+52     	; 0xf4 <__vector_22+0x56>
	{
		cli(); //limba o bit I do registrador SREG desabilitando todas as interrupções
  c0:	f8 94       	cli
		/* Aguarda completar a escrita anterior */
		while(EECR & (1 << EEPE));
  c2:	f9 99       	sbic	0x1f, 1	; 31
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <__vector_22+0x24>
		/* Carrega os registradores de endereço e dado */
		EEAR = end_eeprom++;
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ce:	9c 01       	movw	r18, r24
  d0:	2f 5f       	subi	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	92 bd       	out	0x22, r25	; 34
  de:	81 bd       	out	0x21, r24	; 33
		EEDR = 0xAA;
  e0:	8a ea       	ldi	r24, 0xAA	; 170
  e2:	80 bd       	out	0x20, r24	; 32
		/* Escreve um lógico em EEMPE */
		EECR |= (1 << EEMPE);
  e4:	8f b3       	in	r24, 0x1f	; 31
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	8f bb       	out	0x1f, r24	; 31
		/* Inicia a escrita na eeprom setando EEPE */
		EECR |= (1 << EEPE);
  ea:	8f b3       	in	r24, 0x1f	; 31
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8f bb       	out	0x1f, r24	; 31
		sei(); //seta o bit I do registrador SREG para habilitar todas as interrupções
  f0:	78 94       	sei
  f2:	27 c0       	rjmp	.+78     	; 0x142 <__vector_22+0xa4>
	}
	else if(end_eeprom <= 0x07FE) //leitura de 0x04000 até 0x07FE
  f4:	8f 3f       	cpi	r24, 0xFF	; 255
  f6:	27 e0       	ldi	r18, 0x07	; 7
  f8:	92 07       	cpc	r25, r18
  fa:	00 f5       	brcc	.+64     	; 0x13c <__vector_22+0x9e>
	{
		unsigned char leitura_eeprom; //variável auxiliar
		/* Aguarda completar a escrita anterior */
		while(EECR & (1 << EEPE));
  fc:	f9 99       	sbic	0x1f, 1	; 31
  fe:	fe cf       	rjmp	.-4      	; 0xfc <__vector_22+0x5e>
		/* Carrega o registrador de endereço */
		EEAR = end_eeprom - 0x03FF; //end_eeprom++;
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	93 40       	sbci	r25, 0x03	; 3
 104:	92 bd       	out	0x22, r25	; 34
 106:	81 bd       	out	0x21, r24	; 33
		/* Inicia a leitrua da eeprom setando EERE */
		EECR |= (1 << EERE);
 108:	8f b3       	in	r24, 0x1f	; 31
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	8f bb       	out	0x1f, r24	; 31
		/* Armazena o dado dReturn data from Data Register */
		leitura_eeprom = EEDR;
 10e:	80 b5       	in	r24, 0x20	; 32
		if(leitura_eeprom == 0xAA) set_bit(PORTB, LED); //se o dado foi gravado corretamente, liga o led
 110:	8a 3a       	cpi	r24, 0xAA	; 170
 112:	21 f4       	brne	.+8      	; 0x11c <__vector_22+0x7e>
 114:	85 b1       	in	r24, 0x05	; 5
 116:	80 62       	ori	r24, 0x20	; 32
 118:	85 b9       	out	0x05, r24	; 5
 11a:	06 c0       	rjmp	.+12     	; 0x128 <__vector_22+0x8a>
		else
		{
			clr_bit(PORTB, LED); //se o dado foi gravado incorretamente, desliga o led
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	85 b9       	out	0x05, r24	; 5
			EECR = ~(1 << EERIE); //desativa a interrupção da eeprom
 122:	87 ef       	ldi	r24, 0xF7	; 247
 124:	8f bb       	out	0x1f, r24	; 31
			cli(); //limpa o bit I do registrador SREG desabilitando todas as interrupções
 126:	f8 94       	cli
		}
		end_eeprom++; //incremeta o endereço da eeprom
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	03 c0       	rjmp	.+6      	; 0x142 <__vector_22+0xa4>
	}
	else
	{
		EECR = ~(1 << EERIE); //desabilita a interrupção da eeprom
 13c:	87 ef       	ldi	r24, 0xF7	; 247
 13e:	8f bb       	out	0x1f, r24	; 31
		cli(); //limpa o bit I do registrador SREG desabilitando todas as interrupções
 140:	f8 94       	cli
	}
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
