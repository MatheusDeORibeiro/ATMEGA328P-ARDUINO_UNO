
s07_e02_inicializacao_ci.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000840  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000676  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a5  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000186f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	unsigned char dado = 0x50;
	unsigned int endereco_eeprom = 0x000F; //endereço que a informação da inicialização será armazenada
	unsigned char leitura_eeprom;

	DDRD = 0xFB; //configura o pino PD2 como entrada e os pinos restantes como saída
  80:	8b ef       	ldi	r24, 0xFB	; 251
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x04; //habilita o resistor pull-up da entrada e coloca os pinos restantes em nível baixo
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	8b b9       	out	0x0b, r24	; 11

	UCSR0B = 0x00; //configura os pinos RX e TX (PD0 e PD1) como I/Os digitais para o Arduino Uno
  88:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	__EEGET(leitura_eeprom, endereco_eeprom);
  8c:	8f e0       	ldi	r24, 0x0F	; 15
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 61 00 	call	0xc2	; 0xc2 <eeprom_read_byte>
	
	if(leitura_eeprom == dado) //verifica se a inicialização é necessária
  94:	80 35       	cpi	r24, 0x50	; 80
  96:	11 f4       	brne	.+4      	; 0x9c <main+0x1c>
	{
		set_bit(PORTD, LED2); //liga LED que indica que a inicialização não precisa ser mais feita
  98:	59 9a       	sbi	0x0b, 1	; 11
  9a:	12 c0       	rjmp	.+36     	; 0xc0 <main+0x40>
	}
	else
	{
		while(leitura_eeprom != dado)
		{
			set_bit(PORTD, LED1);      //acende o LED que indica que a inicialização deve ser feita
  9c:	58 9a       	sbi	0x0b, 0	; 11
			if(!tst_bit(PIND, BOTAO)) //aguarda o botão ser pressionado
  9e:	4a 99       	sbic	0x09, 2	; 9
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <main+0x30>
			{
				while(!tst_bit(PIND, BOTAO));  //aguarda o botão ser solto
  a2:	4a 9b       	sbis	0x09, 2	; 9
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x22>
				__EEPUT(endereco_eeprom, dado); //armazena a informação na EEPROM
  a6:	60 e5       	ldi	r22, 0x50	; 80
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 69 00 	call	0xd2	; 0xd2 <eeprom_write_byte>
				//inicialização do circuito integrado
			}
			__EEGET(leitura_eeprom, endereco_eeprom); //leitua da informação armazenada
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 61 00 	call	0xc2	; 0xc2 <eeprom_read_byte>
			if(leitura_eeprom == dado)                //verifica se a informação armazenada está correta
  b8:	80 35       	cpi	r24, 0x50	; 80
  ba:	81 f7       	brne	.-32     	; 0x9c <main+0x1c>
			{
				clr_bit(PORTD, LED1); //apaga LED1
  bc:	58 98       	cbi	0x0b, 0	; 11
				set_bit(PORTD, LED2); //acende LED2
  be:	59 9a       	sbi	0x0b, 1	; 11
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x40>

000000c2 <eeprom_read_byte>:
  c2:	f9 99       	sbic	0x1f, 1	; 31
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <eeprom_read_byte>
  c6:	92 bd       	out	0x22, r25	; 34
  c8:	81 bd       	out	0x21, r24	; 33
  ca:	f8 9a       	sbi	0x1f, 0	; 31
  cc:	99 27       	eor	r25, r25
  ce:	80 b5       	in	r24, 0x20	; 32
  d0:	08 95       	ret

000000d2 <eeprom_write_byte>:
  d2:	26 2f       	mov	r18, r22

000000d4 <eeprom_write_r18>:
  d4:	f9 99       	sbic	0x1f, 1	; 31
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <eeprom_write_r18>
  d8:	1f ba       	out	0x1f, r1	; 31
  da:	92 bd       	out	0x22, r25	; 34
  dc:	81 bd       	out	0x21, r24	; 33
  de:	20 bd       	out	0x20, r18	; 32
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	fa 9a       	sbi	0x1f, 2	; 31
  e6:	f9 9a       	sbi	0x1f, 1	; 31
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	08 95       	ret

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
