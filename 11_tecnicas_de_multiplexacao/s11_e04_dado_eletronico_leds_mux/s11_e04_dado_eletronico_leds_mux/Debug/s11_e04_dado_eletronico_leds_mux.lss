
s11_e04_dado_eletronico_leds_mux.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000334  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000848  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d5  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ae  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e1  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002117  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

ISR(TIMER0_OVF_vect); //declaração da rotina de tratamento do estouro do TCNT0

int main() //função principal
{
    DDRC = 0xFF;  //configura todo o PORTC como saída
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 b9       	out	0x07, r24	; 7
    DDRB = 0xFE;  //configura PB0 como entrada e os pinos restantes do PORTB como saídas
  aa:	8e ef       	ldi	r24, 0xFE	; 254
  ac:	84 b9       	out	0x04, r24	; 4
    PORTC = 0x00; //inicializa o PORTC em nível baixo
  ae:	18 b8       	out	0x08, r1	; 8
    PORTB = 0x01; //habilita o resistor de pull-up da entrada e inicializa as saídas em nível baixo
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	85 b9       	out	0x05, r24	; 5

    Inicializa_TC0(TC0_modo_normal, TC0_OC0A_normal&TC0_OC0B_normal&TC0_CLK_1024, TC0_TOIE0);
  b4:	4e ef       	ldi	r20, 0xFE	; 254
  b6:	6d e0       	ldi	r22, 0x0D	; 13
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Inicializa_TC0>
    TCNT0 = 100;
  be:	84 e6       	ldi	r24, 0x64	; 100
  c0:	86 bd       	out	0x26, r24	; 38
    /* TC0 no modo normal, f_osc igual a 16MHz, prescaler igual a 1024, saídas comparadoras desabilitadas,
       interrupção por estouro do TCNT0 habilitada:
       t_estouro = N * (TOP + 1) / f_osc = 1024 * (255 - 100 + 1) / 16M = 9,98ms 
       t_varredura = conta_tempo * t_estouro = 10 * 9,98m = 99,8ms */
    sei(); //habilita todas as fontes de interrupção setando o bit I do registrador SREG
  c2:	78 94       	sei

    while(1) //loop infinito
    {
        numero++;                   //incrementa 'numero'
  c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <numero>
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <numero>
        if(numero > 6) numero = 1;  //se 'numero' for maior do que 6, então a variável é reinicializada
  ce:	87 30       	cpi	r24, 0x07	; 7
  d0:	c8 f3       	brcs	.-14     	; 0xc4 <main+0x1e>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <numero>
  d8:	f5 cf       	rjmp	.-22     	; 0xc4 <main+0x1e>

000000da <__vector_16>:
    }
}

ISR(TIMER0_OVF_vect) //implementação da rotina de tratamento do estouro do TCNT0
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
    static unsigned char conta_tempo = 0, face = 0, led_face = 1; //declaração de variáveis auxiliares
    TCNT0 = 100;                          //reinicia o registrador do TC0
  e8:	84 e6       	ldi	r24, 0x64	; 100
  ea:	86 bd       	out	0x26, r24	; 38
    conta_tempo++;                        //incrementa a variável auxiliar de contagem de tempo
  ec:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <conta_tempo.1626>
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <conta_tempo.1626>
    if(conta_tempo == 10)                 //se passou 100ms?...
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	41 f4       	brne	.+16     	; 0x10a <__vector_16+0x30>
    {
        if(!tst_bit(PINB, BOTAO))         //o botão foi pressionado?...
  fa:	18 99       	sbic	0x03, 0	; 3
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__vector_16+0x2c>
        {
            face = numero;                //armazena o número da face na variável 'face'
  fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <numero>
 102:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
        }
        conta_tempo = 0;                  //reinicializa a variável auxiliar de contagem de tempo
 106:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <conta_tempo.1626>
    }
    PORTC = 0x00;                         //limpa o PORTC 
 10a:	18 b8       	out	0x08, r1	; 8
    DDRC = 0xFF;                          //configura todo o PORTC como saída
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	87 b9       	out	0x07, r24	; 7
    if(face == 1)                         //exibe a face 1
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	39 f4       	brne	.+14     	; 0x126 <__vector_16+0x4c>
    {
        //liga led 7
        DDRC &= ~((1 << PC1) | (1 << PC0)); 
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	8c 7f       	andi	r24, 0xFC	; 252
 11c:	87 b9       	out	0x07, r24	; 7
        PORTC |= 1 << PC3;
 11e:	88 b1       	in	r24, 0x08	; 8
 120:	88 60       	ori	r24, 0x08	; 8
 122:	88 b9       	out	0x08, r24	; 8
 124:	bf c0       	rjmp	.+382    	; 0x2a4 <__vector_16+0x1ca>
    }
    else if(face == 2)                    //exibe a face 2
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	91 f4       	brne	.+36     	; 0x14e <__vector_16+0x74>
    {
        if(led_face == 1)
 12a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	39 f4       	brne	.+14     	; 0x140 <__vector_16+0x66>
        {
            //liga led 2
            DDRC &= ~((1 << PC3) | (1 << PC2));
 132:	87 b1       	in	r24, 0x07	; 7
 134:	83 7f       	andi	r24, 0xF3	; 243
 136:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	b2 c0       	rjmp	.+356    	; 0x2a4 <__vector_16+0x1ca>
        }
        else
        {
            //liga led 5
            DDRC &= ~((1 << PC2) | (1 << PC1));
 140:	87 b1       	in	r24, 0x07	; 7
 142:	89 7f       	andi	r24, 0xF9	; 249
 144:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC3;
 146:	88 b1       	in	r24, 0x08	; 8
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	88 b9       	out	0x08, r24	; 8
 14c:	ab c0       	rjmp	.+342    	; 0x2a4 <__vector_16+0x1ca>
        }
    }
    else if(face == 3)                    //exibe a face 3
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	d9 f4       	brne	.+54     	; 0x188 <__vector_16+0xae>
    {
        if(led_face == 1)
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	39 f4       	brne	.+14     	; 0x168 <__vector_16+0x8e>
        {
            //liga led 2
            DDRC &= ~((1 << PC3) | (1 << PC2));
 15a:	87 b1       	in	r24, 0x07	; 7
 15c:	83 7f       	andi	r24, 0xF3	; 243
 15e:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 160:	88 b1       	in	r24, 0x08	; 8
 162:	81 60       	ori	r24, 0x01	; 1
 164:	88 b9       	out	0x08, r24	; 8
 166:	9e c0       	rjmp	.+316    	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 2)
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	39 f4       	brne	.+14     	; 0x17a <__vector_16+0xa0>
        {
            //liga led 5
            DDRC &= ~((1 << PC2) | (1 << PC1));
 16c:	87 b1       	in	r24, 0x07	; 7
 16e:	89 7f       	andi	r24, 0xF9	; 249
 170:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC3;
 172:	88 b1       	in	r24, 0x08	; 8
 174:	88 60       	ori	r24, 0x08	; 8
 176:	88 b9       	out	0x08, r24	; 8
 178:	95 c0       	rjmp	.+298    	; 0x2a4 <__vector_16+0x1ca>
        }
        else
        {
            //liga led 7
            DDRC &= ~((1 << PC1) | (1 << PC0));
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	8c 7f       	andi	r24, 0xFC	; 252
 17e:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC3;
 180:	88 b1       	in	r24, 0x08	; 8
 182:	88 60       	ori	r24, 0x08	; 8
 184:	88 b9       	out	0x08, r24	; 8
 186:	8e c0       	rjmp	.+284    	; 0x2a4 <__vector_16+0x1ca>
        }
    }
    else if(face == 4)                    //exibe a face 4
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	21 f5       	brne	.+72     	; 0x1d4 <__vector_16+0xfa>
    {
        if(led_face == 1)
 18c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	39 f4       	brne	.+14     	; 0x1a2 <__vector_16+0xc8>
        {
            //liga led 1
            DDRC &= ~((1 << PC3) | (1 << PC2));
 194:	87 b1       	in	r24, 0x07	; 7
 196:	83 7f       	andi	r24, 0xF3	; 243
 198:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC1;
 19a:	88 b1       	in	r24, 0x08	; 8
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	88 b9       	out	0x08, r24	; 8
 1a0:	81 c0       	rjmp	.+258    	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 2)
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	39 f4       	brne	.+14     	; 0x1b4 <__vector_16+0xda>
        {
            //liga led 2
            DDRC &= ~((1 << PC3) | (1 << PC2));
 1a6:	87 b1       	in	r24, 0x07	; 7
 1a8:	83 7f       	andi	r24, 0xF3	; 243
 1aa:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	78 c0       	rjmp	.+240    	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 3)
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <__vector_16+0xec>
        {
            //liga led 5
            DDRC &= ~((1 << PC2) | (1 << PC1));
 1b8:	87 b1       	in	r24, 0x07	; 7
 1ba:	89 7f       	andi	r24, 0xF9	; 249
 1bc:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC3;
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	6f c0       	rjmp	.+222    	; 0x2a4 <__vector_16+0x1ca>
        }
        else
        {
            //liga led 6
            DDRC &= ~((1 << PC2) | (1 << PC1));
 1c6:	87 b1       	in	r24, 0x07	; 7
 1c8:	89 7f       	andi	r24, 0xF9	; 249
 1ca:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	88 b9       	out	0x08, r24	; 8
 1d2:	68 c0       	rjmp	.+208    	; 0x2a4 <__vector_16+0x1ca>
        }       
    }
    else if(face == 5)                    //exibe a face 5
 1d4:	85 30       	cpi	r24, 0x05	; 5
 1d6:	69 f5       	brne	.+90     	; 0x232 <__vector_16+0x158>
    {
        if(led_face == 1)
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	39 f4       	brne	.+14     	; 0x1ee <__vector_16+0x114>
        {
            //liga led 1
            DDRC &= ~((1 << PC3) | (1 << PC2));
 1e0:	87 b1       	in	r24, 0x07	; 7
 1e2:	83 7f       	andi	r24, 0xF3	; 243
 1e4:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC1;
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	5b c0       	rjmp	.+182    	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 2)
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	39 f4       	brne	.+14     	; 0x200 <__vector_16+0x126>
        {
            //liga led 2
            DDRC &= ~((1 << PC3) | (1 << PC2));
 1f2:	87 b1       	in	r24, 0x07	; 7
 1f4:	83 7f       	andi	r24, 0xF3	; 243
 1f6:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 1f8:	88 b1       	in	r24, 0x08	; 8
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	88 b9       	out	0x08, r24	; 8
 1fe:	52 c0       	rjmp	.+164    	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 3)
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	39 f4       	brne	.+14     	; 0x212 <__vector_16+0x138>
        {
            //liga led 5
            DDRC &= ~((1 << PC2) | (1 << PC1));
 204:	87 b1       	in	r24, 0x07	; 7
 206:	89 7f       	andi	r24, 0xF9	; 249
 208:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC3;
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	88 60       	ori	r24, 0x08	; 8
 20e:	88 b9       	out	0x08, r24	; 8
 210:	49 c0       	rjmp	.+146    	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 4)
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	39 f4       	brne	.+14     	; 0x224 <__vector_16+0x14a>
        {
            //liga led 6
            DDRC &= ~((1 << PC2) | (1 << PC1));
 216:	87 b1       	in	r24, 0x07	; 7
 218:	89 7f       	andi	r24, 0xF9	; 249
 21a:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 21c:	88 b1       	in	r24, 0x08	; 8
 21e:	81 60       	ori	r24, 0x01	; 1
 220:	88 b9       	out	0x08, r24	; 8
 222:	40 c0       	rjmp	.+128    	; 0x2a4 <__vector_16+0x1ca>
        }
        else
        {
            //liga led 7
            DDRC &= ~((1 << PC1) | (1 << PC0)); 
 224:	87 b1       	in	r24, 0x07	; 7
 226:	8c 7f       	andi	r24, 0xFC	; 252
 228:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC3;
 22a:	88 b1       	in	r24, 0x08	; 8
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	88 b9       	out	0x08, r24	; 8
 230:	39 c0       	rjmp	.+114    	; 0x2a4 <__vector_16+0x1ca>
        }
    }
    else if(face == 6)                    //exibe a face 6
 232:	86 30       	cpi	r24, 0x06	; 6
 234:	b1 f5       	brne	.+108    	; 0x2a2 <__vector_16+0x1c8>
    {
        if(led_face == 1)
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	39 f4       	brne	.+14     	; 0x24c <__vector_16+0x172>
        {
            //liga led 1
            DDRC &= ~((1 << PC3) | (1 << PC2));
 23e:	87 b1       	in	r24, 0x07	; 7
 240:	83 7f       	andi	r24, 0xF3	; 243
 242:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC1;
 244:	88 b1       	in	r24, 0x08	; 8
 246:	82 60       	ori	r24, 0x02	; 2
 248:	88 b9       	out	0x08, r24	; 8
 24a:	2c c0       	rjmp	.+88     	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 2)
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	39 f4       	brne	.+14     	; 0x25e <__vector_16+0x184>
        {
            //liga led 2
            DDRC &= ~((1 << PC3) | (1 << PC2));
 250:	87 b1       	in	r24, 0x07	; 7
 252:	83 7f       	andi	r24, 0xF3	; 243
 254:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 256:	88 b1       	in	r24, 0x08	; 8
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	88 b9       	out	0x08, r24	; 8
 25c:	23 c0       	rjmp	.+70     	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 3)
 25e:	83 30       	cpi	r24, 0x03	; 3
 260:	39 f4       	brne	.+14     	; 0x270 <__vector_16+0x196>
        {
            //liga led 3
            DDRC &= ~((1 << PC3) | (1 << PC0));
 262:	87 b1       	in	r24, 0x07	; 7
 264:	86 7f       	andi	r24, 0xF6	; 246
 266:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC1;
 268:	88 b1       	in	r24, 0x08	; 8
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	88 b9       	out	0x08, r24	; 8
 26e:	1a c0       	rjmp	.+52     	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 4)
 270:	84 30       	cpi	r24, 0x04	; 4
 272:	39 f4       	brne	.+14     	; 0x282 <__vector_16+0x1a8>
        {
            //liga led 4
            DDRC &= ~((1 << PC3) | (1 << PC0));
 274:	87 b1       	in	r24, 0x07	; 7
 276:	86 7f       	andi	r24, 0xF6	; 246
 278:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC2;
 27a:	88 b1       	in	r24, 0x08	; 8
 27c:	84 60       	ori	r24, 0x04	; 4
 27e:	88 b9       	out	0x08, r24	; 8
 280:	11 c0       	rjmp	.+34     	; 0x2a4 <__vector_16+0x1ca>
        }
        else if(led_face == 5)
 282:	85 30       	cpi	r24, 0x05	; 5
 284:	39 f4       	brne	.+14     	; 0x294 <__vector_16+0x1ba>
        {
            //liga led 5
            DDRC &= ~((1 << PC2) | (1 << PC1));
 286:	87 b1       	in	r24, 0x07	; 7
 288:	89 7f       	andi	r24, 0xF9	; 249
 28a:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC3;
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	88 60       	ori	r24, 0x08	; 8
 290:	88 b9       	out	0x08, r24	; 8
 292:	08 c0       	rjmp	.+16     	; 0x2a4 <__vector_16+0x1ca>
        }
        else
        {
            //liga led 6
            DDRC &= ~((1 << PC2) | (1 << PC1));
 294:	87 b1       	in	r24, 0x07	; 7
 296:	89 7f       	andi	r24, 0xF9	; 249
 298:	87 b9       	out	0x07, r24	; 7
            PORTC |= 1 << PC0;
 29a:	88 b1       	in	r24, 0x08	; 8
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	88 b9       	out	0x08, r24	; 8
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <__vector_16+0x1ca>
        }
    }
    else PORTC = 0x00;
 2a2:	18 b8       	out	0x08, r1	; 8
    led_face++;                           //incrementa a variável auxiliar de acionamento dos leds
 2a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    if(led_face > face) led_face = 0;     //reinicia a variável auxiliar de acionamento dos leds
 2ae:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 2b2:	98 17       	cp	r25, r24
 2b4:	10 f4       	brcc	.+4      	; 0x2ba <__vector_16+0x1e0>
 2b6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <Inicializa_TC0>:
 * - _TC0_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC0_INT:    configura as interrupções
 */
void Inicializa_TC0(unsigned char _TC0_modo, unsigned char _TC0_OCAB_N, unsigned char _TC0_INT)
{
	TCCR0A = 0x00;
 2c8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 2ca:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= 0xF7;
 2cc:	ee e6       	ldi	r30, 0x6E	; 110
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	90 81       	ld	r25, Z
 2d2:	97 7f       	andi	r25, 0xF7	; 247
 2d4:	90 83       	st	Z, r25
	if(_TC0_modo == 0) TCCR0B |= (_TC0_OCAB_N & 0x07);
 2d6:	81 11       	cpse	r24, r1
 2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <Inicializa_TC0+0x1c>
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	67 70       	andi	r22, 0x07	; 7
 2de:	68 2b       	or	r22, r24
 2e0:	65 bd       	out	0x25, r22	; 37
 2e2:	1f c0       	rjmp	.+62     	; 0x322 <Inicializa_TC0+0x5a>
	else if(_TC0_modo < 5)
 2e4:	85 30       	cpi	r24, 0x05	; 5
 2e6:	60 f4       	brcc	.+24     	; 0x300 <Inicializa_TC0+0x38>
	{		
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 2e8:	94 b5       	in	r25, 0x24	; 36
 2ea:	26 2f       	mov	r18, r22
 2ec:	20 7f       	andi	r18, 0xF0	; 240
 2ee:	83 70       	andi	r24, 0x03	; 3
 2f0:	82 2b       	or	r24, r18
 2f2:	89 2b       	or	r24, r25
 2f4:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= (_TC0_OCAB_N & 0x07);
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	67 70       	andi	r22, 0x07	; 7
 2fa:	68 2b       	or	r22, r24
 2fc:	65 bd       	out	0x25, r22	; 37
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <Inicializa_TC0+0x5a>
	}
	else
	{
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 300:	24 b5       	in	r18, 0x24	; 36
 302:	36 2f       	mov	r19, r22
 304:	30 7f       	andi	r19, 0xF0	; 240
 306:	98 2f       	mov	r25, r24
 308:	93 70       	andi	r25, 0x03	; 3
 30a:	93 2b       	or	r25, r19
 30c:	92 2b       	or	r25, r18
 30e:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (((_TC0_modo << 1) & 0x08) | (_TC0_OCAB_N & 0x07));
 310:	25 b5       	in	r18, 0x25	; 37
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	88 70       	andi	r24, 0x08	; 8
 31a:	67 70       	andi	r22, 0x07	; 7
 31c:	86 2b       	or	r24, r22
 31e:	82 2b       	or	r24, r18
 320:	85 bd       	out	0x25, r24	; 37
		
	}
	TIMSK0 |= ~(_TC0_INT);
 322:	ee e6       	ldi	r30, 0x6E	; 110
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	40 95       	com	r20
 32a:	48 2b       	or	r20, r24
 32c:	40 83       	st	Z, r20
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
