
s11_e03_relogio_24_h.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000abe  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000786  00000000  00000000  00000faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f9  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046d  00000000  00000000  000022eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_5>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_9>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_16>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  60:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	3f 06       	cpc	r3, r31
  6a:	5b 4f       	sbci	r21, 0xFB	; 251
  6c:	66 6d       	ori	r22, 0xD6	; 214
  6e:	7d 07       	cpc	r23, r29
  70:	7f 6f       	ori	r23, 0xFF	; 255

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf ef       	ldi	r28, 0xFF	; 255
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_clear_bss>:
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	a0 e0       	ldi	r26, 0x00	; 0
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a6 30       	cpi	r26, 0x06	; 6
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
ISR(PCINT2_vect);     //declaração da rotina de tratamento da interrupção externa
ISR(TIMER2_OVF_vect); //declaração da rotina de tratamento do estouro do TCNT2

int main(void) //função principal
{
    DDRD = 0x0F;  //configura PD3:0 como saídas e PD7:PD4 como entradas
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0xFF;  //configura todo o PORTC como saída
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 b9       	out	0x07, r24	; 7
    DDRB = 0xFF;  //configura todo o PORTB como saída
  a2:	84 b9       	out	0x04, r24	; 4
    PORTD = 0xF0; //habilita os resistores pull-up das entradas
  a4:	80 ef       	ldi	r24, 0xF0	; 240
  a6:	8b b9       	out	0x0b, r24	; 11
    PORTC = 0x00; //inicializa todo o PORTC em nível baixo
  a8:	18 b8       	out	0x08, r1	; 8
    PORTB = 0x00; //inicializa todo o PORTB em nível baixo
  aa:	15 b8       	out	0x05, r1	; 5

    Inicializa_TC0(TC0_modo_normal, TC0_OC0A_normal&TC0_OC0B_normal&TC0_CLK_256, TC0_TOIE0);
  ac:	4e ef       	ldi	r20, 0xFE	; 254
  ae:	6c e0       	ldi	r22, 0x0C	; 12
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Inicializa_TC0>
    /* modo normal, f_osc igual a 16MHz, prescaler igual a 256, saídas comparadoras desabilitadas,
       interrupção por estouro do TCNT0 habiliatada:
       p_sinal = 1 / f_sinal = 1 / 60 = 16,7ms
       t_estouro = p_sinal / 2 = N * (TOP + 1) / f_osc -> 16,7m / 2 = conta_tempo * 256 * (255 + 1) / 16M
       conta_tempo = 2 */
    PCICR = 0x04;  //habilita as interrupções dos pinos PCINT[23:16](PORTD)
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    PCMSK2 = 0x10; //habilita a interrupção do pino PCINT20(PD4)
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
    /* t_um_seg = n_capturas * t_estouro -> 1 = n_capturas * 8,3m -> n_capturas = 120 */
    Inicializa_TC2(TC2_modo_normal, TC2_OC2A_normal&TC2_OC2B_normal&TC2_CLK_1024, TC2_TOIE2);
  c2:	4e ef       	ldi	r20, 0xFE	; 254
  c4:	6f e0       	ldi	r22, 0x0F	; 15
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 86 01 	call	0x30c	; 0x30c <Inicializa_TC2>
    TCNT2 = 212;
  cc:	84 ed       	ldi	r24, 0xD4	; 212
  ce:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    /* modo normal, f_osc igual a 16MHz, prescaler igua a 1024, saídas comparadoras desabilitadas,
       interrupção por estouro do TCNT2 habilitada:
       t_estouro = (f ^ -1) / n_dsp = (60 ^ -1) / 6 = 2,77ms -> t_estouro = 2,8ms
       t_estouro = N * (TOP + 1) / f_osc -> 2,8m = 1024 * (255 - TCNT2 + 1) / 16M
       TCNT2 = 212 */
    sei(); //habilita todas as fontes de inerrupção setando o bit I do registrador SREG
  d2:	78 94       	sei

    while(1) //loop infinito
    {
        while(!tst_bit(PIND, SEL))           //o botão 'SEL' foi pressionado?...
  d4:	4f 99       	sbic	0x09, 7	; 9
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <main+0x3a>
        {
            if(!tst_bit(PIND, MIN))          //o botão 'MIN' foi pressionado?...
  d8:	4d 99       	sbic	0x09, 5	; 9
  da:	17 c0       	rjmp	.+46     	; 0x10a <main+0x70>
            {
                while(!tst_bit(PIND, MIN));
  dc:	4d 9b       	sbis	0x09, 5	; 9
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	82 e5       	ldi	r24, 0x52	; 82
  e4:	97 e0       	ldi	r25, 0x07	; 7
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x4c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x56>
  f0:	00 00       	nop
                _delay_ms(150);
                minutos++;                    //incrementa os minutos
  f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minutos>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <minutos>
                if(minutos == 60) minutos = 0; 
  fc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minutos>
 100:	8c 33       	cpi	r24, 0x3C	; 60
 102:	41 f7       	brne	.-48     	; 0xd4 <main+0x3a>
 104:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <minutos>
 108:	e5 cf       	rjmp	.-54     	; 0xd4 <main+0x3a>
            }
            else if(!tst_bit(PIND, HORA))    //o botão 'HORA' foi pressionado?...
 10a:	4e 99       	sbic	0x09, 6	; 9
 10c:	e3 cf       	rjmp	.-58     	; 0xd4 <main+0x3a>
            {
                while(!tst_bit(PIND, HORA));
 10e:	4e 9b       	sbis	0x09, 6	; 9
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x74>
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	82 e5       	ldi	r24, 0x52	; 82
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x7e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x88>
 122:	00 00       	nop
                _delay_ms(150);
                horas++;                      //incrementa as horas
 124:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <horas>
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <horas>
                if(horas == 24) horas = 0; 
 12e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <horas>
 132:	88 31       	cpi	r24, 0x18	; 24
 134:	79 f6       	brne	.-98     	; 0xd4 <main+0x3a>
 136:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <horas>
 13a:	cc cf       	rjmp	.-104    	; 0xd4 <main+0x3a>

0000013c <__vector_16>:
        }
    }
}

ISR(TIMER0_OVF_vect) //implementação da rotina de tratamento do estouro do TCNT0
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
    static unsigned char conta_tempo = 0; //variável auxiliar para contagem de tempo
    conta_tempo++;
 14a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <conta_tempo.1933>
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <conta_tempo.1933>
    if(conta_tempo == 2)
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	31 f4       	brne	.+12     	; 0x164 <__vector_16+0x28>
    {
        cpl_bit(PORTD, SINAL_OUT);
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	89 27       	eor	r24, r25
 15e:	8b b9       	out	0x0b, r24	; 11
        conta_tempo = 0; 
 160:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <conta_tempo.1933>
    }
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_5>:

ISR(PCINT2_vect) //declaração da rotina de tratamento da interrupção externa
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 93       	push	r24
    static unsigned char captura = 0; //variável auxiliar para contagem do tempo
    captura++;                        //incrementa a variável auxiliar a cada borda do sinal
 17e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <captura.1939>
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <captura.1939>
    if(captura == 120)                //se passou um segundo(ocorreram 120 capturas)?...
 188:	88 37       	cpi	r24, 0x78	; 120
 18a:	39 f5       	brne	.+78     	; 0x1da <__vector_5+0x68>
    {
        segundos++;                   //incrementa 'segundos'
 18c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <segundos>
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <segundos>
        if(segundos == 60)            //se passou um minuto?...
 196:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <segundos>
 19a:	8c 33       	cpi	r24, 0x3C	; 60
 19c:	e1 f4       	brne	.+56     	; 0x1d6 <__vector_5+0x64>
        {
            segundos = 0;             //reinicializa 'segundos'
 19e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <segundos>
            minutos++;                //incrementa 'minutos'
 1a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minutos>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <minutos>
            if(minutos == 60)         //se passou uma hora?...
 1ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minutos>
 1b0:	8c 33       	cpi	r24, 0x3C	; 60
 1b2:	89 f4       	brne	.+34     	; 0x1d6 <__vector_5+0x64>
            {
                minutos = 0;          //reinicializa 'minutos'
 1b4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <minutos>
                horas++;              //incrementa 'horas'
 1b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <horas>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <horas>
                if(horas == 24)       //se passou um dia?...
 1c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <horas>
 1c6:	88 31       	cpi	r24, 0x18	; 24
 1c8:	31 f4       	brne	.+12     	; 0x1d6 <__vector_5+0x64>
                {
                    horas = 0;        //reinicializa 'horas'
 1ca:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <horas>
                    minutos = 0;      //reinicializa 'minutos'
 1ce:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <minutos>
                    segundos = 0;     //reinicializa 'segundos'
 1d2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <segundos>
                }
            }
        }
        captura = 0;                  //reinicializa 'captura'
 1d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <captura.1939>
    }  
}
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_9>:

ISR(TIMER2_OVF_vect) //implementação da rotina de tratamento do estouro do TCNT2
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	2f 93       	push	r18
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
    static unsigned char disp = 0; //variável auxiliar de acionamento dos displays
    TCNT2 = 212;                   //reinicia o registrador do TC2
 1fe:	84 ed       	ldi	r24, 0xD4	; 212
 200:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    PORTC &= 0xC0;                 //desabilita todos os display
 204:	88 b1       	in	r24, 0x08	; 8
 206:	80 7c       	andi	r24, 0xC0	; 192
 208:	88 b9       	out	0x08, r24	; 8
    if(disp == 0)      PORTB = pgm_read_byte(&display[segundos % 10]); //carrega a unidade dos segundos
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20e:	81 11       	cpse	r24, r1
 210:	03 c0       	rjmp	.+6      	; 0x218 <__vector_9+0x32>
 212:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <segundos>
 216:	13 c0       	rjmp	.+38     	; 0x23e <__vector_9+0x58>
    else if(disp == 1) PORTB = pgm_read_byte(&display[segundos / 10]); //carrega a dezena dos segundos
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	19 f4       	brne	.+6      	; 0x222 <__vector_9+0x3c>
 21c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <segundos>
 220:	17 c0       	rjmp	.+46     	; 0x250 <__vector_9+0x6a>
    else if(disp == 2) PORTB = pgm_read_byte(&display[minutos % 10]);  //carrega a unidade dos minutos
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	19 f4       	brne	.+6      	; 0x22c <__vector_9+0x46>
 226:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minutos>
 22a:	09 c0       	rjmp	.+18     	; 0x23e <__vector_9+0x58>
    else if(disp == 3) PORTB = pgm_read_byte(&display[minutos / 10]);  //carrega a dezena dos minutos
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	19 f4       	brne	.+6      	; 0x236 <__vector_9+0x50>
 230:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minutos>
 234:	0d c0       	rjmp	.+26     	; 0x250 <__vector_9+0x6a>
    else if(disp == 4) PORTB = pgm_read_byte(&display[horas % 10]);    //carrega a unidade das horas
 236:	84 30       	cpi	r24, 0x04	; 4
 238:	39 f4       	brne	.+14     	; 0x248 <__vector_9+0x62>
 23a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <horas>
 23e:	6a e0       	ldi	r22, 0x0A	; 10
 240:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodqi4>
 244:	e9 2f       	mov	r30, r25
 246:	08 c0       	rjmp	.+16     	; 0x258 <__vector_9+0x72>
    else if(disp == 5) PORTB = pgm_read_byte(&display[horas / 10]);    //carrega a dezena das horas
 248:	85 30       	cpi	r24, 0x05	; 5
 24a:	59 f4       	brne	.+22     	; 0x262 <__vector_9+0x7c>
 24c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <horas>
 250:	6a e0       	ldi	r22, 0x0A	; 10
 252:	0e 94 c1 01 	call	0x382	; 0x382 <__udivmodqi4>
 256:	e8 2f       	mov	r30, r24
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e8 59       	subi	r30, 0x98	; 152
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	e4 91       	lpm	r30, Z
 260:	e5 b9       	out	0x05, r30	; 5
    if(disp == 4 || disp == 2) set_bit(PORTC, PC6);                    //separador das horas dos minutos e dos minutos dos segundos
 262:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 266:	84 30       	cpi	r24, 0x04	; 4
 268:	11 f0       	breq	.+4      	; 0x26e <__vector_9+0x88>
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	11 f4       	brne	.+4      	; 0x272 <__vector_9+0x8c>
 26e:	46 9a       	sbi	0x08, 6	; 8
 270:	01 c0       	rjmp	.+2      	; 0x274 <__vector_9+0x8e>
    else clr_bit(PORTC, PC6);
 272:	46 98       	cbi	0x08, 6	; 8
	set_bit(PORTC, disp);          //habilita o display 'disp'
 274:	28 b1       	in	r18, 0x08	; 8
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	02 c0       	rjmp	.+4      	; 0x284 <__vector_9+0x9e>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <__vector_9+0x9a>
 288:	82 2b       	or	r24, r18
 28a:	88 b9       	out	0x08, r24	; 8
    disp++;                        //passa para o próximo display que será habilitado
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 290:	8f 5f       	subi	r24, 0xFF	; 255
    if(disp == 6) disp = 0;        //se o número de displays for excedido, volta para o primeiro
 292:	86 30       	cpi	r24, 0x06	; 6
 294:	19 f0       	breq	.+6      	; 0x29c <__vector_9+0xb6>
    else if(disp == 4) PORTB = pgm_read_byte(&display[horas % 10]);    //carrega a unidade das horas
    else if(disp == 5) PORTB = pgm_read_byte(&display[horas / 10]);    //carrega a dezena das horas
    if(disp == 4 || disp == 2) set_bit(PORTC, PC6);                    //separador das horas dos minutos e dos minutos dos segundos
    else clr_bit(PORTC, PC6);
	set_bit(PORTC, disp);          //habilita o display 'disp'
    disp++;                        //passa para o próximo display que será habilitado
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__vector_9+0xba>
    if(disp == 6) disp = 0;        //se o número de displays for excedido, volta para o primeiro
 29c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <Inicializa_TC0>:
	else
	{
		TCCR1A |= ((_TC1_OCAB_N & 0xF0) | (_TC1_modo & 0x03));
		TCCR1B |= (((_TC1_modo << 1) & 0x18) | (_TC1_OCAB_N & 0x07));
	}
	TIMSK1 |= ~(_TC1_INT);
 2b8:	14 bc       	out	0x24, r1	; 36
 2ba:	15 bc       	out	0x25, r1	; 37
 2bc:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2c0:	97 7f       	andi	r25, 0xF7	; 247
 2c2:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2c6:	36 2f       	mov	r19, r22
 2c8:	37 70       	andi	r19, 0x07	; 7
 2ca:	88 23       	and	r24, r24
 2cc:	49 f0       	breq	.+18     	; 0x2e0 <Inicializa_TC0+0x28>
 2ce:	60 7f       	andi	r22, 0xF0	; 240
 2d0:	98 2f       	mov	r25, r24
 2d2:	93 70       	andi	r25, 0x03	; 3
 2d4:	85 30       	cpi	r24, 0x05	; 5
 2d6:	40 f4       	brcc	.+16     	; 0x2e8 <Inicializa_TC0+0x30>
 2d8:	84 b5       	in	r24, 0x24	; 36
 2da:	68 2b       	or	r22, r24
 2dc:	96 2b       	or	r25, r22
 2de:	94 bd       	out	0x24, r25	; 36
 2e0:	95 b5       	in	r25, 0x25	; 37
 2e2:	93 2b       	or	r25, r19
 2e4:	95 bd       	out	0x25, r25	; 37
 2e6:	0b c0       	rjmp	.+22     	; 0x2fe <Inicializa_TC0+0x46>
 2e8:	24 b5       	in	r18, 0x24	; 36
 2ea:	62 2b       	or	r22, r18
 2ec:	96 2b       	or	r25, r22
 2ee:	94 bd       	out	0x24, r25	; 36
 2f0:	25 b5       	in	r18, 0x25	; 37
 2f2:	88 0f       	add	r24, r24
 2f4:	88 70       	andi	r24, 0x08	; 8
 2f6:	93 2f       	mov	r25, r19
 2f8:	92 2b       	or	r25, r18
 2fa:	89 2b       	or	r24, r25
 2fc:	85 bd       	out	0x25, r24	; 37
 2fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 302:	40 95       	com	r20
 304:	48 2b       	or	r20, r24
 306:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 30a:	08 95       	ret

0000030c <Inicializa_TC2>:
 * - _TC2_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC2_INT:    configura as interrupções
 */
void Inicializa_TC2(unsigned char _TC2_modo, unsigned char _TC2_OCAB_N, unsigned char _TC2_INT)
{
	TCCR2A = 0x00;
 30c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0x00;
 310:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	ASSR = 0x00;
 314:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
	TIMSK2 &= 0xF7;
 318:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 31c:	97 7f       	andi	r25, 0xF7	; 247
 31e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 322:	96 2f       	mov	r25, r22
 324:	97 70       	andi	r25, 0x07	; 7
	if(_TC2_modo == 0) TCCR2B |= (_TC2_OCAB_N & 0x07);
 326:	88 23       	and	r24, r24
 328:	01 f1       	breq	.+64     	; 0x36a <Inicializa_TC2+0x5e>
 32a:	60 7f       	andi	r22, 0xF0	; 240
	else if(_TC2_modo < 5)
 32c:	85 30       	cpi	r24, 0x05	; 5
 32e:	40 f4       	brcc	.+16     	; 0x340 <Inicializa_TC2+0x34>
	{		
		TCCR2A |= ((_TC2_OCAB_N & 0xF0) | (_TC2_modo & 0x03));
 330:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 334:	62 2b       	or	r22, r18
 336:	83 70       	andi	r24, 0x03	; 3
 338:	86 2b       	or	r24, r22
 33a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 33e:	15 c0       	rjmp	.+42     	; 0x36a <Inicializa_TC2+0x5e>
		TCCR2B |= (_TC2_OCAB_N & 0x07);
	}
	else if(_TC2_modo < 8)
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	58 f4       	brcc	.+22     	; 0x35a <Inicializa_TC2+0x4e>
	{
		TCCR2A |= ((_TC2_OCAB_N & 0xF0) | (_TC2_modo & 0x03));
 344:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 348:	62 2b       	or	r22, r18
 34a:	83 70       	andi	r24, 0x03	; 3
 34c:	86 2b       	or	r24, r22
 34e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
		TCCR2B |= (((_TC2_modo << 1) & 0x08) | (_TC2_OCAB_N & 0x07));
 352:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 356:	88 60       	ori	r24, 0x08	; 8
 358:	0a c0       	rjmp	.+20     	; 0x36e <Inicializa_TC2+0x62>
		
	}
	else
	{
	    ASSR = 1 << AS2;
 35a:	80 e2       	ldi	r24, 0x20	; 32
 35c:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
	    TCCR2A |= (_TC2_OCAB_N & 0xF0);
 360:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 364:	68 2b       	or	r22, r24
 366:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	    TCCR2B |= (_TC2_OCAB_N & 0x07);
 36a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 36e:	98 2b       	or	r25, r24
 370:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	}
	TIMSK2 |= ~(_TC2_INT);
 374:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 378:	40 95       	com	r20
 37a:	48 2b       	or	r20, r24
 37c:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 380:	08 95       	ret

00000382 <__udivmodqi4>:
 382:	99 1b       	sub	r25, r25
 384:	79 e0       	ldi	r23, 0x09	; 9
 386:	04 c0       	rjmp	.+8      	; 0x390 <__udivmodqi4_ep>

00000388 <__udivmodqi4_loop>:
 388:	99 1f       	adc	r25, r25
 38a:	96 17       	cp	r25, r22
 38c:	08 f0       	brcs	.+2      	; 0x390 <__udivmodqi4_ep>
 38e:	96 1b       	sub	r25, r22

00000390 <__udivmodqi4_ep>:
 390:	88 1f       	adc	r24, r24
 392:	7a 95       	dec	r23
 394:	c9 f7       	brne	.-14     	; 0x388 <__udivmodqi4_loop>
 396:	80 95       	com	r24
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
