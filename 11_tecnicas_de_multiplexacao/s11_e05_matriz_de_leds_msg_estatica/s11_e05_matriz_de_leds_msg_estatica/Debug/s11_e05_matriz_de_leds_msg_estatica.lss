
s11_e05_matriz_de_leds_msg_estatica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000944  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000714  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
   8:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
   c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  10:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  14:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  18:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  1c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  20:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  24:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  28:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  2c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  30:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  34:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  38:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  3c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  40:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  44:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  48:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  4c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  50:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  54:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  58:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  5c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  60:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
  64:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	80 40       	sbci	r24, 0x00	; 0
  6a:	20 10       	cpse	r2, r0
  6c:	08 04       	cpc	r0, r8
  6e:	02 01       	movw	r0, r4

00000070 <_tabela_ASCII>:
	...
  78:	18 3c 3c 18 18 00 18 00 36 36 36 00 00 00 00 00     .<<.....666.....
  88:	6c 6c fe 6c fe 6c 6c 00 30 7c c0 78 0c f8 30 00     ll.l.ll.0|.x..0.
  98:	00 c6 cc 18 30 66 c6 00 38 6c 38 76 dc cc 76 00     ....0f..8l8v..v.
  a8:	60 60 c0 00 00 00 00 00 18 30 60 60 60 30 18 00     ``.......0```0..
  b8:	60 30 18 18 18 30 60 00 00 66 3c ff 3c 66 00 00     `0...0`..f<.<f..
  c8:	00 30 30 fc 30 30 00 00 00 00 00 00 00 30 30 60     .00.00.......00`
  d8:	00 00 00 fc 00 00 00 00 00 00 00 00 00 30 30 00     .............00.
  e8:	06 0c 18 30 60 c0 80 00 7c c6 ce de f6 e6 7c 00     ...0`...|.....|.
  f8:	30 70 30 30 30 30 fc 00 78 cc 0c 38 60 cc fc 00     0p0000..x..8`...
 108:	78 cc 0c 38 0c cc 78 00 1c 3c 6c cc fe 0c 1e 00     x..8..x..<l.....
 118:	fc c0 f8 0c 0c cc 78 00 38 60 c0 f8 cc cc 78 00     ......x.8`....x.
 128:	fc cc 0c 18 30 30 30 00 78 cc cc 78 cc cc 78 00     ....000.x..x..x.
 138:	78 cc cc 7c 0c 18 70 00 00 30 30 00 00 30 30 00     x..|..p..00..00.
 148:	00 30 30 00 00 30 30 60 18 30 60 c0 60 30 18 00     .00..00`.0`.`0..
 158:	00 00 fc 00 00 fc 00 00 60 30 18 0c 18 30 60 00     ........`0...0`.
 168:	78 cc 0c 18 30 00 30 00 7c c6 de de de c0 78 00     x...0.0.|.....x.
 178:	30 78 cc cc fc cc cc 00 fc 66 66 7c 66 66 fc 00     0x.......ff|ff..
 188:	3c 66 c0 c0 c0 66 3c 00 f8 6c 66 66 66 6c f8 00     <f...f<..lfffl..
 198:	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00     .bhxhb...bhxh`..
 1a8:	3c 66 c0 c0 ce 66 3e 00 cc cc cc fc cc cc cc 00     <f...f>.........
 1b8:	78 30 30 30 30 30 78 00 1e 0c 0c 0c cc cc 78 00     x00000x.......x.
 1c8:	e6 66 6c 78 6c 66 e6 00 f0 60 60 60 62 66 fe 00     .flxlf...```bf..
 1d8:	c6 ee fe fe d6 c6 c6 00 c6 e6 f6 de ce c6 c6 00     ................
 1e8:	38 6c c6 c6 c6 6c 38 00 fc 66 66 7c 60 60 f0 00     8l...l8..ff|``..
 1f8:	78 cc cc cc dc 78 1c 00 fc 66 66 7c 6c 66 e6 00     x....x...ff|lf..
 208:	78 cc e0 70 1c cc 78 00 fc b4 30 30 30 30 78 00     x..p..x...0000x.
 218:	cc cc cc cc cc cc fc 00 cc cc cc cc cc 78 30 00     .............x0.
 228:	c6 c6 c6 d6 fe ee c6 00 c6 c6 6c 38 38 6c c6 00     ..........l88l..
 238:	cc cc cc 78 30 30 78 00 fe c6 8c 18 32 66 fe 00     ...x00x.....2f..
 248:	78 60 60 60 60 60 78 00 c0 60 30 18 0c 06 02 00     x`````x..`0.....
 258:	78 18 18 18 18 18 78 00 10 38 6c c6 00 00 00 00     x.....x..8l.....
 268:	00 00 00 00 00 00 00 7e 30 30 18 00 00 00 00 00     .......~00......
 278:	00 00 78 0c 7c cc 76 00 e0 60 60 7c 66 66 dc 00     ..x.|.v..``|ff..
 288:	00 00 78 cc c0 cc 78 00 1c 0c 0c 7c cc cc 76 00     ..x...x....|..v.
 298:	00 00 78 cc fc c0 78 00 38 6c 60 f0 60 60 f0 00     ..x...x.8l`.``..
 2a8:	00 00 76 cc cc 7c 0c f8 e0 60 6c 76 66 66 e6 00     ..v..|...`lvff..
 2b8:	30 00 70 30 30 30 78 00 0c 00 0c 0c 0c cc cc 78     0.p000x........x
 2c8:	e0 60 66 6c 78 6c e6 00 70 30 30 30 30 30 78 00     .`flxl..p00000x.
 2d8:	00 00 cc fe fe d6 c6 00 00 00 f8 cc cc cc cc 00     ................
 2e8:	00 00 78 cc cc cc 78 00 00 00 dc 66 66 7c 60 f0     ..x...x....ff|`.
 2f8:	00 00 76 cc cc 7c 0c 1e 00 00 dc 76 66 60 f0 00     ..v..|.....vf`..
 308:	00 00 7c c0 78 0c f8 00 10 30 7c 30 30 34 18 00     ..|.x....0|004..
 318:	00 00 cc cc cc cc 76 00 00 00 cc cc cc 78 30 00     ......v......x0.
 328:	00 00 c6 d6 fe fe 6c 00 00 00 c6 6c 38 6c c6 00     ......l....l8l..
 338:	00 00 cc cc cc 7c 0c f8 00 00 fc 98 30 64 fc 00     .....|......0d..
 348:	1c 30 30 e0 30 30 1c 00 18 18 18 18 18 18 18 00     .00.00..........
 358:	e0 30 30 1c 30 30 e0 00 76 dc 00 00 00 00 00 00     .00.00..v.......

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d8 e0       	ldi	r29, 0x08	; 8
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61
 374:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
 378:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

0000037c <__bad_interrupt>:
 37c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000380 <serial_paralelo>:
	}
}

void serial_paralelo(char byte) //implementação de função de conversão serial-paralelo
{
	unsigned char bit = 8;      //declaração de variável auxiliar para enviar um byte de dados
 380:	98 e0       	ldi	r25, 0x08	; 8
	do
	{
		bit--;                  //próximo bit
 382:	91 50       	subi	r25, 0x01	; 1
		if(tst_bit(byte, bit)) clr_bit(PORTB, D); //se o bit for '1', seta o pino 'D'
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	09 2e       	mov	r0, r25
 38a:	02 c0       	rjmp	.+4      	; 0x390 <serial_paralelo+0x10>
 38c:	35 95       	asr	r19
 38e:	27 95       	ror	r18
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <serial_paralelo+0xc>
 394:	20 ff       	sbrs	r18, 0
 396:	04 c0       	rjmp	.+8      	; 0x3a0 <serial_paralelo+0x20>
 398:	25 b1       	in	r18, 0x05	; 5
 39a:	2d 7f       	andi	r18, 0xFD	; 253
 39c:	25 b9       	out	0x05, r18	; 5
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <serial_paralelo+0x26>
		else                   set_bit(PORTB, D); //se não, limpa o pino 'D'
 3a0:	25 b1       	in	r18, 0x05	; 5
 3a2:	22 60       	ori	r18, 0x02	; 2
 3a4:	25 b9       	out	0x05, r18	; 5
		pulso_clock();          //pulso de clock para enviar o bit atual
 3a6:	25 b1       	in	r18, 0x05	; 5
 3a8:	21 60       	ori	r18, 0x01	; 1
 3aa:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	25 e3       	ldi	r18, 0x35	; 53
 3ae:	2a 95       	dec	r18
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <serial_paralelo+0x2e>
 3b2:	00 00       	nop
 3b4:	25 b1       	in	r18, 0x05	; 5
 3b6:	2e 7f       	andi	r18, 0xFE	; 254
 3b8:	25 b9       	out	0x05, r18	; 5
	}while(bit != 0);           //os oito bits foram enviados...
 3ba:	91 11       	cpse	r25, r1
 3bc:	e2 cf       	rjmp	.-60     	; 0x382 <serial_paralelo+0x2>
}
 3be:	08 95       	ret

000003c0 <main>:

void serial_paralelo(char byte); //declaração de função de conversão serial-paralelo

int main() //função principal
{
	DDRB = 0xFF;  //configura todo o PORTB como saída
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //inicializa o PORTB em nível baixo
 3c4:	15 b8       	out	0x05, r1	; 5

	while(1) //loop infinito
	{
		for(unsigned char linha = 0; linha < 8; linha++)                         //varre as linhas
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	2b c0       	rjmp	.+86     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		{
			serial_paralelo(pgm_read_byte(&(_tabela_ASCII['A' - 0x20][linha]))); //envia um byte para a função de conversão serial-paralelo
 3ca:	c1 2f       	mov	r28, r17
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	fe 01       	movw	r30, r28
 3d0:	e8 58       	subi	r30, 0x88	; 136
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	84 91       	lpm	r24, Z
 3d6:	0e 94 c0 01 	call	0x380	; 0x380 <serial_paralelo>
			serial_paralelo(pgm_read_byte(&(_tabela_ASCII['V' - 0x20][linha]))); //envia um byte para a função de conversão serial-paralelo
 3da:	fe 01       	movw	r30, r28
 3dc:	e0 5e       	subi	r30, 0xE0	; 224
 3de:	fd 4f       	sbci	r31, 0xFD	; 253
 3e0:	84 91       	lpm	r24, Z
 3e2:	0e 94 c0 01 	call	0x380	; 0x380 <serial_paralelo>
			serial_paralelo(pgm_read_byte(&(_tabela_ASCII['R' - 0x20][linha]))); //envia um byte para a função de conversão serial-paralelo
 3e6:	fe 01       	movw	r30, r28
 3e8:	e0 50       	subi	r30, 0x00	; 0
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	84 91       	lpm	r24, Z
 3ee:	0e 94 c0 01 	call	0x380	; 0x380 <serial_paralelo>
			serial_paralelo(pgm_read_byte(&(_aciona_transistor[linha])));        //habilita o transistor
 3f2:	fe 01       	movw	r30, r28
 3f4:	e8 59       	subi	r30, 0x98	; 152
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	84 91       	lpm	r24, Z
 3fa:	0e 94 c0 01 	call	0x380	; 0x380 <serial_paralelo>
			pulso_strobe();                                                      //pulso de strobe para carregar os 4 bytes nos 74HC595
 3fe:	85 b1       	in	r24, 0x05	; 5
 400:	84 60       	ori	r24, 0x04	; 4
 402:	85 b9       	out	0x05, r24	; 5
 404:	85 e3       	ldi	r24, 0x35	; 53
 406:	8a 95       	dec	r24
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 00       	nop
 40c:	85 b1       	in	r24, 0x05	; 5
 40e:	8b 7f       	andi	r24, 0xFB	; 251
 410:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 412:	8f e3       	ldi	r24, 0x3F	; 63
 414:	9f e1       	ldi	r25, 0x1F	; 31
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
	DDRB = 0xFF;  //configura todo o PORTB como saída
	PORTB = 0x00; //inicializa o PORTB em nível baixo

	while(1) //loop infinito
	{
		for(unsigned char linha = 0; linha < 8; linha++)                         //varre as linhas
 41e:	1f 5f       	subi	r17, 0xFF	; 255
 420:	18 30       	cpi	r17, 0x08	; 8
 422:	98 f2       	brcs	.-90     	; 0x3ca <main+0xa>
 424:	d0 cf       	rjmp	.-96     	; 0x3c6 <main+0x6>

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
