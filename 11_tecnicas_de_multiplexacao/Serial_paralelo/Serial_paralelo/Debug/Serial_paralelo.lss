
Serial_paralelo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ab  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d5  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  0000176f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <serial_paral>:
//----------------------------------------------------------------------------------
// Sub-rotina que envia 1 byte para o 4094 - serial/paralelo
//----------------------------------------------------------------------------------
void serial_paral(unsigned char c)
{
	unsigned char i = 8; //envia primeiro o MSB
  80:	98 e0       	ldi	r25, 0x08	; 8
	do
	{ i--;
  82:	91 50       	subi	r25, 0x01	; 1
		if(tst_bit(c, i)) //se o bit for 1, ativa o pino de DADOS
  84:	28 2f       	mov	r18, r24
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	09 2e       	mov	r0, r25
  8a:	02 c0       	rjmp	.+4      	; 0x90 <serial_paral+0x10>
  8c:	35 95       	asr	r19
  8e:	27 95       	ror	r18
  90:	0a 94       	dec	r0
  92:	e2 f7       	brpl	.-8      	; 0x8c <serial_paral+0xc>
  94:	20 ff       	sbrs	r18, 0
  96:	04 c0       	rjmp	.+8      	; 0xa0 <serial_paral+0x20>
		    set_bit(PORTB, D);
  98:	25 b1       	in	r18, 0x05	; 5
  9a:	21 60       	ori	r18, 0x01	; 1
  9c:	25 b9       	out	0x05, r18	; 5
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <serial_paral+0x26>
		else //se não, o zera
		    clr_bit(PORTB, D);
  a0:	25 b1       	in	r18, 0x05	; 5
  a2:	2e 7f       	andi	r18, 0xFE	; 254
  a4:	25 b9       	out	0x05, r18	; 5
		pulso_CLK();
  a6:	25 b1       	in	r18, 0x05	; 5
  a8:	22 60       	ori	r18, 0x02	; 2
  aa:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	25 e3       	ldi	r18, 0x35	; 53
  ae:	2a 95       	dec	r18
  b0:	f1 f7       	brne	.-4      	; 0xae <serial_paral+0x2e>
  b2:	00 00       	nop
  b4:	25 b1       	in	r18, 0x05	; 5
  b6:	2d 7f       	andi	r18, 0xFD	; 253
  b8:	25 b9       	out	0x05, r18	; 5
	} while(i != 0);
  ba:	91 11       	cpse	r25, r1
  bc:	e2 cf       	rjmp	.-60     	; 0x82 <serial_paral+0x2>
}
  be:	08 95       	ret

000000c0 <main>:
//----------------------------------------------------------------------------------
int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <main+0x6>
  c6:	1f 92       	push	r1
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
	unsigned char j;
	unsigned char Dados[3] = {0x58, 0xF1, 0xAA};
  cc:	88 e5       	ldi	r24, 0x58	; 88
  ce:	89 83       	std	Y+1, r24	; 0x01
  d0:	81 ef       	ldi	r24, 0xF1	; 241
  d2:	8a 83       	std	Y+2, r24	; 0x02
  d4:	8a ea       	ldi	r24, 0xAA	; 170
  d6:	8b 83       	std	Y+3, r24	; 0x03
		
	DDRB = 0b00000111;  //pinos PB0:2 como saídas
  d8:	87 e0       	ldi	r24, 0x07	; 7
  da:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11111000; //zera saídas
  dc:	88 ef       	ldi	r24, 0xF8	; 248
  de:	85 b9       	out	0x05, r24	; 5
	for(j = 0; j < 3; j++)
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	0a c0       	rjmp	.+20     	; 0xf8 <main+0x38>
	    serial_paral(Dados[j]); //envia os 3 dados para os 4094 (primeiro o 0x58)
  e4:	e1 e0       	ldi	r30, 0x01	; 1
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	e1 0f       	add	r30, r17
  ee:	f1 1d       	adc	r31, r1
  f0:	80 81       	ld	r24, Z
  f2:	0e 94 40 00 	call	0x80	; 0x80 <serial_paral>
	unsigned char j;
	unsigned char Dados[3] = {0x58, 0xF1, 0xAA};
		
	DDRB = 0b00000111;  //pinos PB0:2 como saídas
	PORTB = 0b11111000; //zera saídas
	for(j = 0; j < 3; j++)
  f6:	1f 5f       	subi	r17, 0xFF	; 255
  f8:	13 30       	cpi	r17, 0x03	; 3
  fa:	a0 f3       	brcs	.-24     	; 0xe4 <main+0x24>
	    serial_paral(Dados[j]); //envia os 3 dados para os 4094 (primeiro o 0x58)
	pulso_STB(); /*depois de enviar os 3 dados dá o pulso de Strobe, neste instante os
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	85 b9       	out	0x05, r24	; 5
 102:	85 e3       	ldi	r24, 0x35	; 53
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x44>
 108:	00 00       	nop
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	85 b9       	out	0x05, r24	; 5
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x50>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
