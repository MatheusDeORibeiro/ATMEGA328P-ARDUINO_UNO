
s11_e01_sequencial_leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000015c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000826  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000225  00000000  00000000  00001a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

ISR(TIMER0_OVF_vect); //declaração da rotina de tratamento do estouro do TCNT0

int main(void) //função principal
{
    DDRD = 0xFF;  //define todo o PORTD como saída
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x00; //inicializa todos os pinos do PORTD em nível baixo
  aa:	1b b8       	out	0x0b, r1	; 11

    UCSR0B = 0x00; //configura os pinos PD0 e PD1 como I/Os digitais
  ac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    Inicializa_TC0(TC0_modo_normal, TC0_OC0A_normal&TC0_OC0B_normal&TC0_CLK_1024, TC0_TOIE0);
  b0:	4e ef       	ldi	r20, 0xFE	; 254
  b2:	6d e0       	ldi	r22, 0x0D	; 13
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 82 00 	call	0x104	; 0x104 <Inicializa_TC0>
    /* modo normal, f_osc igual a 16MH, prescaler igual a 1024, saídas comparadoras desabilitadas
       interrupção por estouro do TCNT0 habilitada */
    sei(); //habilita todas a fontes de interrupção setando o bit I do registrador SREG
  ba:	78 94       	sei
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x16>

000000be <__vector_16>:

    while(1); //loop infinito
}

ISR(TIMER0_OVF_vect) //declaração da rotina de tratamento do estouro do TCNT0
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
    static unsigned char seq_leds = 0x01;  //variável auxiliar para rotacionar os leds
    static unsigned char cont_freq = 0x00; //variável auxiliar para controle da frequência
    TCNT0 = cont_freq;                     //atualiza o valor da frequência
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ce:	86 bd       	out	0x26, r24	; 38
    PORTD = seq_leds;                      //atualiza o PORTD
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  d4:	8b b9       	out	0x0b, r24	; 11
    seq_leds <<= 1;                        //rotaciona os leds
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  da:	88 0f       	add	r24, r24
    if(seq_leds == 0x00)
  dc:	19 f0       	breq	.+6      	; 0xe4 <__vector_16+0x26>
{
    static unsigned char seq_leds = 0x01;  //variável auxiliar para rotacionar os leds
    static unsigned char cont_freq = 0x00; //variável auxiliar para controle da frequência
    TCNT0 = cont_freq;                     //atualiza o valor da frequência
    PORTD = seq_leds;                      //atualiza o PORTD
    seq_leds <<= 1;                        //rotaciona os leds
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e2:	0a c0       	rjmp	.+20     	; 0xf8 <__vector_16+0x3a>
    if(seq_leds == 0x00)
    {
	    seq_leds = 0x01;                     //reinicializa a variável auxiliar
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	    if(cont_freq < 250) cont_freq += 10; //aumenta a frequência visível
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ee:	8a 3f       	cpi	r24, 0xFA	; 250
  f0:	18 f4       	brcc	.+6      	; 0xf8 <__vector_16+0x3a>
  f2:	86 5f       	subi	r24, 0xF6	; 246
  f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
    }
}
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <Inicializa_TC0>:
 * - _TC0_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC0_INT:    configura as interrupções
 */
void Inicializa_TC0(unsigned char _TC0_modo, unsigned char _TC0_OCAB_N, unsigned char _TC0_INT)
{
	TCCR0A = 0x00;
 104:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 106:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= 0xF7;
 108:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 10c:	97 7f       	andi	r25, 0xF7	; 247
 10e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 112:	36 2f       	mov	r19, r22
 114:	37 70       	andi	r19, 0x07	; 7
	if(_TC0_modo == 0) TCCR0B |= (_TC0_OCAB_N & 0x07);
 116:	88 23       	and	r24, r24
 118:	49 f0       	breq	.+18     	; 0x12c <Inicializa_TC0+0x28>
 11a:	60 7f       	andi	r22, 0xF0	; 240
 11c:	98 2f       	mov	r25, r24
 11e:	93 70       	andi	r25, 0x03	; 3
	else if(_TC0_modo < 5)
 120:	85 30       	cpi	r24, 0x05	; 5
 122:	40 f4       	brcc	.+16     	; 0x134 <Inicializa_TC0+0x30>
	{		
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 124:	84 b5       	in	r24, 0x24	; 36
 126:	68 2b       	or	r22, r24
 128:	96 2b       	or	r25, r22
 12a:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (_TC0_OCAB_N & 0x07);
 12c:	95 b5       	in	r25, 0x25	; 37
 12e:	93 2b       	or	r25, r19
 130:	95 bd       	out	0x25, r25	; 37
 132:	0b c0       	rjmp	.+22     	; 0x14a <Inicializa_TC0+0x46>
	}
	else
	{
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 134:	24 b5       	in	r18, 0x24	; 36
 136:	62 2b       	or	r22, r18
 138:	96 2b       	or	r25, r22
 13a:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (((_TC0_modo << 1) & 0x08) | (_TC0_OCAB_N & 0x07));
 13c:	25 b5       	in	r18, 0x25	; 37
 13e:	88 0f       	add	r24, r24
 140:	88 70       	andi	r24, 0x08	; 8
 142:	93 2f       	mov	r25, r19
 144:	92 2b       	or	r25, r18
 146:	89 2b       	or	r24, r25
 148:	85 bd       	out	0x25, r24	; 37
		
	}
	TIMSK0 |= ~(_TC0_INT);
 14a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 14e:	40 95       	com	r20
 150:	48 2b       	or	r20, r24
 152:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 156:	08 95       	ret

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
