
Varredura_display_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ce  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000642  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000261  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
unsigned char DISP[4]; //valores para os displays
//---------------------------------------------------------------------------------
//INTERRUPCAO - VARREDURA DOS DISPLAYS DE 7 SEGMENTOS
//---------------------------------------------------------------------------------
ISR(TIMER0_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	static unsigned char x;
	
	PORTB &= 0xF0;     //apaga todos os displays (o controle dos displays está nos pinos (PB0:PB3)
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	85 b9       	out	0x05, r24	; 5
	PORTD = DISP[x];   //coloca a informação do display no porta correspondente
  aa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	ef 5f       	subi	r30, 0xFF	; 255
  b2:	fe 4f       	sbci	r31, 0xFE	; 254
  b4:	80 81       	ld	r24, Z
  b6:	8b b9       	out	0x0b, r24	; 11
	set_bit(PORTB, x); //habilita o display correspondente (PB0:PB3)
  b8:	25 b1       	in	r18, 0x05	; 5
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__vector_16+0x38>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <__vector_16+0x34>
  cc:	82 2b       	or	r24, r18
  ce:	85 b9       	out	0x05, r24	; 5
	x++;
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(x == 4) x = 0;  //após 4 rotações inicializa para o primeiro display
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	11 f4       	brne	.+4      	; 0xe2 <__vector_16+0x52>
  de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  e2:	ff 91       	pop	r31
  e4:	ef 91       	pop	r30
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <main>:
//---------------------------------------------------------------------------------
int main()
{
	DDRD = 0xFF;  //dados dos displays
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0F;  //controle dos displays
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xF0; //apaga displays e liga pull-ups
  fe:	80 ef       	ldi	r24, 0xF0	; 240
 100:	85 b9       	out	0x05, r24	; 5
	
	UCSR0B = 0x00; //para usar os pinos do PORTD no Arduino
 102:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//TC0 gerando interrupção
	TIMSK0 = 1 << TOIE0; //habilita a interrupção por estouro do timer 0
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = 1 << CS02;  //CLK/256 prescaler (CLK=16MHz), estouro a cada 4ms
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	85 bd       	out	0x25, r24	; 37
	sei();               //habilita a interrupção global
 110:	78 94       	sei
	
	while(1) //qualquer escrita em DISP[x] é automaticamente apresentada nos displays
	{
		DISP[0] = 0x3F; //valor para o número zero
 112:	e1 e0       	ldi	r30, 0x01	; 1
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	80 83       	st	Z, r24
		DISP[1] = 0x06; //valor para o número um
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	81 83       	std	Z+1, r24	; 0x01
		DISP[2] = 0x5B; //valor para o número dois
 11e:	8b e5       	ldi	r24, 0x5B	; 91
 120:	82 83       	std	Z+2, r24	; 0x02
		DISP[3] = 0x4F; //valor para o número três
 122:	8f e4       	ldi	r24, 0x4F	; 79
 124:	83 83       	std	Z+3, r24	; 0x03
 126:	f5 cf       	rjmp	.-22     	; 0x112 <main+0x1c>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
