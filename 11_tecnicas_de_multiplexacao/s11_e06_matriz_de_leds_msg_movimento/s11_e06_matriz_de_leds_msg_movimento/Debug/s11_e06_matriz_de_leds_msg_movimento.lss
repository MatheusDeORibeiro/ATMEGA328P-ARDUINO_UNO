
s11_e06_matriz_de_leds_msg_movimento.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000496  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000496  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000989  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076d  00000000  00000000  00000f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000466  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000263  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002149  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
   8:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
   c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  10:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  14:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  18:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  1c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  20:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  24:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  28:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  2c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  30:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  34:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  38:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  3c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  40:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  44:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  48:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  4c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  50:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  54:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  58:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  5c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  60:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>
  64:	0c 94 c9 01 	jmp	0x392	; 0x392 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	80 40       	sbci	r24, 0x00	; 0
  6a:	20 10       	cpse	r2, r0
  6c:	08 04       	cpc	r0, r8
  6e:	02 01       	movw	r0, r4

00000070 <_tabela_ASCII>:
	...
  78:	18 3c 3c 18 18 00 18 00 36 36 36 00 00 00 00 00     .<<.....666.....
  88:	6c 6c fe 6c fe 6c 6c 00 30 7c c0 78 0c f8 30 00     ll.l.ll.0|.x..0.
  98:	00 c6 cc 18 30 66 c6 00 38 6c 38 76 dc cc 76 00     ....0f..8l8v..v.
  a8:	60 60 c0 00 00 00 00 00 18 30 60 60 60 30 18 00     ``.......0```0..
  b8:	60 30 18 18 18 30 60 00 00 66 3c ff 3c 66 00 00     `0...0`..f<.<f..
  c8:	00 30 30 fc 30 30 00 00 00 00 00 00 00 30 30 60     .00.00.......00`
  d8:	00 00 00 fc 00 00 00 00 00 00 00 00 00 30 30 00     .............00.
  e8:	06 0c 18 30 60 c0 80 00 7c c6 ce de f6 e6 7c 00     ...0`...|.....|.
  f8:	30 70 30 30 30 30 fc 00 78 cc 0c 38 60 cc fc 00     0p0000..x..8`...
 108:	78 cc 0c 38 0c cc 78 00 1c 3c 6c cc fe 0c 1e 00     x..8..x..<l.....
 118:	fc c0 f8 0c 0c cc 78 00 38 60 c0 f8 cc cc 78 00     ......x.8`....x.
 128:	fc cc 0c 18 30 30 30 00 78 cc cc 78 cc cc 78 00     ....000.x..x..x.
 138:	78 cc cc 7c 0c 18 70 00 00 30 30 00 00 30 30 00     x..|..p..00..00.
 148:	00 30 30 00 00 30 30 60 18 30 60 c0 60 30 18 00     .00..00`.0`.`0..
 158:	00 00 fc 00 00 fc 00 00 60 30 18 0c 18 30 60 00     ........`0...0`.
 168:	78 cc 0c 18 30 00 30 00 7c c6 de de de c0 78 00     x...0.0.|.....x.
 178:	30 78 cc cc fc cc cc 00 fc 66 66 7c 66 66 fc 00     0x.......ff|ff..
 188:	3c 66 c0 c0 c0 66 3c 00 f8 6c 66 66 66 6c f8 00     <f...f<..lfffl..
 198:	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00     .bhxhb...bhxh`..
 1a8:	3c 66 c0 c0 ce 66 3e 00 cc cc cc fc cc cc cc 00     <f...f>.........
 1b8:	78 30 30 30 30 30 78 00 1e 0c 0c 0c cc cc 78 00     x00000x.......x.
 1c8:	e6 66 6c 78 6c 66 e6 00 f0 60 60 60 62 66 fe 00     .flxlf...```bf..
 1d8:	c6 ee fe fe d6 c6 c6 00 c6 e6 f6 de ce c6 c6 00     ................
 1e8:	38 6c c6 c6 c6 6c 38 00 fc 66 66 7c 60 60 f0 00     8l...l8..ff|``..
 1f8:	78 cc cc cc dc 78 1c 00 fc 66 66 7c 6c 66 e6 00     x....x...ff|lf..
 208:	78 cc e0 70 1c cc 78 00 fc b4 30 30 30 30 78 00     x..p..x...0000x.
 218:	cc cc cc cc cc cc fc 00 cc cc cc cc cc 78 30 00     .............x0.
 228:	c6 c6 c6 d6 fe ee c6 00 c6 c6 6c 38 38 6c c6 00     ..........l88l..
 238:	cc cc cc 78 30 30 78 00 fe c6 8c 18 32 66 fe 00     ...x00x.....2f..
 248:	78 60 60 60 60 60 78 00 c0 60 30 18 0c 06 02 00     x`````x..`0.....
 258:	78 18 18 18 18 18 78 00 10 38 6c c6 00 00 00 00     x.....x..8l.....
 268:	00 00 00 00 00 00 00 7e 30 30 18 00 00 00 00 00     .......~00......
 278:	00 00 78 0c 7c cc 76 00 e0 60 60 7c 66 66 dc 00     ..x.|.v..``|ff..
 288:	00 00 78 cc c0 cc 78 00 1c 0c 0c 7c cc cc 76 00     ..x...x....|..v.
 298:	00 00 78 cc fc c0 78 00 38 6c 60 f0 60 60 f0 00     ..x...x.8l`.``..
 2a8:	00 00 76 cc cc 7c 0c f8 e0 60 6c 76 66 66 e6 00     ..v..|...`lvff..
 2b8:	30 00 70 30 30 30 78 00 0c 00 0c 0c 0c cc cc 78     0.p000x........x
 2c8:	e0 60 66 6c 78 6c e6 00 70 30 30 30 30 30 78 00     .`flxl..p00000x.
 2d8:	00 00 cc fe fe d6 c6 00 00 00 f8 cc cc cc cc 00     ................
 2e8:	00 00 78 cc cc cc 78 00 00 00 dc 66 66 7c 60 f0     ..x...x....ff|`.
 2f8:	00 00 76 cc cc 7c 0c 1e 00 00 dc 76 66 60 f0 00     ..v..|.....vf`..
 308:	00 00 7c c0 78 0c f8 00 10 30 7c 30 30 34 18 00     ..|.x....0|004..
 318:	00 00 cc cc cc cc 76 00 00 00 cc cc cc 78 30 00     ......v......x0.
 328:	00 00 c6 d6 fe fe 6c 00 00 00 c6 6c 38 6c c6 00     ......l....l8l..
 338:	00 00 cc cc cc 7c 0c f8 00 00 fc 98 30 64 fc 00     .....|......0d..
 348:	1c 30 30 e0 30 30 1c 00 18 18 18 18 18 18 18 00     .00.00..........
 358:	e0 30 30 1c 30 30 e0 00 76 dc 00 00 00 00 00 00     .00.00..v.......

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d8 e0       	ldi	r29, 0x08	; 8
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e6 e9       	ldi	r30, 0x96	; 150
 37c:	f4 e0       	ldi	r31, 0x04	; 4
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	aa 30       	cpi	r26, 0x0A	; 10
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>
 38a:	0e 94 41 02 	call	0x482	; 0x482 <main>
 38e:	0c 94 49 02 	jmp	0x492	; 0x492 <_exit>

00000392 <__bad_interrupt>:
 392:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000396 <serial_paralelo>:
	}
}

void serial_paralelo(char byte) //implementação de função para conversão de um dado serial para paralelo
{
	unsigned char bit = 8;                        //declaração de variável auxiliar
 396:	98 e0       	ldi	r25, 0x08	; 8
	do
	{
		bit--;                                    //decrementa a variável auxiliar
 398:	91 50       	subi	r25, 0x01	; 1
		if(tst_bit(byte, bit)) clr_bit(PORTB, D); //seta o bit - o 74HC595 drena a corrente, assim, liga o led
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	09 2e       	mov	r0, r25
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <serial_paralelo+0x10>
 3a2:	35 95       	asr	r19
 3a4:	27 95       	ror	r18
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <serial_paralelo+0xc>
 3aa:	20 ff       	sbrs	r18, 0
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <serial_paralelo+0x20>
 3ae:	25 b1       	in	r18, 0x05	; 5
 3b0:	2d 7f       	andi	r18, 0xFD	; 253
 3b2:	25 b9       	out	0x05, r18	; 5
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <serial_paralelo+0x26>
		else                   set_bit(PORTB, D); //limpa o bit- o 74HC595 bloqueia a corrente, assim, desliga o led
 3b6:	25 b1       	in	r18, 0x05	; 5
 3b8:	22 60       	ori	r18, 0x02	; 2
 3ba:	25 b9       	out	0x05, r18	; 5
		pulso_clock();                            //pulso de clock
 3bc:	25 b1       	in	r18, 0x05	; 5
 3be:	21 60       	ori	r18, 0x01	; 1
 3c0:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	25 e3       	ldi	r18, 0x35	; 53
 3c4:	2a 95       	dec	r18
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <serial_paralelo+0x2e>
 3c8:	00 00       	nop
 3ca:	25 b1       	in	r18, 0x05	; 5
 3cc:	2e 7f       	andi	r18, 0xFE	; 254
 3ce:	25 b9       	out	0x05, r18	; 5
	}while(bit != 0);                             //envia oito bits de dados
 3d0:	91 11       	cpse	r25, r1
 3d2:	e2 cf       	rjmp	.-60     	; 0x398 <serial_paralelo+0x2>
}
 3d4:	08 95       	ret

000003d6 <escreve_mensagem>:

void escreve_mensagem(char *mensagem) //implementação de função para escrever uma mensagem em três matrizes de led
{
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	while(*(mensagem + 2))                                      //enquanto for possivel exibir 3 caracteres...
 3e2:	46 c0       	rjmp	.+140    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		for(unsigned char tempo = 0; tempo < 15; tempo++)               //exibe a mesma mensagem por um segundo
		{
			pulso_clear();                                              //limpa os pinos de todos os 74HC595(~10us)
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	87 7f       	andi	r24, 0xF7	; 247
 3e8:	85 b9       	out	0x05, r24	; 5
 3ea:	85 e3       	ldi	r24, 0x35	; 53
 3ec:	8a 95       	dec	r24
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <escreve_mensagem+0x16>
 3f0:	00 00       	nop
 3f2:	85 b1       	in	r24, 0x05	; 5
 3f4:	88 60       	ori	r24, 0x08	; 8
 3f6:	85 b9       	out	0x05, r24	; 5
			for(unsigned char linha = 0; linha < 8; linha++)            //varredura das linhas
 3f8:	00 e0       	ldi	r16, 0x00	; 0
 3fa:	30 c0       	rjmp	.+96     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			{
				for(unsigned char coluna = 0; coluna < 3; coluna++)     //varredura das colunas
				    serial_paralelo(pgm_read_byte(&_tabela_ASCII[*(mensagem + coluna) - 32][linha]));
 3fc:	fe 01       	movw	r30, r28
 3fe:	e1 0f       	add	r30, r17
 400:	f1 1d       	adc	r31, r1
 402:	e0 81       	ld	r30, Z
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	b0 97       	sbiw	r30, 0x20	; 32
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	e0 0f       	add	r30, r16
 416:	f1 1d       	adc	r31, r1
 418:	e0 59       	subi	r30, 0x90	; 144
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	84 91       	lpm	r24, Z
 41e:	0e 94 cb 01 	call	0x396	; 0x396 <serial_paralelo>
		for(unsigned char tempo = 0; tempo < 15; tempo++)               //exibe a mesma mensagem por um segundo
		{
			pulso_clear();                                              //limpa os pinos de todos os 74HC595(~10us)
			for(unsigned char linha = 0; linha < 8; linha++)            //varredura das linhas
			{
				for(unsigned char coluna = 0; coluna < 3; coluna++)     //varredura das colunas
 422:	1f 5f       	subi	r17, 0xFF	; 255
 424:	01 c0       	rjmp	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	10 e0       	ldi	r17, 0x00	; 0
 428:	13 30       	cpi	r17, 0x03	; 3
 42a:	40 f3       	brcs	.-48     	; 0x3fc <escreve_mensagem+0x26>
				    serial_paralelo(pgm_read_byte(&_tabela_ASCII[*(mensagem + coluna) - 32][linha]));
				serial_paralelo(pgm_read_byte(&_aciona_linhas[linha])); //acionamento da linha
 42c:	e0 2f       	mov	r30, r16
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	e8 59       	subi	r30, 0x98	; 152
 432:	ff 4f       	sbci	r31, 0xFF	; 255
 434:	84 91       	lpm	r24, Z
 436:	0e 94 cb 01 	call	0x396	; 0x396 <serial_paralelo>
				pulso_strobe();                                         //atualiza as saídas dos SR(~10us)
 43a:	85 b1       	in	r24, 0x05	; 5
 43c:	84 60       	ori	r24, 0x04	; 4
 43e:	85 b9       	out	0x05, r24	; 5
 440:	95 e3       	ldi	r25, 0x35	; 53
 442:	9a 95       	dec	r25
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 00       	nop
 448:	85 b1       	in	r24, 0x05	; 5
 44a:	8b 7f       	andi	r24, 0xFB	; 251
 44c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44e:	8f e3       	ldi	r24, 0x3F	; 63
 450:	9f e1       	ldi	r25, 0x1F	; 31
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 458:	00 00       	nop
	while(*(mensagem + 2))                                      //enquanto for possivel exibir 3 caracteres...
	{
		for(unsigned char tempo = 0; tempo < 15; tempo++)               //exibe a mesma mensagem por um segundo
		{
			pulso_clear();                                              //limpa os pinos de todos os 74HC595(~10us)
			for(unsigned char linha = 0; linha < 8; linha++)            //varredura das linhas
 45a:	0f 5f       	subi	r16, 0xFF	; 255
 45c:	08 30       	cpi	r16, 0x08	; 8
 45e:	18 f3       	brcs	.-58     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>

void escreve_mensagem(char *mensagem) //implementação de função para escrever uma mensagem em três matrizes de led
{
	while(*(mensagem + 2))                                      //enquanto for possivel exibir 3 caracteres...
	{
		for(unsigned char tempo = 0; tempo < 15; tempo++)               //exibe a mesma mensagem por um segundo
 460:	f3 94       	inc	r15
 462:	01 c0       	rjmp	.+2      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 464:	f1 2c       	mov	r15, r1
 466:	9e e0       	ldi	r25, 0x0E	; 14
 468:	9f 15       	cp	r25, r15
 46a:	08 f0       	brcs	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	bb cf       	rjmp	.-138    	; 0x3e4 <escreve_mensagem+0xe>
				serial_paralelo(pgm_read_byte(&_aciona_linhas[linha])); //acionamento da linha
				pulso_strobe();                                         //atualiza as saídas dos SR(~10us)
				_delay_ms(2);                                           //atraso de persistência da visão(2ms)
			}
		}
		mensagem++;                                                     //próximo caractere da mensagem
 46e:	21 96       	adiw	r28, 0x01	; 1
	}while(bit != 0);                             //envia oito bits de dados
}

void escreve_mensagem(char *mensagem) //implementação de função para escrever uma mensagem em três matrizes de led
{
	while(*(mensagem + 2))                                      //enquanto for possivel exibir 3 caracteres...
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	81 11       	cpse	r24, r1
 474:	f7 cf       	rjmp	.-18     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				_delay_ms(2);                                           //atraso de persistência da visão(2ms)
			}
		}
		mensagem++;                                                     //próximo caractere da mensagem
    }
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	08 95       	ret

00000482 <main>:
void serial_paralelo(char byte);       //declaração de função para conversão de um dado serial para paralelo
void escreve_mensagem(char *mensagem); //declaração de função para escrever uma mensagem em três matrizes de led

int main() //função principal
{
	DDRB = 0xFF;  //configura todo o PORTB como saída
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00; //inicializa todo o PORTB em nível baixo
 486:	15 b8       	out	0x05, r1	; 5

	while(1) //loop infinito
	{
		//escreve_mensagem("AVR - ATmega328p");
		//escreve_mensagem("Matriz de leds - 8 x 24");
		escreve_mensagem("{[(^~)]}");
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <escreve_mensagem>
 490:	fb cf       	rjmp	.-10     	; 0x488 <main+0x6>

00000492 <_exit>:
 492:	f8 94       	cli

00000494 <__stop_program>:
 494:	ff cf       	rjmp	.-2      	; 0x494 <__stop_program>
