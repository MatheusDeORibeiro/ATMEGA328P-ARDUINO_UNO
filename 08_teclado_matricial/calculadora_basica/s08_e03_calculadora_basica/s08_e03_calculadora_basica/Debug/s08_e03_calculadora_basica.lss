
s08_e03_calculadora_basica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000007ce  00000862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  00000870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000187b  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a94  00000000  00000000  00002243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed4  00000000  00000000  00002cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00003bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000627  00000000  00000000  00003dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001292  00000000  00000000  00004413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000056a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  9e:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Status_BF>:
		}
		Escreve_Dado(0x00);
		k += 7;         //próximo caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
	}
}
  a6:	2a 98       	cbi	0x05, 2	; 5
  a8:	29 9a       	sbi	0x05, 1	; 5
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <Status_BF+0x6>
  b0:	00 00       	nop
  b2:	28 9a       	sbi	0x05, 0	; 5
  b4:	95 e0       	ldi	r25, 0x05	; 5
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <Status_BF+0x10>
  ba:	00 00       	nop
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	28 98       	cbi	0x05, 0	; 5
  c0:	95 e0       	ldi	r25, 0x05	; 5
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <Status_BF+0x1c>
  c6:	00 00       	nop
  c8:	28 9a       	sbi	0x05, 0	; 5
  ca:	95 e0       	ldi	r25, 0x05	; 5
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <Status_BF+0x26>
  d0:	00 00       	nop
  d2:	28 98       	cbi	0x05, 0	; 5
  d4:	29 98       	cbi	0x05, 1	; 5
  d6:	83 ff       	sbrs	r24, 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <Status_BF+0x38>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	08 95       	ret
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <Pulso_Enable>:
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <Pulso_Enable+0x2>
  e8:	00 c0       	rjmp	.+0      	; 0xea <Pulso_Enable+0x8>
  ea:	28 9a       	sbi	0x05, 0	; 5
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <Pulso_Enable+0xc>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <Pulso_Enable+0x12>
  f4:	28 98       	cbi	0x05, 0	; 5
  f6:	08 95       	ret

000000f8 <Escreve_CMD>:
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	88 b1       	in	r24, 0x08	; 8
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	9c 2f       	mov	r25, r28
 102:	92 95       	swap	r25
 104:	9f 70       	andi	r25, 0x0F	; 15
 106:	89 2b       	or	r24, r25
 108:	88 b9       	out	0x08, r24	; 8
 10a:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 10e:	88 b1       	in	r24, 0x08	; 8
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	cf 70       	andi	r28, 0x0F	; 15
 114:	c8 2b       	or	r28, r24
 116:	c8 b9       	out	0x08, r28	; 8
 118:	cf 91       	pop	r28
 11a:	0c 94 71 00 	jmp	0xe2	; 0xe2 <Pulso_Enable>

0000011e <Escreve_Instrucao>:
 11e:	97 b1       	in	r25, 0x07	; 7
 120:	9f 60       	ori	r25, 0x0F	; 15
 122:	97 b9       	out	0x07, r25	; 7
 124:	2a 98       	cbi	0x05, 2	; 5
 126:	29 98       	cbi	0x05, 1	; 5
 128:	0e 94 7c 00 	call	0xf8	; 0xf8 <Escreve_CMD>
 12c:	80 ef       	ldi	r24, 0xF0	; 240
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <Escreve_Instrucao+0x10>
 132:	29 98       	cbi	0x05, 1	; 5
 134:	87 b1       	in	r24, 0x07	; 7
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	87 b9       	out	0x07, r24	; 7
 13a:	08 95       	ret

0000013c <Escreve_Dado>:
 13c:	97 b1       	in	r25, 0x07	; 7
 13e:	9f 60       	ori	r25, 0x0F	; 15
 140:	97 b9       	out	0x07, r25	; 7
 142:	2a 9a       	sbi	0x05, 2	; 5
 144:	29 98       	cbi	0x05, 1	; 5
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <Escreve_CMD>
 14a:	2a 98       	cbi	0x05, 2	; 5
 14c:	80 ef       	ldi	r24, 0xF0	; 240
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <Escreve_Dado+0x12>
 152:	87 b1       	in	r24, 0x07	; 7
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	87 b9       	out	0x07, r24	; 7
 158:	08 95       	ret

0000015a <Inicializa_LCD>:
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	00 d0       	rcall	.+0      	; 0x168 <Inicializa_LCD+0xe>
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	08 2f       	mov	r16, r24
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	ab 83       	std	Y+3, r26	; 0x03
 182:	2a 98       	cbi	0x05, 2	; 5
 184:	29 98       	cbi	0x05, 1	; 5
 186:	28 98       	cbi	0x05, 0	; 5
 188:	87 b1       	in	r24, 0x07	; 7
 18a:	8f 60       	ori	r24, 0x0F	; 15
 18c:	87 b9       	out	0x07, r24	; 7
 18e:	84 b1       	in	r24, 0x04	; 4
 190:	87 60       	ori	r24, 0x07	; 7
 192:	84 b9       	out	0x04, r24	; 4
 194:	8f e5       	ldi	r24, 0x5F	; 95
 196:	9a ee       	ldi	r25, 0xEA	; 234
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <Inicializa_LCD+0x3e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <Inicializa_LCD+0x44>
 19e:	00 00       	nop
 1a0:	13 e0       	ldi	r17, 0x03	; 3
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	83 60       	ori	r24, 0x03	; 3
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 1ae:	ef e1       	ldi	r30, 0x1F	; 31
 1b0:	fe e4       	ldi	r31, 0x4E	; 78
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <Inicializa_LCD+0x58>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <Inicializa_LCD+0x5e>
 1b8:	00 00       	nop
 1ba:	11 50       	subi	r17, 0x01	; 1
 1bc:	91 f7       	brne	.-28     	; 0x1a2 <Inicializa_LCD+0x48>
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	88 b9       	out	0x08, r24	; 8
 1c6:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 1ca:	f5 ed       	ldi	r31, 0xD5	; 213
 1cc:	fa 95       	dec	r31
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <Inicializa_LCD+0x72>
 1d0:	00 00       	nop
 1d2:	00 23       	and	r16, r16
 1d4:	11 f0       	breq	.+4      	; 0x1da <Inicializa_LCD+0x80>
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <Inicializa_LCD+0x82>
 1da:	80 e2       	ldi	r24, 0x20	; 32
 1dc:	0e 94 7c 00 	call	0xf8	; 0xf8 <Escreve_CMD>
 1e0:	8f e1       	ldi	r24, 0x1F	; 31
 1e2:	9e e4       	ldi	r25, 0x4E	; 78
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <Inicializa_LCD+0x8a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <Inicializa_LCD+0x90>
 1ea:	00 00       	nop
 1ec:	8e 01       	movw	r16, r28
 1ee:	0f 5f       	subi	r16, 0xFF	; 255
 1f0:	1f 4f       	sbci	r17, 0xFF	; 255
 1f2:	7e 01       	movw	r14, r28
 1f4:	94 e0       	ldi	r25, 0x04	; 4
 1f6:	e9 0e       	add	r14, r25
 1f8:	f1 1c       	adc	r15, r1
 1fa:	f8 01       	movw	r30, r16
 1fc:	81 91       	ld	r24, Z+
 1fe:	8f 01       	movw	r16, r30
 200:	0e 94 7c 00 	call	0xf8	; 0xf8 <Escreve_CMD>
 204:	28 98       	cbi	0x05, 0	; 5
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9f e1       	ldi	r25, 0x1F	; 31
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <Inicializa_LCD+0xb0>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <Inicializa_LCD+0xb6>
 210:	00 00       	nop
 212:	0e 15       	cp	r16, r14
 214:	1f 05       	cpc	r17, r15
 216:	89 f7       	brne	.-30     	; 0x1fa <Inicializa_LCD+0xa0>
 218:	87 b1       	in	r24, 0x07	; 7
 21a:	80 7f       	andi	r24, 0xF0	; 240
 21c:	87 b9       	out	0x07, r24	; 7
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	08 95       	ret

00000232 <Limpa_Display>:
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Instrucao>
 238:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 23c:	81 11       	cpse	r24, r1
 23e:	fc cf       	rjmp	.-8      	; 0x238 <Limpa_Display+0x6>
 240:	08 95       	ret

00000242 <Desloca_Mensagem>:
 242:	0e 94 8f 00 	call	0x11e	; 0x11e <Escreve_Instrucao>
 246:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 24a:	81 11       	cpse	r24, r1
 24c:	fc cf       	rjmp	.-8      	; 0x246 <Desloca_Mensagem+0x4>
 24e:	08 95       	ret

00000250 <Display_Cursor_ON_OFF>:
 250:	0c 94 21 01 	jmp	0x242	; 0x242 <Desloca_Mensagem>

00000254 <Posiciona_Cursor>:
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	19 f0       	breq	.+6      	; 0x25e <Posiciona_Cursor+0xa>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	29 f0       	breq	.+10     	; 0x266 <Posiciona_Cursor+0x12>
 25c:	08 95       	ret
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	86 0f       	add	r24, r22
 262:	80 68       	ori	r24, 0x80	; 128
 264:	03 c0       	rjmp	.+6      	; 0x26c <Posiciona_Cursor+0x18>
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	86 0f       	add	r24, r22
 26a:	80 6c       	ori	r24, 0xC0	; 192
 26c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <Escreve_Instrucao>

00000270 <Escreve_S_memdados>:
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	ec 01       	movw	r28, r24
 27a:	8e 01       	movw	r16, r28
 27c:	88 81       	ld	r24, Y
 27e:	88 23       	and	r24, r24
 280:	51 f0       	breq	.+20     	; 0x296 <Escreve_S_memdados+0x26>
 282:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 286:	81 11       	cpse	r24, r1
 288:	fc cf       	rjmp	.-8      	; 0x282 <Escreve_S_memdados+0x12>
 28a:	21 96       	adiw	r28, 0x01	; 1
 28c:	f8 01       	movw	r30, r16
 28e:	80 81       	ld	r24, Z
 290:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
 294:	f2 cf       	rjmp	.-28     	; 0x27a <Escreve_S_memdados+0xa>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <Decodifica_Dig_Ind>:

/* Esta função armazena os digitos individuais de um número inteiro em um vetor */
void Decodifica_Dig_Ind(unsigned int numero, unsigned char *digitos)
{
 2a0:	fb 01       	movw	r30, r22
 2a2:	db 01       	movw	r26, r22
 2a4:	9b 01       	movw	r18, r22
 2a6:	2b 5f       	subi	r18, 0xFB	; 251
 2a8:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char n;                             //declaração de variável auxiliar
	for(n = 0; n < _tam_vetor; n++)
	    digitos[n] = 0 + _valor_decod;           //limpa o vetor
 2aa:	40 e3       	ldi	r20, 0x30	; 48
 2ac:	4d 93       	st	X+, r20

/* Esta função armazena os digitos individuais de um número inteiro em um vetor */
void Decodifica_Dig_Ind(unsigned int numero, unsigned char *digitos)
{
	unsigned char n;                             //declaração de variável auxiliar
	for(n = 0; n < _tam_vetor; n++)
 2ae:	a2 17       	cp	r26, r18
 2b0:	b3 07       	cpc	r27, r19
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <Decodifica_Dig_Ind+0xc>
	    digitos[n] = 0 + _valor_decod;           //limpa o vetor
	do
	{
		*digitos = (numero % 10) + _valor_decod; //armazena o resto da divisão
 2b4:	2a e0       	ldi	r18, 0x0A	; 10
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	b9 01       	movw	r22, r18
 2ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__udivmodhi4>
 2be:	80 5d       	subi	r24, 0xD0	; 208
 2c0:	81 93       	st	Z+, r24
		numero /= 10;                            //divide o valor por 10
 2c2:	cb 01       	movw	r24, r22
		digitos++;
	}while(numero != 0);                         //decodifica enquanto o número for diferente de 0
 2c4:	00 97       	sbiw	r24, 0x00	; 0
 2c6:	c1 f7       	brne	.-16     	; 0x2b8 <Decodifica_Dig_Ind+0x18>
}
 2c8:	08 95       	ret

000002ca <exibe_resultado>:

//implementação de função

//Esta função exibe o resulado da operação
void exibe_resultado(int res, unsigned char *dig)
{
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	eb 01       	movw	r28, r22
 2d4:	8c 01       	movw	r16, r24
 2d6:	97 ff       	sbrs	r25, 7
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <exibe_resultado+0x16>
 2da:	11 95       	neg	r17
 2dc:	01 95       	neg	r16
 2de:	11 09       	sbc	r17, r1
	if(res < 0) res *= -1;
	Decodifica_Dig_Ind(res, dig);
 2e0:	be 01       	movw	r22, r28
 2e2:	c8 01       	movw	r24, r16
 2e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Decodifica_Dig_Ind>
	if(res >= 10000)
 2e8:	00 31       	cpi	r16, 0x10	; 16
 2ea:	87 e2       	ldi	r24, 0x27	; 39
 2ec:	18 07       	cpc	r17, r24
 2ee:	84 f0       	brlt	.+32     	; 0x310 <exibe_resultado+0x46>
	{
		Escreve_Dado(dig[4]);
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[3]);
 2f6:	8b 81       	ldd	r24, Y+3	; 0x03
 2f8:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[2]);
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[1]);
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[0]);
 308:	88 81       	ld	r24, Y
 30a:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
 30e:	04 c0       	rjmp	.+8      	; 0x318 <exibe_resultado+0x4e>
	}
	if(res >= 1000)
 310:	08 3e       	cpi	r16, 0xE8	; 232
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	18 07       	cpc	r17, r24
 316:	6c f0       	brlt	.+26     	; 0x332 <exibe_resultado+0x68>
	{
		Escreve_Dado(dig[3]);
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[2]);
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[1]);
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[0]);
 32a:	88 81       	ld	r24, Y
 32c:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
 330:	03 c0       	rjmp	.+6      	; 0x338 <exibe_resultado+0x6e>
	}
	if(res >= 100)
 332:	04 36       	cpi	r16, 0x64	; 100
 334:	11 05       	cpc	r17, r1
 336:	54 f0       	brlt	.+20     	; 0x34c <exibe_resultado+0x82>
	{
		Escreve_Dado(dig[2]);
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[1]);
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[0]);
 344:	88 81       	ld	r24, Y
 346:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
 34a:	03 c0       	rjmp	.+6      	; 0x352 <exibe_resultado+0x88>
	}
	if(res >= 10)
 34c:	0a 30       	cpi	r16, 0x0A	; 10
 34e:	11 05       	cpc	r17, r1
 350:	1c f0       	brlt	.+6      	; 0x358 <exibe_resultado+0x8e>
	{
		Escreve_Dado(dig[1]);
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		Escreve_Dado(dig[0]);
	}
	else
	{
		Escreve_Dado(dig[0]);
 358:	88 81       	ld	r24, Y
	}
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
		Escreve_Dado(dig[1]);
		Escreve_Dado(dig[0]);
	}
	else
	{
		Escreve_Dado(dig[0]);
 362:	0c 94 9e 00 	jmp	0x13c	; 0x13c <Escreve_Dado>

00000366 <main>:
int main(void) //função principal
{
	unsigned char digitos, tecla, operacao = 0, negativo, div_erro;
	int valor1, valor2, resultado = 0, resto;

	DDRD = 0x0F; //configura os pinos PD3:0 como saídas e os pinos PD7:4 como entradas
 366:	8f e0       	ldi	r24, 0x0F	; 15
 368:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //configura todo o PORTB como saída
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //configura todo o PORTC como saída
 36e:	87 b9       	out	0x07, r24	; 7
	PORTD = 0xF0; //habilita os resistores de pull-up das entradas e coloca as saídas em nível baixo
 370:	80 ef       	ldi	r24, 0xF0	; 240
 372:	8b b9       	out	0x0b, r24	; 11
	PORTB = 0x00; //coloca o PORTB em nível baixo
 374:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00; //coloca o PORTC em nível baixo
 376:	18 b8       	out	0x08, r1	; 8

	UCSR0B = 0x00; //desabilita as funções de RX e TX dos pinos PD0 e PD1
 378:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	Inicializa_LCD(LCD_2_N);                 //inicializa o display LCD com duas linhas
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 ad 00 	call	0x15a	; 0x15a <Inicializa_LCD>
	Display_Cursor_ON_OFF(LCD_DSP_ON_CS_ON); //mantém a tela do display ligada e o cursor não piscante
 382:	8e e0       	ldi	r24, 0x0E	; 14
 384:	0e 94 28 01 	call	0x250	; 0x250 <Display_Cursor_ON_OFF>
	Limpa_Display();         //limpa a tela do display
 388:	0e 94 19 01 	call	0x232	; 0x232 <Limpa_Display>
	Posiciona_Cursor(1, 16); //posiciona o cursor na última coluna da primeira linha
 38c:	60 e1       	ldi	r22, 0x10	; 16
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 2a 01 	call	0x254	; 0x254 <Posiciona_Cursor>
unsigned char dig_ind[_tam_vetor]; //declaração de vetor para armazenar os digitos individualmente

int main(void) //função principal
{
	unsigned char digitos, tecla, operacao = 0, negativo, div_erro;
	int valor1, valor2, resultado = 0, resto;
 396:	e1 2c       	mov	r14, r1
 398:	f1 2c       	mov	r15, r1

unsigned char dig_ind[_tam_vetor]; //declaração de vetor para armazenar os digitos individualmente

int main(void) //função principal
{
	unsigned char digitos, tecla, operacao = 0, negativo, div_erro;
 39a:	d1 2c       	mov	r13, r1
					negativo = 1;
					Escreve_Dado(tecla);
				}
				else if(tecla != '+' && tecla != '-' && tecla != '/' && tecla != 'X' && digitos < 5) //lê os cinco digitos do valor
				{
					valor1 = (valor1 * 10) + (int)(tecla - _valor_decod);
 39c:	8a e0       	ldi	r24, 0x0A	; 10
 39e:	78 2e       	mov	r7, r24
		digitos = 0;
		valor1 = 0;
		valor2 = 0;
		negativo = 0;
		div_erro = 0;
		Limpa_Display();
 3a0:	0e 94 19 01 	call	0x232	; 0x232 <Limpa_Display>
		Posiciona_Cursor(1, 16);
 3a4:	60 e1       	ldi	r22, 0x10	; 16
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 2a 01 	call	0x254	; 0x254 <Posiciona_Cursor>
	Posiciona_Cursor(1, 16); //posiciona o cursor na última coluna da primeira linha

	while(1) //loop infinito
	{
		digitos = 0;
		valor1 = 0;
 3ae:	00 e0       	ldi	r16, 0x00	; 0
 3b0:	10 e0       	ldi	r17, 0x00	; 0
		valor2 = 0;
		negativo = 0;
 3b2:	c1 2c       	mov	r12, r1
	Limpa_Display();         //limpa a tela do display
	Posiciona_Cursor(1, 16); //posiciona o cursor na última coluna da primeira linha

	while(1) //loop infinito
	{
		digitos = 0;
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
		Limpa_Display();
		Posiciona_Cursor(1, 16);
		//recebe o valor do primeiro inteiro
		while(digitos < 6)
		{
			tecla = Leitura_Teclado();
 3b6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Leitura_Teclado>
 3ba:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	39 ef       	ldi	r19, 0xF9	; 249
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	30 40       	sbci	r19, 0x00	; 0
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x5c>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x66>
 3cc:	00 00       	nop
			_delay_ms(20);
			if(tecla != '\0' && tecla != ',' && tecla != '=') //exclui ',', que não será usada, e '=', que ainda não será lido
 3ce:	cc 23       	and	r28, r28
 3d0:	59 f1       	breq	.+86     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3d2:	cc 32       	cpi	r28, 0x2C	; 44
 3d4:	49 f1       	breq	.+82     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3d6:	cd 33       	cpi	r28, 0x3D	; 61
 3d8:	39 f1       	breq	.+78     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				if(tecla == '-' && digitos == 0) //para um inteiro negativo
 3da:	cd 32       	cpi	r28, 0x2D	; 45
 3dc:	41 f4       	brne	.+16     	; 0x3ee <main+0x88>
 3de:	d1 11       	cpse	r29, r1
 3e0:	1e c0       	rjmp	.+60     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				{
					negativo = 1;
					Escreve_Dado(tecla);
 3e2:	8d e2       	ldi	r24, 0x2D	; 45
 3e4:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
			_delay_ms(20);
			if(tecla != '\0' && tecla != ',' && tecla != '=') //exclui ',', que não será usada, e '=', que ainda não será lido
			{
				if(tecla == '-' && digitos == 0) //para um inteiro negativo
				{
					negativo = 1;
 3e8:	cc 24       	eor	r12, r12
 3ea:	c3 94       	inc	r12
 3ec:	e4 cf       	rjmp	.-56     	; 0x3b6 <main+0x50>
					Escreve_Dado(tecla);
				}
				else if(tecla != '+' && tecla != '-' && tecla != '/' && tecla != 'X' && digitos < 5) //lê os cinco digitos do valor
 3ee:	8c 2f       	mov	r24, r28
 3f0:	8b 7f       	andi	r24, 0xFB	; 251
 3f2:	8b 32       	cpi	r24, 0x2B	; 43
 3f4:	a1 f0       	breq	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3f6:	c8 35       	cpi	r28, 0x58	; 88
 3f8:	91 f0       	breq	.+36     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3fa:	d5 30       	cpi	r29, 0x05	; 5
 3fc:	e1 f2       	breq	.-72     	; 0x3b6 <main+0x50>
				{
					valor1 = (valor1 * 10) + (int)(tecla - _valor_decod);
 3fe:	70 9e       	mul	r7, r16
 400:	c0 01       	movw	r24, r0
 402:	71 9e       	mul	r7, r17
 404:	90 0d       	add	r25, r0
 406:	11 24       	eor	r1, r1
 408:	0c 2f       	mov	r16, r28
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	00 53       	subi	r16, 0x30	; 48
 40e:	11 09       	sbc	r17, r1
 410:	08 0f       	add	r16, r24
 412:	19 1f       	adc	r17, r25
					Escreve_Dado(tecla);
 414:	8c 2f       	mov	r24, r28
 416:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
					digitos++;
 41a:	df 5f       	subi	r29, 0xFF	; 255
 41c:	cc cf       	rjmp	.-104    	; 0x3b6 <main+0x50>
				}
				else if((tecla == '+' || tecla == '-' || tecla == '/' || tecla == 'X') && digitos < 6) //lê a operação antes ou depois dos cinco digitos serem informados
				{
					operacao = tecla;
					Escreve_Dado(operacao);
 41e:	8c 2f       	mov	r24, r28
 420:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
 424:	dc 2e       	mov	r13, r28
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		negativo = 0;
		div_erro = 0;
		Limpa_Display();
		Posiciona_Cursor(1, 16);
		//recebe o valor do primeiro inteiro
		while(digitos < 6)
 428:	d6 30       	cpi	r29, 0x06	; 6
 42a:	29 f6       	brne	.-118    	; 0x3b6 <main+0x50>
					Escreve_Dado(operacao);
					digitos = 6;
				}
			}
		}
		if(negativo) valor1 *= -1;
 42c:	cc 20       	and	r12, r12
 42e:	19 f0       	breq	.+6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 430:	11 95       	neg	r17
 432:	01 95       	neg	r16
 434:	11 09       	sbc	r17, r1

	while(1) //loop infinito
	{
		digitos = 0;
		valor1 = 0;
		valor2 = 0;
 436:	c0 e0       	ldi	r28, 0x00	; 0
 438:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		if(negativo) valor1 *= -1;
		//recebe o valor do segundo inteiro
		digitos = 0;
		negativo = 0;
 43a:	b1 2c       	mov	r11, r1
				}
			}
		}
		if(negativo) valor1 *= -1;
		//recebe o valor do segundo inteiro
		digitos = 0;
 43c:	c1 2c       	mov	r12, r1
		negativo = 0;
		while(digitos < 6)
		{
			tecla = Leitura_Teclado();
 43e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Leitura_Teclado>
 442:	9f ef       	ldi	r25, 0xFF	; 255
 444:	29 ef       	ldi	r18, 0xF9	; 249
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	91 50       	subi	r25, 0x01	; 1
 44a:	20 40       	sbci	r18, 0x00	; 0
 44c:	30 40       	sbci	r19, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
			_delay_ms(20);
			if(tecla != '\0' && tecla != ',') //exclui ',', que não será usada
 454:	88 23       	and	r24, r24
 456:	a1 f0       	breq	.+40     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 458:	8c 32       	cpi	r24, 0x2C	; 44
 45a:	91 f0       	breq	.+36     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			{
				if(tecla == '-' && digitos == 0) //para um inteiro negativo
 45c:	8d 32       	cpi	r24, 0x2D	; 45
 45e:	39 f4       	brne	.+14     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 460:	c1 10       	cpse	r12, r1
 462:	0e c0       	rjmp	.+28     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				{
					negativo = 1;
					Escreve_Dado(tecla);
 464:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
			_delay_ms(20);
			if(tecla != '\0' && tecla != ',') //exclui ',', que não será usada
			{
				if(tecla == '-' && digitos == 0) //para um inteiro negativo
				{
					negativo = 1;
 468:	bb 24       	eor	r11, r11
 46a:	b3 94       	inc	r11
					Escreve_Dado(tecla);
 46c:	e8 cf       	rjmp	.-48     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				}
				else if(tecla != '=' && tecla != '+' && tecla != '-' && tecla != '/' && tecla != 'X' && digitos < 5) //lê os cinco digitos do valor
 46e:	8d 33       	cpi	r24, 0x3D	; 61
 470:	51 f0       	breq	.+20     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 472:	98 2f       	mov	r25, r24
 474:	9b 7f       	andi	r25, 0xFB	; 251
 476:	9b 32       	cpi	r25, 0x2B	; 43
 478:	19 f0       	breq	.+6      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47a:	88 35       	cpi	r24, 0x58	; 88
 47c:	09 f0       	breq	.+2      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47e:	92 c0       	rjmp	.+292    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
		}
		if(negativo) valor1 *= -1;
		//recebe o valor do segundo inteiro
		digitos = 0;
		negativo = 0;
		while(digitos < 6)
 480:	26 e0       	ldi	r18, 0x06	; 6
 482:	c2 12       	cpse	r12, r18
 484:	dc cf       	rjmp	.-72     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				{
					digitos = 6;
				} 
			}
		}
		if(negativo) valor2 *= -1;
 486:	bb 20       	and	r11, r11
 488:	19 f0       	breq	.+6      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48a:	d1 95       	neg	r29
 48c:	c1 95       	neg	r28
 48e:	d1 09       	sbc	r29, r1
		//realiza operação selecionada
		switch(operacao)
 490:	3d e2       	ldi	r19, 0x2D	; 45
 492:	d3 16       	cp	r13, r19
 494:	b9 f0       	breq	.+46     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 496:	3d 15       	cp	r19, r13
 498:	38 f0       	brcs	.+14     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 49a:	8b e2       	ldi	r24, 0x2B	; 43
 49c:	d8 12       	cpse	r13, r24
 49e:	1d c0       	rjmp	.+58     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		{
			case '+':
			    resultado = valor1 + valor2;
 4a0:	78 01       	movw	r14, r16
 4a2:	ec 0e       	add	r14, r28
 4a4:	fd 1e       	adc	r15, r29
 4a6:	19 c0       	rjmp	.+50     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
				} 
			}
		}
		if(negativo) valor2 *= -1;
		//realiza operação selecionada
		switch(operacao)
 4a8:	9f e2       	ldi	r25, 0x2F	; 47
 4aa:	d9 16       	cp	r13, r25
 4ac:	79 f0       	breq	.+30     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4ae:	28 e5       	ldi	r18, 0x58	; 88
 4b0:	d2 12       	cpse	r13, r18
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			case '/':
			    if(valor2 != 0) resultado = valor1 / valor2;
			    else div_erro = 1;
			    break;
			case 'X':
			    resultado = valor1 * valor2;
 4b4:	0c 9f       	mul	r16, r28
 4b6:	70 01       	movw	r14, r0
 4b8:	0d 9f       	mul	r16, r29
 4ba:	f0 0c       	add	r15, r0
 4bc:	1c 9f       	mul	r17, r28
 4be:	f0 0c       	add	r15, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	0b c0       	rjmp	.+22     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
		{
			case '+':
			    resultado = valor1 + valor2;
			    break;
			case '-':
			    resultado = valor1 - valor2;
 4c4:	78 01       	movw	r14, r16
 4c6:	ec 1a       	sub	r14, r28
 4c8:	fd 0a       	sbc	r15, r29
 4ca:	07 c0       	rjmp	.+14     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			    break;
			case '/':
			    if(valor2 != 0) resultado = valor1 / valor2;
 4cc:	20 97       	sbiw	r28, 0x00	; 0
 4ce:	39 f0       	breq	.+14     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4d0:	c8 01       	movw	r24, r16
 4d2:	be 01       	movw	r22, r28
 4d4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divmodhi4>
 4d8:	7b 01       	movw	r14, r22
	{
		digitos = 0;
		valor1 = 0;
		valor2 = 0;
		negativo = 0;
		div_erro = 0;
 4da:	c1 2c       	mov	r12, r1
			    if(valor2 != 0) resultado = valor1 / valor2;
			    else div_erro = 1;
			    break;
			case 'X':
			    resultado = valor1 * valor2;
			break;
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
			case '-':
			    resultado = valor1 - valor2;
			    break;
			case '/':
			    if(valor2 != 0) resultado = valor1 / valor2;
			    else div_erro = 1;
 4de:	cc 24       	eor	r12, r12
 4e0:	c3 94       	inc	r12
			case 'X':
			    resultado = valor1 * valor2;
			break;
		}
		//exibe o resultado da operação
		Escreve_Dado('=');
 4e2:	8d e3       	ldi	r24, 0x3D	; 61
 4e4:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		if(resultado < 0) Escreve_Dado('-'); //para um resultado negativo
 4e8:	f7 fe       	sbrs	r15, 7
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4ec:	8d e2       	ldi	r24, 0x2D	; 45
 4ee:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
		if(operacao != '/') exibe_resultado(resultado, dig_ind); //para o resultado diferente de uma operação de uma divisão
 4f2:	3f e2       	ldi	r19, 0x2F	; 47
 4f4:	d3 16       	cp	r13, r19
 4f6:	31 f0       	breq	.+12     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 4f8:	6f e0       	ldi	r22, 0x0F	; 15
 4fa:	71 e0       	ldi	r23, 0x01	; 1
 4fc:	c7 01       	movw	r24, r14
 4fe:	0e 94 65 01 	call	0x2ca	; 0x2ca <exibe_resultado>
 502:	46 c0       	rjmp	.+140    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
		else                                                     //para o resultado de uma operação de divisão
		{
			if(!div_erro)
 504:	c1 10       	cpse	r12, r1
 506:	39 c0       	rjmp	.+114    	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
			{
				resto = valor1 % valor2;
 508:	c8 01       	movw	r24, r16
 50a:	be 01       	movw	r22, r28
 50c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divmodhi4>
 510:	4c 01       	movw	r8, r24
 512:	5c 01       	movw	r10, r24
				if(((valor1 < 0 && valor2 > 0) || (valor1 > 0 && valor2 < 0)) && (resultado == 0)) Escreve_Dado('-'); //para um resultado real negativo
 514:	17 ff       	sbrs	r17, 7
 516:	04 c0       	rjmp	.+8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 518:	1c 16       	cp	r1, r28
 51a:	1d 06       	cpc	r1, r29
 51c:	2c f0       	brlt	.+10     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 51e:	0a c0       	rjmp	.+20     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 520:	01 2b       	or	r16, r17
 522:	41 f0       	breq	.+16     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 524:	d7 ff       	sbrs	r29, 7
 526:	06 c0       	rjmp	.+12     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 528:	e1 14       	cp	r14, r1
 52a:	f1 04       	cpc	r15, r1
 52c:	19 f4       	brne	.+6      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 52e:	8d e2       	ldi	r24, 0x2D	; 45
 530:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
				exibe_resultado(resultado, dig_ind);
 534:	6f e0       	ldi	r22, 0x0F	; 15
 536:	71 e0       	ldi	r23, 0x01	; 1
 538:	c7 01       	movw	r24, r14
 53a:	0e 94 65 01 	call	0x2ca	; 0x2ca <exibe_resultado>
				digitos = 0;
				if(resto != 0) Escreve_Dado(','); //para '/' com resto
 53e:	89 28       	or	r8, r9
 540:	19 f0       	breq	.+6      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 542:	8c e2       	ldi	r24, 0x2C	; 44
 544:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
	{
		digitos = 0;
		valor1 = 0;
		valor2 = 0;
		negativo = 0;
		div_erro = 0;
 548:	16 e0       	ldi	r17, 0x06	; 6
				resto = valor1 % valor2;
				if(((valor1 < 0 && valor2 > 0) || (valor1 > 0 && valor2 < 0)) && (resultado == 0)) Escreve_Dado('-'); //para um resultado real negativo
				exibe_resultado(resultado, dig_ind);
				digitos = 0;
				if(resto != 0) Escreve_Dado(','); //para '/' com resto
				while(resto != 0 && digitos < 5)
 54a:	a1 14       	cp	r10, r1
 54c:	b1 04       	cpc	r11, r1
 54e:	01 f1       	breq	.+64     	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
 550:	11 50       	subi	r17, 0x01	; 1
 552:	f1 f0       	breq	.+60     	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
				{
					valor1 = resto * 10;
 554:	7a 9c       	mul	r7, r10
 556:	c0 01       	movw	r24, r0
 558:	7b 9c       	mul	r7, r11
 55a:	90 0d       	add	r25, r0
 55c:	11 24       	eor	r1, r1
					resultado = valor1 / valor2;
 55e:	be 01       	movw	r22, r28
 560:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__divmodhi4>
 564:	7b 01       	movw	r14, r22
 566:	c8 2e       	mov	r12, r24
 568:	09 2f       	mov	r16, r25
					exibe_resultado(resultado, dig_ind);
 56a:	6f e0       	ldi	r22, 0x0F	; 15
 56c:	71 e0       	ldi	r23, 0x01	; 1
 56e:	c7 01       	movw	r24, r14
 570:	0e 94 65 01 	call	0x2ca	; 0x2ca <exibe_resultado>
					resto = valor1 % valor2;
 574:	ac 2c       	mov	r10, r12
 576:	b0 2e       	mov	r11, r16
 578:	e8 cf       	rjmp	.-48     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
					digitos++;
				}
			}
			else //para o caso do denominador ser igual a 0
			{
				Limpa_Display();
 57a:	0e 94 19 01 	call	0x232	; 0x232 <Limpa_Display>
				Posiciona_Cursor(2, 16);
 57e:	60 e1       	ldi	r22, 0x10	; 16
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	0e 94 2a 01 	call	0x254	; 0x254 <Posiciona_Cursor>
				Escreve_S_memdados("Math ERROR");
 588:	83 e0       	ldi	r24, 0x03	; 3
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 38 01 	call	0x270	; 0x270 <Escreve_S_memdados>
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	93 ed       	ldi	r25, 0xD3	; 211
 594:	20 e3       	ldi	r18, 0x30	; 48
 596:	81 50       	subi	r24, 0x01	; 1
 598:	90 40       	sbci	r25, 0x00	; 0
 59a:	20 40       	sbci	r18, 0x00	; 0
 59c:	e1 f7       	brne	.-8      	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
 5a0:	00 00       	nop
 5a2:	fe ce       	rjmp	.-516    	; 0x3a0 <main+0x3a>
				if(tecla == '-' && digitos == 0) //para um inteiro negativo
				{
					negativo = 1;
					Escreve_Dado(tecla);
				}
				else if(tecla != '=' && tecla != '+' && tecla != '-' && tecla != '/' && tecla != 'X' && digitos < 5) //lê os cinco digitos do valor
 5a4:	95 e0       	ldi	r25, 0x05	; 5
 5a6:	c9 16       	cp	r12, r25
 5a8:	09 f4       	brne	.+2      	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
 5aa:	49 cf       	rjmp	.-366    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				{
					valor2 = (valor2 * 10) + (int)(tecla - _valor_decod);
 5ac:	7c 9e       	mul	r7, r28
 5ae:	90 01       	movw	r18, r0
 5b0:	7d 9e       	mul	r7, r29
 5b2:	30 0d       	add	r19, r0
 5b4:	11 24       	eor	r1, r1
 5b6:	c8 2f       	mov	r28, r24
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
 5ba:	e0 97       	sbiw	r28, 0x30	; 48
 5bc:	c2 0f       	add	r28, r18
 5be:	d3 1f       	adc	r29, r19
					Escreve_Dado(tecla);
 5c0:	0e 94 9e 00 	call	0x13c	; 0x13c <Escreve_Dado>
					digitos++;
 5c4:	c3 94       	inc	r12
 5c6:	3b cf       	rjmp	.-394    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>

000005c8 <Leitura_Teclado>:
/* Esta função retorna o caractere correspondente à tecla pressionada */
unsigned char Leitura_Teclado(void)
{
	//declaração de variável auxiliar
	static char tecla_ant = 0;       //armazena o status da tecla	
    DIR_TECLADO = 0x0F;  //configura as linhas como entradas e as colunas como saída
 5c8:	8f e0       	ldi	r24, 0x0F	; 15
 5ca:	8a b9       	out	0x0a, r24	; 10
	PORT_TECLADO = 0xFF; //habilita pull-ups das entrada e coloca saídas em nível alto
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	8b b9       	out	0x0b, r24	; 11
	clr_bit(PORT_TECLADO, _C1); //seleciona a coluna 1(PD4)
 5d0:	58 98       	cbi	0x0b, 0	; 11
 5d2:	8f e3       	ldi	r24, 0x3F	; 63
 5d4:	9c e9       	ldi	r25, 0x9C	; 156
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <Leitura_Teclado+0xe>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <Leitura_Teclado+0x14>
 5dc:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 5de:	4c 99       	sbic	0x09, 4	; 9
 5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <Leitura_Teclado+0x2c>
	{
		if(tecla_ant) return '\0';
 5e2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 5e6:	81 11       	cpse	r24, r1
 5e8:	c6 c0       	rjmp	.+396    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '1';
 5f0:	81 e3       	ldi	r24, 0x31	; 49
 5f2:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 5f4:	4d 99       	sbic	0x09, 5	; 9
 5f6:	09 c0       	rjmp	.+18     	; 0x60a <Leitura_Teclado+0x42>
	{
		if(tecla_ant) return '\0';
 5f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 5fc:	81 11       	cpse	r24, r1
 5fe:	bb c0       	rjmp	.+374    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '4';
 606:	84 e3       	ldi	r24, 0x34	; 52
 608:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 60a:	4e 99       	sbic	0x09, 6	; 9
 60c:	09 c0       	rjmp	.+18     	; 0x620 <Leitura_Teclado+0x58>
	{
		if(tecla_ant) return '\0';
 60e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 612:	81 11       	cpse	r24, r1
 614:	b0 c0       	rjmp	.+352    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '7';
 61c:	87 e3       	ldi	r24, 0x37	; 55
 61e:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 620:	4f 99       	sbic	0x09, 7	; 9
 622:	09 c0       	rjmp	.+18     	; 0x636 <Leitura_Teclado+0x6e>
	{
		if(tecla_ant) return '\0';
 624:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 628:	81 11       	cpse	r24, r1
 62a:	a5 c0       	rjmp	.+330    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return ',';
 632:	8c e2       	ldi	r24, 0x2C	; 44
 634:	08 95       	ret
		}
	}
	set_bit(PORT_TECLADO, _C1);
 636:	58 9a       	sbi	0x0b, 0	; 11
	clr_bit(PORT_TECLADO, _C2); //seleciona a coluna 2(PD5)
 638:	59 98       	cbi	0x0b, 1	; 11
 63a:	8f e3       	ldi	r24, 0x3F	; 63
 63c:	9c e9       	ldi	r25, 0x9C	; 156
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <Leitura_Teclado+0x76>
 642:	00 c0       	rjmp	.+0      	; 0x644 <Leitura_Teclado+0x7c>
 644:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 646:	4c 99       	sbic	0x09, 4	; 9
 648:	09 c0       	rjmp	.+18     	; 0x65c <Leitura_Teclado+0x94>
	{
		if(tecla_ant) return '\0';
 64a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 64e:	81 11       	cpse	r24, r1
 650:	92 c0       	rjmp	.+292    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '2';
 658:	82 e3       	ldi	r24, 0x32	; 50
 65a:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 65c:	4d 99       	sbic	0x09, 5	; 9
 65e:	09 c0       	rjmp	.+18     	; 0x672 <Leitura_Teclado+0xaa>
	{
		if(tecla_ant) return '\0';
 660:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 664:	81 11       	cpse	r24, r1
 666:	87 c0       	rjmp	.+270    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '5';
 66e:	85 e3       	ldi	r24, 0x35	; 53
 670:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 672:	4e 99       	sbic	0x09, 6	; 9
 674:	09 c0       	rjmp	.+18     	; 0x688 <Leitura_Teclado+0xc0>
	{
		if(tecla_ant) return '\0';
 676:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 67a:	81 11       	cpse	r24, r1
 67c:	7c c0       	rjmp	.+248    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '8';
 684:	88 e3       	ldi	r24, 0x38	; 56
 686:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 688:	4f 99       	sbic	0x09, 7	; 9
 68a:	09 c0       	rjmp	.+18     	; 0x69e <Leitura_Teclado+0xd6>
	{
		if(tecla_ant) return '\0';
 68c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 690:	81 11       	cpse	r24, r1
 692:	71 c0       	rjmp	.+226    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '0';
 69a:	80 e3       	ldi	r24, 0x30	; 48
 69c:	08 95       	ret
		}
	}
	set_bit(PORT_TECLADO, _C2);
 69e:	59 9a       	sbi	0x0b, 1	; 11
	clr_bit(PORT_TECLADO, _C3); //seleciona a coluna 3(PD6)
 6a0:	5a 98       	cbi	0x0b, 2	; 11
 6a2:	8f e3       	ldi	r24, 0x3F	; 63
 6a4:	9c e9       	ldi	r25, 0x9C	; 156
 6a6:	01 97       	sbiw	r24, 0x01	; 1
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <Leitura_Teclado+0xde>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <Leitura_Teclado+0xe4>
 6ac:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 6ae:	4c 99       	sbic	0x09, 4	; 9
 6b0:	09 c0       	rjmp	.+18     	; 0x6c4 <Leitura_Teclado+0xfc>
	{
		if(tecla_ant) return '\0';
 6b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 6b6:	81 11       	cpse	r24, r1
 6b8:	5e c0       	rjmp	.+188    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '3';
 6c0:	83 e3       	ldi	r24, 0x33	; 51
 6c2:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 6c4:	4d 99       	sbic	0x09, 5	; 9
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <Leitura_Teclado+0x112>
	{
		if(tecla_ant) return '\0';
 6c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 6cc:	81 11       	cpse	r24, r1
 6ce:	53 c0       	rjmp	.+166    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '6';
 6d6:	86 e3       	ldi	r24, 0x36	; 54
 6d8:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 6da:	4e 99       	sbic	0x09, 6	; 9
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <Leitura_Teclado+0x128>
	{
		if(tecla_ant) return '\0';
 6de:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 6e2:	81 11       	cpse	r24, r1
 6e4:	48 c0       	rjmp	.+144    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '9';
 6ec:	89 e3       	ldi	r24, 0x39	; 57
 6ee:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 6f0:	4f 99       	sbic	0x09, 7	; 9
 6f2:	09 c0       	rjmp	.+18     	; 0x706 <Leitura_Teclado+0x13e>
	{
		if(tecla_ant) return '\0';
 6f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 6f8:	81 11       	cpse	r24, r1
 6fa:	3d c0       	rjmp	.+122    	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '=';
 702:	8d e3       	ldi	r24, 0x3D	; 61
 704:	08 95       	ret
		}
	}
	set_bit(PORT_TECLADO, _C3);
 706:	5a 9a       	sbi	0x0b, 2	; 11
	clr_bit(PORT_TECLADO, _C4); //seleciona a coluna 4(PD7)
 708:	5b 98       	cbi	0x0b, 3	; 11
 70a:	8f e3       	ldi	r24, 0x3F	; 63
 70c:	9c e9       	ldi	r25, 0x9C	; 156
 70e:	01 97       	sbiw	r24, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <Leitura_Teclado+0x146>
 712:	00 c0       	rjmp	.+0      	; 0x714 <Leitura_Teclado+0x14c>
 714:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 716:	4c 99       	sbic	0x09, 4	; 9
 718:	09 c0       	rjmp	.+18     	; 0x72c <Leitura_Teclado+0x164>
	{
		if(tecla_ant) return '\0';
 71a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 71e:	81 11       	cpse	r24, r1
 720:	2a c0       	rjmp	.+84     	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return 'X';
 728:	88 e5       	ldi	r24, 0x58	; 88
 72a:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 72c:	4d 99       	sbic	0x09, 5	; 9
 72e:	09 c0       	rjmp	.+18     	; 0x742 <Leitura_Teclado+0x17a>
	{
		if(tecla_ant) return '\0';
 730:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 734:	81 11       	cpse	r24, r1
 736:	1f c0       	rjmp	.+62     	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '/';
 73e:	8f e2       	ldi	r24, 0x2F	; 47
 740:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 742:	4e 99       	sbic	0x09, 6	; 9
 744:	09 c0       	rjmp	.+18     	; 0x758 <Leitura_Teclado+0x190>
	{
		if(tecla_ant) return '\0';
 746:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 74a:	81 11       	cpse	r24, r1
 74c:	14 c0       	rjmp	.+40     	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '-';
 754:	8d e2       	ldi	r24, 0x2D	; 45
 756:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 758:	4f 99       	sbic	0x09, 7	; 9
 75a:	09 c0       	rjmp	.+18     	; 0x76e <Leitura_Teclado+0x1a6>
	{
		if(tecla_ant) return '\0';
 75c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 760:	81 11       	cpse	r24, r1
 762:	09 c0       	rjmp	.+18     	; 0x776 <Leitura_Teclado+0x1ae>
		else
		{
			tecla_ant = 1;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
			return '+';
 76a:	8b e2       	ldi	r24, 0x2B	; 43
 76c:	08 95       	ret
		}
	}
	DIR_TECLADO = 0xF0; //configura PD3:0 como entrada e PD7:4 como entrada
 76e:	80 ef       	ldi	r24, 0xF0	; 240
 770:	8a b9       	out	0x0a, r24	; 10
	tecla_ant = 0;      //nenhuma tecla foi pressionada	
 772:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	return '\0';
 776:	80 e0       	ldi	r24, 0x00	; 0
}
 778:	08 95       	ret

0000077a <__udivmodhi4>:
 77a:	aa 1b       	sub	r26, r26
 77c:	bb 1b       	sub	r27, r27
 77e:	51 e1       	ldi	r21, 0x11	; 17
 780:	07 c0       	rjmp	.+14     	; 0x790 <__udivmodhi4_ep>

00000782 <__udivmodhi4_loop>:
 782:	aa 1f       	adc	r26, r26
 784:	bb 1f       	adc	r27, r27
 786:	a6 17       	cp	r26, r22
 788:	b7 07       	cpc	r27, r23
 78a:	10 f0       	brcs	.+4      	; 0x790 <__udivmodhi4_ep>
 78c:	a6 1b       	sub	r26, r22
 78e:	b7 0b       	sbc	r27, r23

00000790 <__udivmodhi4_ep>:
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	5a 95       	dec	r21
 796:	a9 f7       	brne	.-22     	; 0x782 <__udivmodhi4_loop>
 798:	80 95       	com	r24
 79a:	90 95       	com	r25
 79c:	bc 01       	movw	r22, r24
 79e:	cd 01       	movw	r24, r26
 7a0:	08 95       	ret

000007a2 <__divmodhi4>:
 7a2:	97 fb       	bst	r25, 7
 7a4:	07 2e       	mov	r0, r23
 7a6:	16 f4       	brtc	.+4      	; 0x7ac <__divmodhi4+0xa>
 7a8:	00 94       	com	r0
 7aa:	07 d0       	rcall	.+14     	; 0x7ba <__divmodhi4_neg1>
 7ac:	77 fd       	sbrc	r23, 7
 7ae:	09 d0       	rcall	.+18     	; 0x7c2 <__divmodhi4_neg2>
 7b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__udivmodhi4>
 7b4:	07 fc       	sbrc	r0, 7
 7b6:	05 d0       	rcall	.+10     	; 0x7c2 <__divmodhi4_neg2>
 7b8:	3e f4       	brtc	.+14     	; 0x7c8 <__divmodhi4_exit>

000007ba <__divmodhi4_neg1>:
 7ba:	90 95       	com	r25
 7bc:	81 95       	neg	r24
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	08 95       	ret

000007c2 <__divmodhi4_neg2>:
 7c2:	70 95       	com	r23
 7c4:	61 95       	neg	r22
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255

000007c8 <__divmodhi4_exit>:
 7c8:	08 95       	ret

000007ca <_exit>:
 7ca:	f8 94       	cli

000007cc <__stop_program>:
 7cc:	ff cf       	rjmp	.-2      	; 0x7cc <__stop_program>
