
s08_e01_senha_numerica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800104  00800104  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000580  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5b  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f4  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000882  00000000  00000000  00001c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000626  00000000  00000000  000029d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <aciona_buzzer>:
//implementando funções

//Esta função aciona o buzzer
void aciona_buzzer(void)
{
	set_bit(PORTB, BUZZER);
  a6:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	9e e4       	ldi	r25, 0x4E	; 78
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <aciona_buzzer+0x6>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <aciona_buzzer+0xc>
  b2:	00 00       	nop
	_delay_ms(5);
	clr_bit(PORTB, BUZZER);
  b4:	2d 98       	cbi	0x05, 5	; 5
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	9e e4       	ldi	r25, 0x4E	; 78
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <aciona_buzzer+0x14>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <aciona_buzzer+0x1a>
  c0:	00 00       	nop
	_delay_ms(5);
	set_bit(PORTB, BUZZER);
  c2:	2d 9a       	sbi	0x05, 5	; 5
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <aciona_buzzer+0x22>
  cc:	00 c0       	rjmp	.+0      	; 0xce <aciona_buzzer+0x28>
  ce:	00 00       	nop
	_delay_ms(5);
	clr_bit(PORTB, BUZZER);
  d0:	2d 98       	cbi	0x05, 5	; 5
  d2:	8f e1       	ldi	r24, 0x1F	; 31
  d4:	9e e4       	ldi	r25, 0x4E	; 78
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <aciona_buzzer+0x30>
  da:	00 c0       	rjmp	.+0      	; 0xdc <aciona_buzzer+0x36>
  dc:	00 00       	nop
	_delay_ms(5);
	set_bit(PORTB, BUZZER);
  de:	2d 9a       	sbi	0x05, 5	; 5
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	9e e4       	ldi	r25, 0x4E	; 78
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <aciona_buzzer+0x3e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <aciona_buzzer+0x44>
  ea:	00 00       	nop
	_delay_ms(5);
	clr_bit(PORTB, BUZZER);
  ec:	2d 98       	cbi	0x05, 5	; 5
  ee:	8f e1       	ldi	r24, 0x1F	; 31
  f0:	9e e4       	ldi	r25, 0x4E	; 78
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <aciona_buzzer+0x4c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <aciona_buzzer+0x52>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <aciona_rele>:
}

//Esta função mantém o relé acionado por um segundo
void aciona_rele(void)
{
	set_bit(PORTB, RELE);
  fc:	2b 9a       	sbi	0x05, 3	; 5
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <aciona_rele+0x8>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <aciona_rele+0x12>
 10e:	00 00       	nop
	_delay_ms(1000);
	clr_bit(PORTB, RELE);
 110:	2b 98       	cbi	0x05, 3	; 5
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9c e9       	ldi	r25, 0x9C	; 156
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <aciona_rele+0x1a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <aciona_rele+0x20>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <main>:
//declaração de protótipos de funções
void aciona_buzzer(void);
void aciona_rele(void);

int main(void) //função principal
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	29 97       	sbiw	r28, 0x09	; 9
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
	unsigned int endereco_eeprom;  //endereço da senha
	unsigned char senha_eeprom[3] = {'1', '5', '9'};   //senha que será salva na eeprom;
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 140:	8f 83       	std	Y+7, r24	; 0x07
 142:	98 87       	std	Y+8, r25	; 0x08
 144:	a9 87       	std	Y+9, r26	; 0x09
	unsigned char tecla;      //declaração de variável local não inicializada
	unsigned char digitos;    //declaração de variável local não inicializada
	unsigned char senha_u[3]; //declaração de variável local não inicializada
	unsigned char verifica;   //declaração de variável local não inicializada

	DDRD = 0x0F;  //define os pinos PD0:3 como saídas e PD4:7 como entradas
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;  //define todo o PORTB como saída
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	84 b9       	out	0x04, r24	; 4
	PORTD = 0xF0; //habilita os resistores de pull-up das entradas e coloca as saída no nível baixo
 14e:	80 ef       	ldi	r24, 0xF0	; 240
 150:	8b b9       	out	0x0b, r24	; 11
	PORTB = 0x00; //coloca todo o PORTB em nível baixo
 152:	15 b8       	out	0x05, r1	; 5

	UCSR0B = 0x00; //desabilita as funções de RX e TX dos pinos PD0 e PD1
 154:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	//lê o conteúdo da memória eeprom e armazena em senha_s
	endereco_eeprom = 0x0000;
	digitos = 0;
	while(digitos < 3)
	{
		__EEGET(senha_s[digitos++], endereco_eeprom++);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_read_byte>
 160:	8c 83       	std	Y+4, r24	; 0x04
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_read_byte>
 16a:	8d 83       	std	Y+5, r24	; 0x05
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_read_byte>
 174:	8e 83       	std	Y+6, r24	; 0x06
 176:	6e 01       	movw	r12, r28
 178:	24 e0       	ldi	r18, 0x04	; 4
 17a:	c2 0e       	add	r12, r18
 17c:	d1 1c       	adc	r13, r1
 17e:	de 01       	movw	r26, r28
 180:	17 96       	adiw	r26, 0x07	; 7
 182:	9d 01       	movw	r18, r26
 184:	f6 01       	movw	r30, r12
 186:	80 e0       	ldi	r24, 0x00	; 0
	endereco_eeprom = 0x0000; //restaura endereço
	digitos = 0;              //restaura digitos
	verifica = 0;             //inicializa verifica
	while(digitos < 3)
	{
		if(senha_s[digitos] == senha_eeprom[digitos])
 188:	41 91       	ld	r20, Z+
 18a:	9d 91       	ld	r25, X+
 18c:	49 13       	cpse	r20, r25
 18e:	01 c0       	rjmp	.+2      	; 0x192 <main+0x72>
		verifica++;
 190:	8f 5f       	subi	r24, 0xFF	; 255

	//verifica se a senha_s é igual à senha_eeprom
	endereco_eeprom = 0x0000; //restaura endereço
	digitos = 0;              //restaura digitos
	verifica = 0;             //inicializa verifica
	while(digitos < 3)
 192:	e2 17       	cp	r30, r18
 194:	f3 07       	cpc	r31, r19
 196:	c1 f7       	brne	.-16     	; 0x188 <main+0x68>
		if(senha_s[digitos] == senha_eeprom[digitos])
		verifica++;
		digitos++;
	}
	//se forem diferentes, uma novo senha é gravada e liga em seguida da eeprom
	if(verifica < 3)
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	18 f0       	brcs	.+6      	; 0x1a2 <main+0x82>
		if(verifica == 3)    //se a senha for correta, aciona o relé
		aciona_rele();
		else                 //se a senha for incorreta, aciona o buzzer três vezes e pisca o LED
		{
			aciona_buzzer();
			cpl_bit(PORTB, LED);
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	f8 2e       	mov	r15, r24
 1a0:	44 c0       	rjmp	.+136    	; 0x22a <main+0x10a>
	{
		endereco_eeprom = 0x0000; //restaura endereço
		digitos = 0;              //restaura digitos
		while(digitos < 3)
		{
			__EEPUT(endereco_eeprom++, senha_eeprom[digitos++]);
 1a2:	6f 81       	ldd	r22, Y+7	; 0x07
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 2a 02 	call	0x454	; 0x454 <eeprom_write_byte>
 1ac:	68 85       	ldd	r22, Y+8	; 0x08
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 2a 02 	call	0x454	; 0x454 <eeprom_write_byte>
 1b6:	69 85       	ldd	r22, Y+9	; 0x09
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 2a 02 	call	0x454	; 0x454 <eeprom_write_byte>
		}
		endereco_eeprom = 0x0000; //restaura endereço
		digitos = 0;              //restaura digitos
		while(digitos < 3)
		{
			__EEGET(senha_s[digitos++], endereco_eeprom++);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_read_byte>
 1c8:	8c 83       	std	Y+4, r24	; 0x04
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_read_byte>
 1d2:	8d 83       	std	Y+5, r24	; 0x05
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 22 02 	call	0x444	; 0x444 <eeprom_read_byte>
 1dc:	8e 83       	std	Y+6, r24	; 0x06
 1de:	de cf       	rjmp	.-68     	; 0x19c <main+0x7c>
		digitos = 0;         //inicializa variável local
		verifica = 0;        //inicializa variável local
		set_bit(PORTB, LED); //acende led para indicar que o programa está pronto para receber a senha
		while(digitos < 3)   //recebe uma senha de três digitos do usuário
		{
			tecla = Leitura_Teclado(); //realiza a leitura do teclado
 1e0:	0e 94 47 01 	call	0x28e	; 0x28e <Leitura_Teclado>
 1e4:	af e3       	ldi	r26, 0x3F	; 63
 1e6:	bc e9       	ldi	r27, 0x9C	; 156
 1e8:	11 97       	sbiw	r26, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0xc8>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0xce>
 1ee:	00 00       	nop
			_delay_ms(10);             //elimina debounce
			if(tecla != '\0')          //verifica se alguma tecla foi pressinada
 1f0:	88 23       	and	r24, r24
 1f2:	39 f0       	breq	.+14     	; 0x202 <main+0xe2>
			{
				senha_u[digitos++] = tecla;
 1f4:	f5 01       	movw	r30, r10
 1f6:	81 93       	st	Z+, r24
 1f8:	5f 01       	movw	r10, r30
				aciona_buzzer();
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <aciona_buzzer>
	while(1) //loop infinito
	{
		digitos = 0;         //inicializa variável local
		verifica = 0;        //inicializa variável local
		set_bit(PORTB, LED); //acende led para indicar que o programa está pronto para receber a senha
		while(digitos < 3)   //recebe uma senha de três digitos do usuário
 1fe:	ea 2c       	mov	r14, r10
 200:	e0 1a       	sub	r14, r16
 202:	f2 e0       	ldi	r31, 0x02	; 2
 204:	fe 15       	cp	r31, r14
 206:	60 f7       	brcc	.-40     	; 0x1e0 <main+0xc0>
			{
				senha_u[digitos++] = tecla;
				aciona_buzzer();
			}
		}
		clr_bit(PORTB, LED); //apaga o led para indicar que a senha está sendo verificada
 208:	2c 98       	cbi	0x05, 4	; 5
 20a:	f6 01       	movw	r30, r12
	}
	
	while(1) //loop infinito
	{
		digitos = 0;         //inicializa variável local
		verifica = 0;        //inicializa variável local
 20c:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
		clr_bit(PORTB, LED); //apaga o led para indicar que a senha está sendo verificada
		for(digitos = 0; digitos < 3; digitos++) //verifica se a senha informada é correta
		{
			if(senha_u[digitos] == senha_s[digitos])
 20e:	d8 01       	movw	r26, r16
 210:	2d 91       	ld	r18, X+
 212:	8d 01       	movw	r16, r26
 214:	91 91       	ld	r25, Z+
 216:	29 13       	cpse	r18, r25
 218:	01 c0       	rjmp	.+2      	; 0x21c <main+0xfc>
			verifica++;
 21a:	8f 5f       	subi	r24, 0xFF	; 255
				senha_u[digitos++] = tecla;
				aciona_buzzer();
			}
		}
		clr_bit(PORTB, LED); //apaga o led para indicar que a senha está sendo verificada
		for(digitos = 0; digitos < 3; digitos++) //verifica se a senha informada é correta
 21c:	c0 16       	cp	r12, r16
 21e:	d1 06       	cpc	r13, r17
 220:	b1 f7       	brne	.-20     	; 0x20e <main+0xee>
		{
			if(senha_u[digitos] == senha_s[digitos])
			verifica++;
		}
		if(verifica == 3)    //se a senha for correta, aciona o relé
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	41 f4       	brne	.+16     	; 0x236 <main+0x116>
		aciona_rele();
 226:	0e 94 7e 00 	call	0xfc	; 0xfc <aciona_rele>
	
	while(1) //loop infinito
	{
		digitos = 0;         //inicializa variável local
		verifica = 0;        //inicializa variável local
		set_bit(PORTB, LED); //acende led para indicar que o programa está pronto para receber a senha
 22a:	2c 9a       	sbi	0x05, 4	; 5
 22c:	8e 01       	movw	r16, r28
 22e:	0f 5f       	subi	r16, 0xFF	; 255
 230:	1f 4f       	sbci	r17, 0xFF	; 255
		while(digitos < 3)   //recebe uma senha de três digitos do usuário
 232:	58 01       	movw	r10, r16
 234:	e4 cf       	rjmp	.-56     	; 0x1fe <main+0xde>
		}
		if(verifica == 3)    //se a senha for correta, aciona o relé
		aciona_rele();
		else                 //se a senha for incorreta, aciona o buzzer três vezes e pisca o LED
		{
			aciona_buzzer();
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <aciona_buzzer>
			cpl_bit(PORTB, LED);
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	8f 25       	eor	r24, r15
 23e:	85 b9       	out	0x05, r24	; 5
 240:	bf ef       	ldi	r27, 0xFF	; 255
 242:	e0 e7       	ldi	r30, 0x70	; 112
 244:	f2 e0       	ldi	r31, 0x02	; 2
 246:	b1 50       	subi	r27, 0x01	; 1
 248:	e0 40       	sbci	r30, 0x00	; 0
 24a:	f0 40       	sbci	r31, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x126>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x130>
 250:	00 00       	nop
			_delay_ms(50);
			aciona_buzzer();
 252:	0e 94 53 00 	call	0xa6	; 0xa6 <aciona_buzzer>
			cpl_bit(PORTB, LED);
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8f 25       	eor	r24, r15
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	80 e7       	ldi	r24, 0x70	; 112
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x142>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x14c>
 26c:	00 00       	nop
			_delay_ms(50);
			aciona_buzzer();
 26e:	0e 94 53 00 	call	0xa6	; 0xa6 <aciona_buzzer>
			cpl_bit(PORTB, LED);
 272:	85 b1       	in	r24, 0x05	; 5
 274:	8f 25       	eor	r24, r15
 276:	85 b9       	out	0x05, r24	; 5
 278:	af ef       	ldi	r26, 0xFF	; 255
 27a:	b0 e7       	ldi	r27, 0x70	; 112
 27c:	e2 e0       	ldi	r30, 0x02	; 2
 27e:	a1 50       	subi	r26, 0x01	; 1
 280:	b0 40       	sbci	r27, 0x00	; 0
 282:	e0 40       	sbci	r30, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x15e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x168>
 288:	00 00       	nop
			_delay_ms(50);
			clr_bit(PORTB, LED);
 28a:	2c 98       	cbi	0x05, 4	; 5
 28c:	ce cf       	rjmp	.-100    	; 0x22a <main+0x10a>

0000028e <Leitura_Teclado>:
/* Esta função retorna o caractere correspondente à tecla pressionada */
unsigned char Leitura_Teclado(void)
{
	//declaração de variável auxiliar
	static char tecla_ant = 0;       //armazena o status da tecla	
    DIR_TECLADO = 0x0F;  //configura as linhas como entradas e as colunas como saída
 28e:	8f e0       	ldi	r24, 0x0F	; 15
 290:	8a b9       	out	0x0a, r24	; 10
	PORT_TECLADO = 0xFF; //habilita pull-ups das entrada e coloca saídas em nível alto
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	8b b9       	out	0x0b, r24	; 11
	clr_bit(PORT_TECLADO, _C1); //seleciona a coluna 1(PD4)
 296:	58 98       	cbi	0x0b, 0	; 11
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9c e9       	ldi	r25, 0x9C	; 156
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <Leitura_Teclado+0xe>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <Leitura_Teclado+0x14>
 2a2:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 2a4:	4c 99       	sbic	0x09, 4	; 9
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <Leitura_Teclado+0x2c>
	{
		if(tecla_ant) return '\0';
 2a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2ac:	81 11       	cpse	r24, r1
 2ae:	c8 c0       	rjmp	.+400    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '1';
 2b6:	81 e3       	ldi	r24, 0x31	; 49
 2b8:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 2ba:	4d 99       	sbic	0x09, 5	; 9
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <Leitura_Teclado+0x42>
	{
		if(tecla_ant) return '\0';
 2be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2c2:	81 11       	cpse	r24, r1
 2c4:	bd c0       	rjmp	.+378    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '4';
 2cc:	84 e3       	ldi	r24, 0x34	; 52
 2ce:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 2d0:	4e 99       	sbic	0x09, 6	; 9
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <Leitura_Teclado+0x58>
	{
		if(tecla_ant) return '\0';
 2d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2d8:	81 11       	cpse	r24, r1
 2da:	b2 c0       	rjmp	.+356    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '7';
 2e2:	87 e3       	ldi	r24, 0x37	; 55
 2e4:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 2e6:	4f 99       	sbic	0x09, 7	; 9
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <Leitura_Teclado+0x6e>
	{
		if(tecla_ant) return '\0';
 2ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2ee:	81 11       	cpse	r24, r1
 2f0:	a7 c0       	rjmp	.+334    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return 'A';
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	08 95       	ret
		}
	}
	set_bit(PORT_TECLADO, _C1);
 2fc:	58 9a       	sbi	0x0b, 0	; 11
	clr_bit(PORT_TECLADO, _C2); //seleciona a coluna 2(PD5)
 2fe:	59 98       	cbi	0x0b, 1	; 11
 300:	8f e3       	ldi	r24, 0x3F	; 63
 302:	9c e9       	ldi	r25, 0x9C	; 156
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <Leitura_Teclado+0x76>
 308:	00 c0       	rjmp	.+0      	; 0x30a <Leitura_Teclado+0x7c>
 30a:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 30c:	4c 99       	sbic	0x09, 4	; 9
 30e:	09 c0       	rjmp	.+18     	; 0x322 <Leitura_Teclado+0x94>
	{
		if(tecla_ant) return '\0';
 310:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 314:	81 11       	cpse	r24, r1
 316:	94 c0       	rjmp	.+296    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '2';
 31e:	82 e3       	ldi	r24, 0x32	; 50
 320:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 322:	4d 99       	sbic	0x09, 5	; 9
 324:	09 c0       	rjmp	.+18     	; 0x338 <Leitura_Teclado+0xaa>
	{
		if(tecla_ant) return '\0';
 326:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 32a:	81 11       	cpse	r24, r1
 32c:	89 c0       	rjmp	.+274    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '5';
 334:	85 e3       	ldi	r24, 0x35	; 53
 336:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 338:	4e 99       	sbic	0x09, 6	; 9
 33a:	09 c0       	rjmp	.+18     	; 0x34e <Leitura_Teclado+0xc0>
	{
		if(tecla_ant) return '\0';
 33c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 340:	81 11       	cpse	r24, r1
 342:	7e c0       	rjmp	.+252    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '8';
 34a:	88 e3       	ldi	r24, 0x38	; 56
 34c:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 34e:	4f 99       	sbic	0x09, 7	; 9
 350:	09 c0       	rjmp	.+18     	; 0x364 <Leitura_Teclado+0xd6>
	{
		if(tecla_ant) return '\0';
 352:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 356:	81 11       	cpse	r24, r1
 358:	73 c0       	rjmp	.+230    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '0';
 360:	80 e3       	ldi	r24, 0x30	; 48
 362:	08 95       	ret
		}
	}
	set_bit(PORT_TECLADO, _C2);
 364:	59 9a       	sbi	0x0b, 1	; 11
	clr_bit(PORT_TECLADO, _C3); //seleciona a coluna 3(PD6)
 366:	5a 98       	cbi	0x0b, 2	; 11
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	9c e9       	ldi	r25, 0x9C	; 156
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <Leitura_Teclado+0xde>
 370:	00 c0       	rjmp	.+0      	; 0x372 <Leitura_Teclado+0xe4>
 372:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 374:	4c 99       	sbic	0x09, 4	; 9
 376:	09 c0       	rjmp	.+18     	; 0x38a <Leitura_Teclado+0xfc>
	{
		if(tecla_ant) return '\0';
 378:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 37c:	81 11       	cpse	r24, r1
 37e:	60 c0       	rjmp	.+192    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '3';
 386:	83 e3       	ldi	r24, 0x33	; 51
 388:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 38a:	4d 99       	sbic	0x09, 5	; 9
 38c:	09 c0       	rjmp	.+18     	; 0x3a0 <Leitura_Teclado+0x112>
	{
		if(tecla_ant) return '\0';
 38e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 392:	81 11       	cpse	r24, r1
 394:	55 c0       	rjmp	.+170    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '6';
 39c:	86 e3       	ldi	r24, 0x36	; 54
 39e:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 3a0:	4e 99       	sbic	0x09, 6	; 9
 3a2:	09 c0       	rjmp	.+18     	; 0x3b6 <Leitura_Teclado+0x128>
	{
		if(tecla_ant) return '\0';
 3a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3a8:	81 11       	cpse	r24, r1
 3aa:	4a c0       	rjmp	.+148    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return '9';
 3b2:	89 e3       	ldi	r24, 0x39	; 57
 3b4:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 3b6:	4f 99       	sbic	0x09, 7	; 9
 3b8:	09 c0       	rjmp	.+18     	; 0x3cc <Leitura_Teclado+0x13e>
	{
		if(tecla_ant) return '\0';
 3ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3be:	81 11       	cpse	r24, r1
 3c0:	3f c0       	rjmp	.+126    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return 'B';
 3c8:	82 e4       	ldi	r24, 0x42	; 66
 3ca:	08 95       	ret
		}
	}
	set_bit(PORT_TECLADO, _C3);
 3cc:	5a 9a       	sbi	0x0b, 2	; 11
	clr_bit(PORT_TECLADO, _C4); //seleciona a coluna 4(PD7)
 3ce:	5b 98       	cbi	0x0b, 3	; 11
 3d0:	8f e3       	ldi	r24, 0x3F	; 63
 3d2:	9c e9       	ldi	r25, 0x9C	; 156
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <Leitura_Teclado+0x146>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <Leitura_Teclado+0x14c>
 3da:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1))
 3dc:	4c 99       	sbic	0x09, 4	; 9
 3de:	09 c0       	rjmp	.+18     	; 0x3f2 <Leitura_Teclado+0x164>
	{
		if(tecla_ant) return '\0';
 3e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3e4:	81 11       	cpse	r24, r1
 3e6:	2c c0       	rjmp	.+88     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return 'F';
 3ee:	86 e4       	ldi	r24, 0x46	; 70
 3f0:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L2))
 3f2:	4d 99       	sbic	0x09, 5	; 9
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		if(tecla_ant) return '\0';
 3f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3fa:	81 11       	cpse	r24, r1
 3fc:	21 c0       	rjmp	.+66     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return 'E';
 404:	85 e4       	ldi	r24, 0x45	; 69
 406:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L3))
 408:	4e 99       	sbic	0x09, 6	; 9
 40a:	09 c0       	rjmp	.+18     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		if(tecla_ant) return '\0';
 40c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 410:	81 11       	cpse	r24, r1
 412:	16 c0       	rjmp	.+44     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			tecla_ant = 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return 'D';
 41a:	84 e4       	ldi	r24, 0x44	; 68
 41c:	08 95       	ret
		}
	}
	if(!tst_bit(LE_TECLADO, _L4))
 41e:	4f 99       	sbic	0x09, 7	; 9
 420:	0b c0       	rjmp	.+22     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	{
		if(tecla_ant) return '\0';
 422:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 426:	81 11       	cpse	r24, r1
 428:	0b c0       	rjmp	.+22     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		else
		{
			DIR_TECLADO = 0xFF; //configura todo o barramento do teclado como saída
 42a:	8f ef       	ldi	r24, 0xFF	; 255
 42c:	8a b9       	out	0x0a, r24	; 10
			tecla_ant = 1;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			return 'C';
 434:	83 e4       	ldi	r24, 0x43	; 67
 436:	08 95       	ret
		}
	}
	DIR_TECLADO = 0xFF; //configura todo o barramento do teclado como saída
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	8a b9       	out	0x0a, r24	; 10
	tecla_ant = 0;      //nenhuma tecla foi pressionada	
 43c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	return '\0';
 440:	80 e0       	ldi	r24, 0x00	; 0
}
 442:	08 95       	ret

00000444 <eeprom_read_byte>:
 444:	f9 99       	sbic	0x1f, 1	; 31
 446:	fe cf       	rjmp	.-4      	; 0x444 <eeprom_read_byte>
 448:	92 bd       	out	0x22, r25	; 34
 44a:	81 bd       	out	0x21, r24	; 33
 44c:	f8 9a       	sbi	0x1f, 0	; 31
 44e:	99 27       	eor	r25, r25
 450:	80 b5       	in	r24, 0x20	; 32
 452:	08 95       	ret

00000454 <eeprom_write_byte>:
 454:	26 2f       	mov	r18, r22

00000456 <eeprom_write_r18>:
 456:	f9 99       	sbic	0x1f, 1	; 31
 458:	fe cf       	rjmp	.-4      	; 0x456 <eeprom_write_r18>
 45a:	1f ba       	out	0x1f, r1	; 31
 45c:	92 bd       	out	0x22, r25	; 34
 45e:	81 bd       	out	0x21, r24	; 33
 460:	20 bd       	out	0x20, r18	; 32
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	fa 9a       	sbi	0x1f, 2	; 31
 468:	f9 9a       	sbi	0x1f, 1	; 31
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
