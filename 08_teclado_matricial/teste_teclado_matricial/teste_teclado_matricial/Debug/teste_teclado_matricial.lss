
teste_teclado_matricial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003f0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001520  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c3  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ac2  00000000  00000000  0000249b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f4  00000000  00000000  0000317c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eb1  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	74 65       	ori	r23, 0x54	; 84
  6a:	63 6c       	ori	r22, 0xC3	; 195
  6c:	61 20       	and	r6, r1
  6e:	3d 00       	.word	0x003d	; ????
	...

00000071 <mensagem>:
  71:	54 65 63 6c 61 64 6f 20 34 20 58 20 34 00 00        Teclado 4 X 4..

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e0 ef       	ldi	r30, 0xF0	; 240
  94:	f3 e0       	ldi	r31, 0x03	; 3
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a4 30       	cpi	r26, 0x04	; 4
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>
  a2:	0e 94 5f 01 	call	0x2be	; 0x2be <main>
  a6:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <Status_BF>:
	while(*string) //percorre a string até encontrar o cractere nulo
	{
		while(Status_BF());
		Escreve_Dado(*string++); //envia caractere
	}
}
  ae:	2a 98       	cbi	0x05, 2	; 5
  b0:	29 9a       	sbi	0x05, 1	; 5
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <Status_BF+0x6>
  b8:	00 00       	nop
  ba:	28 9a       	sbi	0x05, 0	; 5
  bc:	95 e0       	ldi	r25, 0x05	; 5
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <Status_BF+0x10>
  c2:	00 00       	nop
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	28 98       	cbi	0x05, 0	; 5
  c8:	95 e0       	ldi	r25, 0x05	; 5
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <Status_BF+0x1c>
  ce:	00 00       	nop
  d0:	28 9a       	sbi	0x05, 0	; 5
  d2:	95 e0       	ldi	r25, 0x05	; 5
  d4:	9a 95       	dec	r25
  d6:	f1 f7       	brne	.-4      	; 0xd4 <Status_BF+0x26>
  d8:	00 00       	nop
  da:	28 98       	cbi	0x05, 0	; 5
  dc:	29 98       	cbi	0x05, 1	; 5
  de:	83 ff       	sbrs	r24, 3
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <Status_BF+0x38>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	08 95       	ret
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret

000000ea <Pulso_Enable>:
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <Pulso_Enable+0x2>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Pulso_Enable+0x8>
  f2:	28 9a       	sbi	0x05, 0	; 5
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Pulso_Enable+0xc>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <Pulso_Enable+0x12>
  fc:	28 98       	cbi	0x05, 0	; 5
  fe:	08 95       	ret

00000100 <Escreve_CMD>:
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
 104:	88 b1       	in	r24, 0x08	; 8
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	9c 2f       	mov	r25, r28
 10a:	92 95       	swap	r25
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 2b       	or	r24, r25
 110:	88 b9       	out	0x08, r24	; 8
 112:	0e 94 75 00 	call	0xea	; 0xea <Pulso_Enable>
 116:	88 b1       	in	r24, 0x08	; 8
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	cf 70       	andi	r28, 0x0F	; 15
 11c:	c8 2b       	or	r28, r24
 11e:	c8 b9       	out	0x08, r28	; 8
 120:	cf 91       	pop	r28
 122:	0c 94 75 00 	jmp	0xea	; 0xea <Pulso_Enable>

00000126 <Escreve_Instrucao>:
 126:	97 b1       	in	r25, 0x07	; 7
 128:	9f 60       	ori	r25, 0x0F	; 15
 12a:	97 b9       	out	0x07, r25	; 7
 12c:	2a 98       	cbi	0x05, 2	; 5
 12e:	29 98       	cbi	0x05, 1	; 5
 130:	0e 94 80 00 	call	0x100	; 0x100 <Escreve_CMD>
 134:	80 ef       	ldi	r24, 0xF0	; 240
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <Escreve_Instrucao+0x10>
 13a:	29 98       	cbi	0x05, 1	; 5
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	87 b9       	out	0x07, r24	; 7
 142:	08 95       	ret

00000144 <Escreve_Dado>:
 144:	97 b1       	in	r25, 0x07	; 7
 146:	9f 60       	ori	r25, 0x0F	; 15
 148:	97 b9       	out	0x07, r25	; 7
 14a:	2a 9a       	sbi	0x05, 2	; 5
 14c:	29 98       	cbi	0x05, 1	; 5
 14e:	0e 94 80 00 	call	0x100	; 0x100 <Escreve_CMD>
 152:	2a 98       	cbi	0x05, 2	; 5
 154:	80 ef       	ldi	r24, 0xF0	; 240
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <Escreve_Dado+0x12>
 15a:	87 b1       	in	r24, 0x07	; 7
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	87 b9       	out	0x07, r24	; 7
 160:	08 95       	ret

00000162 <Inicializa_LCD>:
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	00 d0       	rcall	.+0      	; 0x170 <Inicializa_LCD+0xe>
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	08 2f       	mov	r16, r24
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 184:	89 83       	std	Y+1, r24	; 0x01
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	ab 83       	std	Y+3, r26	; 0x03
 18a:	2a 98       	cbi	0x05, 2	; 5
 18c:	29 98       	cbi	0x05, 1	; 5
 18e:	28 98       	cbi	0x05, 0	; 5
 190:	87 b1       	in	r24, 0x07	; 7
 192:	8f 60       	ori	r24, 0x0F	; 15
 194:	87 b9       	out	0x07, r24	; 7
 196:	84 b1       	in	r24, 0x04	; 4
 198:	87 60       	ori	r24, 0x07	; 7
 19a:	84 b9       	out	0x04, r24	; 4
 19c:	8f e5       	ldi	r24, 0x5F	; 95
 19e:	9a ee       	ldi	r25, 0xEA	; 234
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Inicializa_LCD+0x3e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Inicializa_LCD+0x44>
 1a6:	00 00       	nop
 1a8:	13 e0       	ldi	r17, 0x03	; 3
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	80 7f       	andi	r24, 0xF0	; 240
 1ae:	83 60       	ori	r24, 0x03	; 3
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	0e 94 75 00 	call	0xea	; 0xea <Pulso_Enable>
 1b6:	ef e1       	ldi	r30, 0x1F	; 31
 1b8:	fe e4       	ldi	r31, 0x4E	; 78
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <Inicializa_LCD+0x58>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <Inicializa_LCD+0x5e>
 1c0:	00 00       	nop
 1c2:	11 50       	subi	r17, 0x01	; 1
 1c4:	91 f7       	brne	.-28     	; 0x1aa <Inicializa_LCD+0x48>
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	88 b9       	out	0x08, r24	; 8
 1ce:	0e 94 75 00 	call	0xea	; 0xea <Pulso_Enable>
 1d2:	f5 ed       	ldi	r31, 0xD5	; 213
 1d4:	fa 95       	dec	r31
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Inicializa_LCD+0x72>
 1d8:	00 00       	nop
 1da:	00 23       	and	r16, r16
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <Inicializa_LCD+0x80>
 1de:	88 e2       	ldi	r24, 0x28	; 40
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <Inicializa_LCD+0x82>
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	0e 94 80 00 	call	0x100	; 0x100 <Escreve_CMD>
 1e8:	8f e1       	ldi	r24, 0x1F	; 31
 1ea:	9e e4       	ldi	r25, 0x4E	; 78
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Inicializa_LCD+0x8a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <Inicializa_LCD+0x90>
 1f2:	00 00       	nop
 1f4:	8e 01       	movw	r16, r28
 1f6:	0f 5f       	subi	r16, 0xFF	; 255
 1f8:	1f 4f       	sbci	r17, 0xFF	; 255
 1fa:	7e 01       	movw	r14, r28
 1fc:	94 e0       	ldi	r25, 0x04	; 4
 1fe:	e9 0e       	add	r14, r25
 200:	f1 1c       	adc	r15, r1
 202:	f8 01       	movw	r30, r16
 204:	81 91       	ld	r24, Z+
 206:	8f 01       	movw	r16, r30
 208:	0e 94 80 00 	call	0x100	; 0x100 <Escreve_CMD>
 20c:	28 98       	cbi	0x05, 0	; 5
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9f e1       	ldi	r25, 0x1F	; 31
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <Inicializa_LCD+0xb0>
 216:	00 c0       	rjmp	.+0      	; 0x218 <Inicializa_LCD+0xb6>
 218:	00 00       	nop
 21a:	0e 15       	cp	r16, r14
 21c:	1f 05       	cpc	r17, r15
 21e:	89 f7       	brne	.-30     	; 0x202 <Inicializa_LCD+0xa0>
 220:	87 b1       	in	r24, 0x07	; 7
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	87 b9       	out	0x07, r24	; 7
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <Limpa_Display>:
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 93 00 	call	0x126	; 0x126 <Escreve_Instrucao>
 240:	0e 94 57 00 	call	0xae	; 0xae <Status_BF>
 244:	81 11       	cpse	r24, r1
 246:	fc cf       	rjmp	.-8      	; 0x240 <Limpa_Display+0x6>
 248:	08 95       	ret

0000024a <Cursor_Home>:
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	0e 94 93 00 	call	0x126	; 0x126 <Escreve_Instrucao>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9f e1       	ldi	r25, 0x1F	; 31
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Cursor_Home+0xa>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Cursor_Home+0x10>
 25a:	00 00       	nop
 25c:	08 95       	ret

0000025e <Desloca_Mensagem>:
 25e:	0e 94 93 00 	call	0x126	; 0x126 <Escreve_Instrucao>
 262:	0e 94 57 00 	call	0xae	; 0xae <Status_BF>
 266:	81 11       	cpse	r24, r1
 268:	fc cf       	rjmp	.-8      	; 0x262 <Desloca_Mensagem+0x4>
 26a:	08 95       	ret

0000026c <Display_Cursor_ON_OFF>:
 26c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <Desloca_Mensagem>

00000270 <Posiciona_Cursor>:
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	19 f0       	breq	.+6      	; 0x27a <Posiciona_Cursor+0xa>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	29 f0       	breq	.+10     	; 0x282 <Posiciona_Cursor+0x12>
 278:	08 95       	ret
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	86 0f       	add	r24, r22
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	03 c0       	rjmp	.+6      	; 0x288 <Posiciona_Cursor+0x18>
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	86 0f       	add	r24, r22
 286:	80 6c       	ori	r24, 0xC0	; 192
 288:	0c 94 93 00 	jmp	0x126	; 0x126 <Escreve_Instrucao>

0000028c <Escreve_S_memprogm>:

/* Esta função escreve uma string da memória de programa */
void Escreve_S_memprogm(const unsigned char *string)
{
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
	while(pgm_read_byte(&(*string))) //percorre a string até encontrar o cractere nulo
 296:	8e 01       	movw	r16, r28
 298:	fe 01       	movw	r30, r28
 29a:	84 91       	lpm	r24, Z
 29c:	88 23       	and	r24, r24
 29e:	51 f0       	breq	.+20     	; 0x2b4 <Escreve_S_memprogm+0x28>
	{
		while(Status_BF());
 2a0:	0e 94 57 00 	call	0xae	; 0xae <Status_BF>
 2a4:	81 11       	cpse	r24, r1
 2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <Escreve_S_memprogm+0x14>
		Escreve_Dado(pgm_read_byte(&(*string++))); //envia um caractere
 2a8:	21 96       	adiw	r28, 0x01	; 1
 2aa:	f8 01       	movw	r30, r16
 2ac:	84 91       	lpm	r24, Z
 2ae:	0e 94 a2 00 	call	0x144	; 0x144 <Escreve_Dado>
 2b2:	f1 cf       	rjmp	.-30     	; 0x296 <Escreve_S_memprogm+0xa>
	}
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <main>:

int main(void)
{
	unsigned char n_teclado; //variável de leitura do teclado
	
    DDRD = 0x0F;  //configura os pinos PD3:0 como entradas e PD4:7 como saída
 2be:	8f e0       	ldi	r24, 0x0F	; 15
 2c0:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x0F;  //configura os pinos PC3:0 como saídas e os pinos restantes como entradas
 2c2:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x07;  //configura os pinos PB2:0 como saídas e os pinos restantes como entradas
 2c4:	87 e0       	ldi	r24, 0x07	; 7
 2c6:	84 b9       	out	0x04, r24	; 4
	PORTD = 0xFF; //habilita os resistores de pull-up das entradas e coloca os pinos restantes em nível baixo
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	8b b9       	out	0x0b, r24	; 11
	PORTC = 0x00; //coloca todo o PORTC em nível baixo
 2cc:	18 b8       	out	0x08, r1	; 8
	PORTB = 0x00; //coloca todo o PORTB em nível baixo
 2ce:	15 b8       	out	0x05, r1	; 5
	
	UCSR0B = 0x00; //configura os pinos RX e TX como pinos I/0s
 2d0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	Inicializa_LCD(LCD_2_N);       //inicia dispay com duas linhas
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 b1 00 	call	0x162	; 0x162 <Inicializa_LCD>
    Display_Cursor_ON_OFF(LCD_DSP_ON_CS_OFF); //mantém a tela do display ligada e desliga o cursor
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	0e 94 36 01 	call	0x26c	; 0x26c <Display_Cursor_ON_OFF>
	Limpa_Display();               //limpa a tela do dispay
 2e0:	0e 94 1d 01 	call	0x23a	; 0x23a <Limpa_Display>
	Cursor_Home();	               //posiciona o cursor na primeira coluna da promeira linha
 2e4:	0e 94 25 01 	call	0x24a	; 0x24a <Cursor_Home>
	Escreve_S_memprogm(mensagem); 
 2e8:	81 e7       	ldi	r24, 0x71	; 113
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 46 01 	call	0x28c	; 0x28c <Escreve_S_memprogm>
	Posiciona_Cursor(2, 8);        //posiciona o cursor na primeira coluna da segunda linha
 2f0:	68 e0       	ldi	r22, 0x08	; 8
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 38 01 	call	0x270	; 0x270 <Posiciona_Cursor>
	Escreve_S_memprogm(mensagem1);
 2fa:	88 e6       	ldi	r24, 0x68	; 104
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 46 01 	call	0x28c	; 0x28c <Escreve_S_memprogm>
	
	while(1)
	{
		n_teclado = Leitura_Teclado();
 302:	0e 94 8f 01 	call	0x31e	; 0x31e <Leitura_Teclado>
 306:	c8 2f       	mov	r28, r24
		if(n_teclado != '\0')
 308:	88 23       	and	r24, r24
 30a:	d9 f3       	breq	.-10     	; 0x302 <main+0x44>
		{
			Posiciona_Cursor(2, 16); //desloca o cursor para a última coluna da segunda linha
 30c:	60 e1       	ldi	r22, 0x10	; 16
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	0e 94 38 01 	call	0x270	; 0x270 <Posiciona_Cursor>
			Escreve_Dado(n_teclado); //escreve valor da tecla no formato ASCII
 316:	8c 2f       	mov	r24, r28
 318:	0e 94 a2 00 	call	0x144	; 0x144 <Escreve_Dado>
 31c:	f2 cf       	rjmp	.-28     	; 0x302 <main+0x44>

0000031e <Leitura_Teclado>:
#include "definicoes_principais.h" //inclui a biblioteca de funções do teclado hexadecimal

/* Esta função retorna o caractere correspondente à tecla pressionada */
unsigned char Leitura_Teclado(void)
{
    DIR_TECLADO = 0x0F;  //configura as linhas como entradas e as colunas como saída
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	8a b9       	out	0x0a, r24	; 10
	PORT_TECLADO = 0xFF; //habilita pull-ups das entrada e coloca entradas em nível alto
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	8b b9       	out	0x0b, r24	; 11
	clr_bit(PORT_TECLADO, _C1); //seleciona a coluna 1(PD4)
 326:	58 98       	cbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 328:	8f e3       	ldi	r24, 0x3F	; 63
 32a:	9c e9       	ldi	r25, 0x9C	; 156
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <Leitura_Teclado+0xe>
 330:	00 c0       	rjmp	.+0      	; 0x332 <Leitura_Teclado+0x14>
 332:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return '1';
 334:	4c 9b       	sbis	0x09, 4	; 9
 336:	3a c0       	rjmp	.+116    	; 0x3ac <Leitura_Teclado+0x8e>
	if(!tst_bit(LE_TECLADO, _L2)) return '4';
 338:	4d 9b       	sbis	0x09, 5	; 9
 33a:	3a c0       	rjmp	.+116    	; 0x3b0 <Leitura_Teclado+0x92>
	if(!tst_bit(LE_TECLADO, _L3)) return '7';
 33c:	4e 9b       	sbis	0x09, 6	; 9
 33e:	3a c0       	rjmp	.+116    	; 0x3b4 <Leitura_Teclado+0x96>
	if(!tst_bit(LE_TECLADO, _L4)) return 'A';
 340:	4f 9b       	sbis	0x09, 7	; 9
 342:	3a c0       	rjmp	.+116    	; 0x3b8 <Leitura_Teclado+0x9a>
	set_bit(PORT_TECLADO, _C1);
 344:	58 9a       	sbi	0x0b, 0	; 11
	clr_bit(PORT_TECLADO, _C2); //seleciona a coluna 2(PD5)
 346:	59 98       	cbi	0x0b, 1	; 11
 348:	8f e3       	ldi	r24, 0x3F	; 63
 34a:	9c e9       	ldi	r25, 0x9C	; 156
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <Leitura_Teclado+0x2e>
 350:	00 c0       	rjmp	.+0      	; 0x352 <Leitura_Teclado+0x34>
 352:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return '2';
 354:	4c 9b       	sbis	0x09, 4	; 9
 356:	32 c0       	rjmp	.+100    	; 0x3bc <Leitura_Teclado+0x9e>
	if(!tst_bit(LE_TECLADO, _L2)) return '5';
 358:	4d 9b       	sbis	0x09, 5	; 9
 35a:	32 c0       	rjmp	.+100    	; 0x3c0 <Leitura_Teclado+0xa2>
	if(!tst_bit(LE_TECLADO, _L3)) return '8';
 35c:	4e 9b       	sbis	0x09, 6	; 9
 35e:	32 c0       	rjmp	.+100    	; 0x3c4 <Leitura_Teclado+0xa6>
	if(!tst_bit(LE_TECLADO, _L4)) return '0';
 360:	4f 9b       	sbis	0x09, 7	; 9
 362:	32 c0       	rjmp	.+100    	; 0x3c8 <Leitura_Teclado+0xaa>
	set_bit(PORT_TECLADO, _C2);
 364:	59 9a       	sbi	0x0b, 1	; 11
	clr_bit(PORT_TECLADO, _C3); //seleciona a coluna 3(PD6)
 366:	5a 98       	cbi	0x0b, 2	; 11
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	9c e9       	ldi	r25, 0x9C	; 156
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <Leitura_Teclado+0x4e>
 370:	00 c0       	rjmp	.+0      	; 0x372 <Leitura_Teclado+0x54>
 372:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return '3';
 374:	4c 9b       	sbis	0x09, 4	; 9
 376:	2a c0       	rjmp	.+84     	; 0x3cc <Leitura_Teclado+0xae>
	if(!tst_bit(LE_TECLADO, _L2)) return '6';
 378:	4d 9b       	sbis	0x09, 5	; 9
 37a:	2a c0       	rjmp	.+84     	; 0x3d0 <Leitura_Teclado+0xb2>
	if(!tst_bit(LE_TECLADO, _L3)) return '9';
 37c:	4e 9b       	sbis	0x09, 6	; 9
 37e:	2a c0       	rjmp	.+84     	; 0x3d4 <Leitura_Teclado+0xb6>
	if(!tst_bit(LE_TECLADO, _L4)) return 'B';
 380:	4f 9b       	sbis	0x09, 7	; 9
 382:	2a c0       	rjmp	.+84     	; 0x3d8 <Leitura_Teclado+0xba>
	set_bit(PORT_TECLADO, _C3);
 384:	5a 9a       	sbi	0x0b, 2	; 11
	clr_bit(PORT_TECLADO, _C4); //seleciona a coluna 4(PD7)
 386:	5b 98       	cbi	0x0b, 3	; 11
 388:	8f e3       	ldi	r24, 0x3F	; 63
 38a:	9c e9       	ldi	r25, 0x9C	; 156
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <Leitura_Teclado+0x6e>
 390:	00 c0       	rjmp	.+0      	; 0x392 <Leitura_Teclado+0x74>
 392:	00 00       	nop
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return 'F';
 394:	4c 9b       	sbis	0x09, 4	; 9
 396:	22 c0       	rjmp	.+68     	; 0x3dc <Leitura_Teclado+0xbe>
	if(!tst_bit(LE_TECLADO, _L2)) return 'E';
 398:	4d 9b       	sbis	0x09, 5	; 9
 39a:	22 c0       	rjmp	.+68     	; 0x3e0 <Leitura_Teclado+0xc2>
	if(!tst_bit(LE_TECLADO, _L3)) return 'D';
 39c:	4e 9b       	sbis	0x09, 6	; 9
 39e:	22 c0       	rjmp	.+68     	; 0x3e4 <Leitura_Teclado+0xc6>
	if(!tst_bit(LE_TECLADO, _L4)) return 'C';
 3a0:	4f 9b       	sbis	0x09, 7	; 9
 3a2:	22 c0       	rjmp	.+68     	; 0x3e8 <Leitura_Teclado+0xca>
	DIR_TECLADO = 0xFF; //configura todo o barramento do teclado como saída
 3a4:	8f ef       	ldi	r24, 0xFF	; 255
 3a6:	8a b9       	out	0x0a, r24	; 10
	return '\0';
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret
{
    DIR_TECLADO = 0x0F;  //configura as linhas como entradas e as colunas como saída
	PORT_TECLADO = 0xFF; //habilita pull-ups das entrada e coloca entradas em nível alto
	clr_bit(PORT_TECLADO, _C1); //seleciona a coluna 1(PD4)
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return '1';
 3ac:	81 e3       	ldi	r24, 0x31	; 49
 3ae:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L2)) return '4';
 3b0:	84 e3       	ldi	r24, 0x34	; 52
 3b2:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L3)) return '7';
 3b4:	87 e3       	ldi	r24, 0x37	; 55
 3b6:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L4)) return 'A';
 3b8:	81 e4       	ldi	r24, 0x41	; 65
 3ba:	08 95       	ret
	set_bit(PORT_TECLADO, _C1);
	clr_bit(PORT_TECLADO, _C2); //seleciona a coluna 2(PD5)
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return '2';
 3bc:	82 e3       	ldi	r24, 0x32	; 50
 3be:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L2)) return '5';
 3c0:	85 e3       	ldi	r24, 0x35	; 53
 3c2:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L3)) return '8';
 3c4:	88 e3       	ldi	r24, 0x38	; 56
 3c6:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L4)) return '0';
 3c8:	80 e3       	ldi	r24, 0x30	; 48
 3ca:	08 95       	ret
	set_bit(PORT_TECLADO, _C2);
	clr_bit(PORT_TECLADO, _C3); //seleciona a coluna 3(PD6)
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return '3';
 3cc:	83 e3       	ldi	r24, 0x33	; 51
 3ce:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L2)) return '6';
 3d0:	86 e3       	ldi	r24, 0x36	; 54
 3d2:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L3)) return '9';
 3d4:	89 e3       	ldi	r24, 0x39	; 57
 3d6:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L4)) return 'B';
 3d8:	82 e4       	ldi	r24, 0x42	; 66
 3da:	08 95       	ret
	set_bit(PORT_TECLADO, _C3);
	clr_bit(PORT_TECLADO, _C4); //seleciona a coluna 4(PD7)
	_delay_ms(10);
	if(!tst_bit(LE_TECLADO, _L1)) return 'F';
 3dc:	86 e4       	ldi	r24, 0x46	; 70
 3de:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L2)) return 'E';
 3e0:	85 e4       	ldi	r24, 0x45	; 69
 3e2:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L3)) return 'D';
 3e4:	84 e4       	ldi	r24, 0x44	; 68
 3e6:	08 95       	ret
	if(!tst_bit(LE_TECLADO, _L4)) return 'C';
 3e8:	83 e4       	ldi	r24, 0x43	; 67
	DIR_TECLADO = 0xFF; //configura todo o barramento do teclado como saída
	return '\0';
}
 3ea:	08 95       	ret

000003ec <_exit>:
 3ec:	f8 94       	cli

000003ee <__stop_program>:
 3ee:	ff cf       	rjmp	.-2      	; 0x3ee <__stop_program>
