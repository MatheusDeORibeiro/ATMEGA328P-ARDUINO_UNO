
INT0_1_aninhada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000771  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  00000991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d1  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001741  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
ISR(INT0_vect);
ISR(INT1_vect);
//----------------------------------------------------------------------------------
int main()
{
	DDRD = 0b11000000;  //configurando os pinos de entrada e saída
  80:	80 ec       	ldi	r24, 0xC0	; 192
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00111111; //desligando leds e habilitando pull-ups
  84:	8f e3       	ldi	r24, 0x3F	; 63
  86:	8b b9       	out	0x0b, r24	; 11
	
	UCSR0B = 0x00;      //desabilitando RX e TX para trabalho com os pinos do Arduino
  88:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	EICRA = 0x00;       //interrupções externas INT0 e INT1 no nível zero.
  8c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1 << INT1) | (1 << INT0); //habilita as duas interrupções
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	8d bb       	out	0x1d, r24	; 29
	sei(); //habilita interrupções globais, ativando o bit I do SREG
  94:	78 94       	sei
	
	while(1) //pisca led numa velocidade muito grande (visualmente fica ligado)
	    cpl_bit(PORTD, LED2);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 58       	subi	r24, 0x80	; 128
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0x16>

0000009e <__vector_1>:
} 
//----------------------------------------------------------------------------------
ISR(INT0_vect) //interrupção externa 0, quando o botão é pressionado o LED pisca
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	unsigned char sreg;
	
	sreg = SREG; //salva SREG porque a interrupção pode alterar o seu valor
  b0:	9f b7       	in	r25, 0x3f	; 63
	
	clr_bit(EIMSK, INT0); //desabilita INTO para que ele não chame a si mesmo
  b2:	8d b3       	in	r24, 0x1d	; 29
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	8d bb       	out	0x1d, r24	; 29
	sei();                //habilita a interrupção geral, agora INT1 pode interromper INT0
  b8:	78 94       	sei
	
	cpl_bit(PORTD, LED1); //pisca led a cada 300 ms
  ba:	2b b1       	in	r18, 0x0b	; 11
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	82 27       	eor	r24, r18
  c0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	35 ea       	ldi	r19, 0xA5	; 165
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__vector_1+0x2a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <__vector_1+0x34>
  d2:	00 00       	nop
	_delay_ms(300);
	set_bit(EIMSK, INT0); //habilita novamente a interrupção INT0
  d4:	8d b3       	in	r24, 0x1d	; 29
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8d bb       	out	0x1d, r24	; 29
	
	SREG = sreg; //restaura o valor de SREG que pode ter sido alterado
  da:	9f bf       	out	0x3f, r25	; 63
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_2>:
//----------------------------------------------------------------------------------
ISR(INT1_vect) //interrupção externa 1, mantendo o botão pressionado o LED pisca
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	cpl_bit(PORTD, LED1); //pisca led a cada 200 ms
  fe:	9b b1       	in	r25, 0x0b	; 11
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	89 27       	eor	r24, r25
 104:	8b b9       	out	0x0b, r24	; 11
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <__vector_2+0x1e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <__vector_2+0x28>
 116:	00 00       	nop
	_delay_ms(200);
}
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
