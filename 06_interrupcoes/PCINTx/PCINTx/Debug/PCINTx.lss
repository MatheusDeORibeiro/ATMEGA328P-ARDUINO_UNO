
PCINTx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000712  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  000008fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a5  00000000  00000000  00000f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

ISR(PCINT1_vect);

int main()
{
	DDRC = 0x00; //PORTC como entrada, 3 botões
  80:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF; //habilita pull-ups
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	88 b9       	out	0x08, r24	; 8
	DDRD = 0b11100000; //pinos PD5:7 do PORTC como saída (leds)
  86:	80 ee       	ldi	r24, 0xE0	; 224
  88:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x1F;      //apaga leds e habilita pull-ups dos pinos não utilizados
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	8b b9       	out	0x0b, r24	; 11
	
	PCICR = 1 << PCIE1; //habilita interrupção por qualquer mudança de sinal no PORTC
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1 << PCINT10) | (1 << PCINT9) | (1 << PCINT8); /*habilita os pinos PCINT8:10 para
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	                                                           gerar interrupção*/
	sei(); //habilita as interrupções
  9a:	78 94       	sei
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0x1c>

0000009e <__vector_4>:
	
	while(1){}
}
//----------------------------------------------------------------------------------
ISR(PCINT1_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
	//quando houver mais de um pino que possa gerar a interrupção é necessário testar qual foi
	if(!tst_bit(PINC, PC0))
  ae:	30 99       	sbic	0x06, 0	; 6
  b0:	05 c0       	rjmp	.+10     	; 0xbc <__vector_4+0x1e>
	    cpl_bit(PORTD, LED0);
  b2:	9b b1       	in	r25, 0x0b	; 11
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	89 27       	eor	r24, r25
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	0c c0       	rjmp	.+24     	; 0xd4 <__vector_4+0x36>
	else if(!tst_bit(PINC, PC1))
  bc:	31 99       	sbic	0x06, 1	; 6
  be:	05 c0       	rjmp	.+10     	; 0xca <__vector_4+0x2c>
	    cpl_bit(PORTD, LED1);
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	80 e4       	ldi	r24, 0x40	; 64
  c4:	89 27       	eor	r24, r25
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <__vector_4+0x36>
	else if(!tst_bit(PINC, PC2))
  ca:	32 99       	sbic	0x06, 2	; 6
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <__vector_4+0x36>
	    cpl_bit(PORTD, LED2);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	80 58       	subi	r24, 0x80	; 128
  d2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	83 ec       	ldi	r24, 0xC3	; 195
  d8:	99 e0       	ldi	r25, 0x09	; 9
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <__vector_4+0x3c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <__vector_4+0x46>
  e4:	00 00       	nop
	_delay_ms(200);
}
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
