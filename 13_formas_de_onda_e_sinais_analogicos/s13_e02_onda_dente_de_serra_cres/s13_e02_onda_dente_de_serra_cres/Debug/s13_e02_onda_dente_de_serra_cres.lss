
s13_e02_onda_dente_de_serra_cres.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a2  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000715  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000430  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000017f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000488  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_16>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	01 02       	muls	r16, r17
  6c:	03 04       	cpc	r0, r3
  6e:	05 06       	cpc	r0, r21
  70:	07 08       	sbc	r0, r7
  72:	09 0a       	sbc	r0, r25
  74:	0b 0c       	add	r0, r11
  76:	0d 0e       	add	r0, r29
  78:	0f 10       	cpse	r0, r15
  7a:	11 12       	cpse	r1, r17
  7c:	13 14       	cp	r1, r3
  7e:	15 16       	cp	r1, r21
  80:	17 18       	sub	r1, r7
  82:	19 1a       	sub	r1, r25
  84:	1b 1c       	adc	r1, r11
  86:	1d 1e       	adc	r1, r29
  88:	1f 20       	and	r1, r15
  8a:	21 22       	and	r2, r17
  8c:	23 24       	eor	r2, r3
  8e:	25 26       	eor	r2, r21
  90:	27 28       	or	r2, r7
  92:	29 2a       	or	r2, r25
  94:	2b 2c       	mov	r2, r11
  96:	2d 2e       	mov	r2, r29
  98:	2f 30       	cpi	r18, 0x0F	; 15
  9a:	31 32       	cpi	r19, 0x21	; 33
  9c:	33 34       	cpi	r19, 0x43	; 67
  9e:	35 36       	cpi	r19, 0x65	; 101
  a0:	37 38       	cpi	r19, 0x87	; 135
  a2:	39 3a       	cpi	r19, 0xA9	; 169
  a4:	3b 3c       	cpi	r19, 0xCB	; 203
  a6:	3d 3e       	cpi	r19, 0xED	; 237
  a8:	3f 40       	sbci	r19, 0x0F	; 15
  aa:	41 42       	sbci	r20, 0x21	; 33
  ac:	43 44       	sbci	r20, 0x43	; 67
  ae:	45 46       	sbci	r20, 0x65	; 101
  b0:	47 48       	sbci	r20, 0x87	; 135
  b2:	49 4a       	sbci	r20, 0xA9	; 169
  b4:	4b 4c       	sbci	r20, 0xCB	; 203
  b6:	4d 4e       	sbci	r20, 0xED	; 237
  b8:	4f 50       	subi	r20, 0x0F	; 15
  ba:	51 52       	subi	r21, 0x21	; 33
  bc:	53 54       	subi	r21, 0x43	; 67
  be:	55 56       	subi	r21, 0x65	; 101
  c0:	57 58       	subi	r21, 0x87	; 135
  c2:	59 5a       	subi	r21, 0xA9	; 169
  c4:	5b 5c       	subi	r21, 0xCB	; 203
  c6:	5d 5e       	subi	r21, 0xED	; 237
  c8:	5f 60       	ori	r21, 0x0F	; 15
  ca:	61 62       	ori	r22, 0x21	; 33
  cc:	63 64       	ori	r22, 0x43	; 67
  ce:	65 66       	ori	r22, 0x65	; 101
  d0:	67 68       	ori	r22, 0x87	; 135
  d2:	69 6a       	ori	r22, 0xA9	; 169
  d4:	6b 6c       	ori	r22, 0xCB	; 203
  d6:	6d 6e       	ori	r22, 0xED	; 237
  d8:	6f 70       	andi	r22, 0x0F	; 15
  da:	71 72       	andi	r23, 0x21	; 33
  dc:	73 74       	andi	r23, 0x43	; 67
  de:	75 76       	andi	r23, 0x65	; 101
  e0:	77 78       	andi	r23, 0x87	; 135
  e2:	79 7a       	andi	r23, 0xA9	; 169
  e4:	7b 7c       	andi	r23, 0xCB	; 203
  e6:	7d 7e       	andi	r23, 0xED	; 237
  e8:	7f 80       	ldd	r7, Y+7	; 0x07
  ea:	81 82       	std	Z+1, r8	; 0x01
  ec:	83 84       	ldd	r8, Z+11	; 0x0b
  ee:	85 86       	std	Z+13, r8	; 0x0d
  f0:	87 88       	ldd	r8, Z+23	; 0x17
  f2:	89 8a       	std	Y+17, r8	; 0x11
  f4:	8b 8c       	ldd	r8, Y+27	; 0x1b
  f6:	8d 8e       	std	Y+29, r8	; 0x1d
  f8:	8f 90       	pop	r8
  fa:	91 92       	st	Z+, r9
  fc:	93 94       	inc	r9
  fe:	95 96       	adiw	r26, 0x25	; 37
 100:	97 98       	cbi	0x12, 7	; 18
 102:	99 9a       	sbi	0x13, 1	; 19
 104:	9b 9c       	mul	r9, r11
 106:	9d 9e       	mul	r9, r29
 108:	9f a0       	ldd	r9, Y+39	; 0x27
 10a:	a1 a2       	std	Z+33, r10	; 0x21
 10c:	a3 a4       	ldd	r10, Z+43	; 0x2b
 10e:	a5 a6       	std	Z+45, r10	; 0x2d
 110:	a7 a8       	ldd	r10, Z+55	; 0x37
 112:	a9 aa       	std	Y+49, r10	; 0x31
 114:	ab ac       	ldd	r10, Y+59	; 0x3b
 116:	ad ae       	std	Y+61, r10	; 0x3d
 118:	af b0       	in	r10, 0x0f	; 15
 11a:	b1 b2       	in	r11, 0x11	; 17
 11c:	b3 b4       	in	r11, 0x23	; 35
 11e:	b5 b6       	in	r11, 0x35	; 53
 120:	b7 b8       	out	0x07, r11	; 7
 122:	b9 ba       	out	0x19, r11	; 25
 124:	bb bc       	out	0x2b, r11	; 43
 126:	bd be       	out	0x3d, r11	; 61
 128:	bf c0       	rjmp	.+382    	; 0x2a8 <Inicializa_TC0+0x64>
 12a:	c1 c2       	rjmp	.+1410   	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
 12c:	c3 c4       	rjmp	.+2438   	; 0xab4 <__stack+0x1b5>
 12e:	c5 c6       	rjmp	.+3466   	; 0xeba <__stack+0x5bb>
 130:	c7 c8       	rjmp	.-3698   	; 0xfffff2c0 <__eeprom_end+0xff7ef2c0>
 132:	c9 ca       	rjmp	.-2670   	; 0xfffff6c6 <__eeprom_end+0xff7ef6c6>
 134:	cb cc       	rjmp	.-1642   	; 0xfffffacc <__eeprom_end+0xff7efacc>
 136:	cd ce       	rjmp	.-614    	; 0xfffffed2 <__eeprom_end+0xff7efed2>
 138:	cf d0       	rcall	.+414    	; 0x2d8 <__data_load_end+0x26>
 13a:	d1 d2       	rcall	.+1442   	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
 13c:	d3 d4       	rcall	.+2470   	; 0xae4 <__stack+0x1e5>
 13e:	d5 d6       	rcall	.+3498   	; 0xeea <__stack+0x5eb>
 140:	d7 d8       	rcall	.-3666   	; 0xfffff2f0 <__eeprom_end+0xff7ef2f0>
 142:	d9 da       	rcall	.-2638   	; 0xfffff6f6 <__eeprom_end+0xff7ef6f6>
 144:	db dc       	rcall	.-1610   	; 0xfffffafc <__eeprom_end+0xff7efafc>
 146:	dd de       	rcall	.-582    	; 0xffffff02 <__eeprom_end+0xff7eff02>
 148:	df e0       	ldi	r29, 0x0F	; 15
 14a:	e1 e2       	ldi	r30, 0x21	; 33
 14c:	e3 e4       	ldi	r30, 0x43	; 67
 14e:	e5 e6       	ldi	r30, 0x65	; 101
 150:	e7 e8       	ldi	r30, 0x87	; 135
 152:	e9 ea       	ldi	r30, 0xA9	; 169
 154:	eb ec       	ldi	r30, 0xCB	; 203
 156:	ed ee       	ldi	r30, 0xED	; 237
 158:	ef f0       	brie	.+58     	; 0x194 <.do_clear_bss_start>
 15a:	f1 f2       	breq	.-68     	; 0x118 <__trampolines_end+0xb0>
 15c:	f3 f4       	brvc	.+60     	; 0x19a <.do_clear_bss_start+0x6>
 15e:	f5 f6       	brhc	.-68     	; 0x11c <__trampolines_end+0xb4>
 160:	f7 f8       	bld	r15, 7
 162:	f9 fa       	.word	0xfaf9	; ????
 164:	fb fc       	.word	0xfcfb	; ????
 166:	fd 00       	.word	0x00fd	; ????

00000168 <__ctors_end>:
 168:	11 24       	eor	r1, r1
 16a:	1f be       	out	0x3f, r1	; 63
 16c:	cf ef       	ldi	r28, 0xFF	; 255
 16e:	d8 e0       	ldi	r29, 0x08	; 8
 170:	de bf       	out	0x3e, r29	; 62
 172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	e0 eb       	ldi	r30, 0xB0	; 176
 17c:	f2 e0       	ldi	r31, 0x02	; 2
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
 180:	05 90       	lpm	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	a2 30       	cpi	r26, 0x02	; 2
 186:	b1 07       	cpc	r27, r17
 188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	a2 e0       	ldi	r26, 0x02	; 2
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a4 30       	cpi	r26, 0x04	; 4
 196:	b2 07       	cpc	r27, r18
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
 19e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <main>:

ISR(TIMER0_OVF_vect); //declaração da rotina de tratamento do estouro do TCNT0

int main() //função principal
{
    DDRD = 0xFF;   //configura todo o PORTD como saída
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	8a b9       	out	0x0a, r24	; 10
    DDRC = 0xFC;   //configura os pinos PC1:0 como entradas e os pinos restantes como saída
 1aa:	9c ef       	ldi	r25, 0xFC	; 252
 1ac:	97 b9       	out	0x07, r25	; 7
    DDRB = 0xFF;   //configura todo o PORTB como saída
 1ae:	84 b9       	out	0x04, r24	; 4
    PORTD = 0x00;  //inicializa todo o PORTD em nível baixo
 1b0:	1b b8       	out	0x0b, r1	; 11
    PORTC = 0x03;  //habilita os resistores de pull-up das entradas e inicializa os pinos restantes em nível baixo
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	88 b9       	out	0x08, r24	; 8
    PORTB = 0x00;  //inicializa todo o PORTB em nível baixo
 1b6:	15 b8       	out	0x05, r1	; 5
    UCSR0B = 0x00; //configura os pinos PD1:0 como I/Os digitais
 1b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    /* frequência do sinal igual a 1Hz, assim, o período de amostragem mínimo deve ser igual a:
       f = 1 / (255 * dt) -> 1 = 1 / (255 * dt) -> dt = 3,92ms */
    Inicializa_TC0(TC0_modo_normal, TC0_OC0A_normal&TC0_OC0B_normal&TC0_CLK_1024, TC0_TOIE0);
 1bc:	4e ef       	ldi	r20, 0xFE	; 254
 1be:	6d e0       	ldi	r22, 0x0D	; 13
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 22 01 	call	0x244	; 0x244 <Inicializa_TC0>
    /* TC1 modo normal, f_osc igual a 16MHz, prescaler igual a 1024, saídas comparadoras desabilitadas,
       interrupção por estouro do registrador TCNT0 habilitada:
       t_estouro = dt = N * (255 - TCNT0 + 1) / f_osc
       3,92m = 1024 * (65535 - TCNT0 + 1) / 16M -> TCNT0 = 195
    */
    TCNT0 = periodo;
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ca:	86 bd       	out	0x26, r24	; 38
    sei(); //habilita todas as fontes de interrupção setando o bit I do registrador SREG
 1cc:	78 94       	sei
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0x28>

000001d0 <__vector_16>:
    while(1) //loop infinito
    {    }
}

ISR(TIMER0_OVF_vect) //implementação da rotina de tratamento do estouro do TCNT0
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
    static unsigned char conta_tempo = 0, n = 0; //variáveis auxiliar
    TCNT0 = periodo;                             //atualiza valor do registrador do TC0
 1e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e4:	86 bd       	out	0x26, r24	; 38
    conta_tempo++;                               //incrementa a variável auxiliar de contagem de tempo
 1e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <conta_tempo.1913>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <conta_tempo.1913>
    n++;                                         //incrementa n para selecionar o próximo elemento do vetor
 1f0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 1f4:	ef 5f       	subi	r30, 0xFF	; 255
 1f6:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <__data_end>
    if(conta_tempo == 25)                        //se passou 100ms?...
 1fa:	89 31       	cpi	r24, 0x19	; 25
 1fc:	59 f4       	brne	.+22     	; 0x214 <__vector_16+0x44>
    {
        if(!tst_bit(PINC, AUMENTA))              //se AUMENTA for pressionado...
 1fe:	30 99       	sbic	0x06, 0	; 6
 200:	04 c0       	rjmp	.+8      	; 0x20a <__vector_16+0x3a>
            periodo =- 10;                       //aumenta a frequênica, logo, diminui o período
 202:	86 ef       	ldi	r24, 0xF6	; 246
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	05 c0       	rjmp	.+10     	; 0x214 <__vector_16+0x44>
        else if(!tst_bit(PINC, DIMINUI))         //se DIMINUI for pressionado...
 20a:	31 99       	sbic	0x06, 1	; 6
 20c:	03 c0       	rjmp	.+6      	; 0x214 <__vector_16+0x44>
            periodo =+ 10;                       //diminui a frequênica, logo, aumenta o período
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    }
    PORTD = pgm_read_byte(&onda_dente_de_serra_cres[n]);                //envia o valor da senóide discretizada para o PORTD
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	e8 59       	subi	r30, 0x98	; 152
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	e4 91       	lpm	r30, Z
 21c:	eb b9       	out	0x0b, r30	; 11
    //pisca o LED na frequência do sinal de saída
    if(n < 127) clr_bit(PORTB, PB0);
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 222:	8f 37       	cpi	r24, 0x7F	; 127
 224:	20 f4       	brcc	.+8      	; 0x22e <__vector_16+0x5e>
 226:	85 b1       	in	r24, 0x05	; 5
 228:	8e 7f       	andi	r24, 0xFE	; 254
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	03 c0       	rjmp	.+6      	; 0x234 <__vector_16+0x64>
    else        set_bit(PORTB, PB0);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	81 60       	ori	r24, 0x01	; 1
 232:	85 b9       	out	0x05, r24	; 5
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	8f 91       	pop	r24
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <Inicializa_TC0>:
 * - _TC0_OCAB_N: seleciona o prescaler e configura as saídas de comparação
 * - _TC0_INT:    configura as interrupções
 */
void Inicializa_TC0(unsigned char _TC0_modo, unsigned char _TC0_OCAB_N, unsigned char _TC0_INT)
{
	TCCR0A = 0x00;
 244:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 246:	15 bc       	out	0x25, r1	; 37
	TIMSK0 &= 0xF7;
 248:	ee e6       	ldi	r30, 0x6E	; 110
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	90 81       	ld	r25, Z
 24e:	97 7f       	andi	r25, 0xF7	; 247
 250:	90 83       	st	Z, r25
	if(_TC0_modo == 0) TCCR0B |= (_TC0_OCAB_N & 0x07);
 252:	81 11       	cpse	r24, r1
 254:	05 c0       	rjmp	.+10     	; 0x260 <Inicializa_TC0+0x1c>
 256:	85 b5       	in	r24, 0x25	; 37
 258:	67 70       	andi	r22, 0x07	; 7
 25a:	68 2b       	or	r22, r24
 25c:	65 bd       	out	0x25, r22	; 37
 25e:	1f c0       	rjmp	.+62     	; 0x29e <Inicializa_TC0+0x5a>
	else if(_TC0_modo < 5)
 260:	85 30       	cpi	r24, 0x05	; 5
 262:	60 f4       	brcc	.+24     	; 0x27c <Inicializa_TC0+0x38>
	{		
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 264:	94 b5       	in	r25, 0x24	; 36
 266:	26 2f       	mov	r18, r22
 268:	20 7f       	andi	r18, 0xF0	; 240
 26a:	83 70       	andi	r24, 0x03	; 3
 26c:	82 2b       	or	r24, r18
 26e:	89 2b       	or	r24, r25
 270:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= (_TC0_OCAB_N & 0x07);
 272:	85 b5       	in	r24, 0x25	; 37
 274:	67 70       	andi	r22, 0x07	; 7
 276:	68 2b       	or	r22, r24
 278:	65 bd       	out	0x25, r22	; 37
 27a:	11 c0       	rjmp	.+34     	; 0x29e <Inicializa_TC0+0x5a>
	}
	else
	{
		TCCR0A |= ((_TC0_OCAB_N & 0xF0) | (_TC0_modo & 0x03));
 27c:	24 b5       	in	r18, 0x24	; 36
 27e:	36 2f       	mov	r19, r22
 280:	30 7f       	andi	r19, 0xF0	; 240
 282:	98 2f       	mov	r25, r24
 284:	93 70       	andi	r25, 0x03	; 3
 286:	93 2b       	or	r25, r19
 288:	92 2b       	or	r25, r18
 28a:	94 bd       	out	0x24, r25	; 36
		TCCR0B |= (((_TC0_modo << 1) & 0x08) | (_TC0_OCAB_N & 0x07));
 28c:	25 b5       	in	r18, 0x25	; 37
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	88 70       	andi	r24, 0x08	; 8
 296:	67 70       	andi	r22, 0x07	; 7
 298:	86 2b       	or	r24, r22
 29a:	82 2b       	or	r24, r18
 29c:	85 bd       	out	0x25, r24	; 37
		
	}
	TIMSK0 |= ~(_TC0_INT);
 29e:	ee e6       	ldi	r30, 0x6E	; 110
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	40 95       	com	r20
 2a6:	48 2b       	or	r20, r24
 2a8:	40 83       	st	Z, r20
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
