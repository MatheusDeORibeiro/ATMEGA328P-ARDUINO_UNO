
s05_e20_criacao_oito_caracteres.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012be  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008db  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088f  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000029cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000584  00000000  00000000  00002bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1c  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	06 05       	cpc	r16, r6
  6a:	06 15       	cp	r16, r6
  6c:	0e 0e       	add	r0, r30
  6e:	15 16       	cp	r1, r21
  70:	0b 09       	sbc	r16, r11
  72:	0b 0e       	add	r0, r27
  74:	08 16       	cp	r0, r24
  76:	01 04       	cpc	r0, r1
  78:	1c 1d       	adc	r17, r12
  7a:	1c 04       	cpc	r1, r12
  7c:	01 0e       	add	r0, r17
  7e:	11 11       	cpse	r17, r1
  80:	11 0a       	sbc	r1, r17
  82:	0e 04       	cpc	r0, r14
  84:	0e 1f       	adc	r16, r30
  86:	1f 1f       	adc	r17, r31
  88:	0e 0e       	add	r0, r30
  8a:	04 0e       	add	r0, r20
  8c:	1b 11       	cpse	r17, r11
  8e:	11 11       	cpse	r17, r1
  90:	11 1f       	adc	r17, r17
  92:	0e 1b       	sub	r16, r30
  94:	11 1f       	adc	r17, r17
  96:	1f 1f       	adc	r17, r31
  98:	1f 0e       	add	r1, r31
  9a:	1f 1f       	adc	r17, r31
  9c:	1f 1f       	adc	r17, r31
  9e:	1f 1f       	adc	r17, r31

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d8 e0       	ldi	r29, 0x08	; 8
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
  ac:	11 e0       	ldi	r17, 0x01	; 1
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	ec ef       	ldi	r30, 0xFC	; 252
  b4:	f3 e0       	ldi	r31, 0x03	; 3
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>
  c2:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  c6:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Status_BF>:
		}
		Escreve_Dado(0x00);
		k += 7;         //próximos caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
	}
}
  ce:	2a 98       	cbi	0x05, 2	; 5
  d0:	29 9a       	sbi	0x05, 1	; 5
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <Status_BF+0x6>
  d8:	00 00       	nop
  da:	28 9a       	sbi	0x05, 0	; 5
  dc:	95 e0       	ldi	r25, 0x05	; 5
  de:	9a 95       	dec	r25
  e0:	f1 f7       	brne	.-4      	; 0xde <Status_BF+0x10>
  e2:	00 00       	nop
  e4:	89 b1       	in	r24, 0x09	; 9
  e6:	28 98       	cbi	0x05, 0	; 5
  e8:	95 e0       	ldi	r25, 0x05	; 5
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <Status_BF+0x1c>
  ee:	00 00       	nop
  f0:	28 9a       	sbi	0x05, 0	; 5
  f2:	95 e0       	ldi	r25, 0x05	; 5
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <Status_BF+0x26>
  f8:	00 00       	nop
  fa:	28 98       	cbi	0x05, 0	; 5
  fc:	29 98       	cbi	0x05, 1	; 5
  fe:	87 ff       	sbrs	r24, 7
 100:	02 c0       	rjmp	.+4      	; 0x106 <Status_BF+0x38>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	08 95       	ret
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret

0000010a <Pulso_Enable>:
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <Pulso_Enable+0x2>
 110:	00 c0       	rjmp	.+0      	; 0x112 <Pulso_Enable+0x8>
 112:	28 9a       	sbi	0x05, 0	; 5
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <Pulso_Enable+0xc>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <Pulso_Enable+0x12>
 11c:	28 98       	cbi	0x05, 0	; 5
 11e:	08 95       	ret

00000120 <Escreve_Instrucao>:
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	80 6f       	ori	r24, 0xF0	; 240
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	2a 98       	cbi	0x05, 2	; 5
 12c:	29 98       	cbi	0x05, 1	; 5
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	9c 2f       	mov	r25, r28
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	89 2b       	or	r24, r25
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	28 2f       	mov	r18, r24
 142:	2f 70       	andi	r18, 0x0F	; 15
 144:	30 e1       	ldi	r19, 0x10	; 16
 146:	c3 9f       	mul	r28, r19
 148:	c0 01       	movw	r24, r0
 14a:	11 24       	eor	r1, r1
 14c:	82 2b       	or	r24, r18
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 154:	80 ef       	ldi	r24, 0xF0	; 240
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <Escreve_Instrucao+0x36>
 15a:	29 98       	cbi	0x05, 1	; 5
 15c:	57 98       	cbi	0x0a, 7	; 10
 15e:	56 98       	cbi	0x0a, 6	; 10
 160:	55 98       	cbi	0x0a, 5	; 10
 162:	54 98       	cbi	0x0a, 4	; 10
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <Escreve_Dado>:
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	80 6f       	ori	r24, 0xF0	; 240
 170:	8a b9       	out	0x0a, r24	; 10
 172:	2a 9a       	sbi	0x05, 2	; 5
 174:	29 98       	cbi	0x05, 1	; 5
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	9c 2f       	mov	r25, r28
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	89 2b       	or	r24, r25
 180:	8b b9       	out	0x0b, r24	; 11
 182:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	28 2f       	mov	r18, r24
 18a:	2f 70       	andi	r18, 0x0F	; 15
 18c:	30 e1       	ldi	r19, 0x10	; 16
 18e:	c3 9f       	mul	r28, r19
 190:	c0 01       	movw	r24, r0
 192:	11 24       	eor	r1, r1
 194:	82 2b       	or	r24, r18
 196:	8b b9       	out	0x0b, r24	; 11
 198:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 19c:	2a 98       	cbi	0x05, 2	; 5
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Escreve_Dado+0x38>
 1a4:	57 98       	cbi	0x0a, 7	; 10
 1a6:	56 98       	cbi	0x0a, 6	; 10
 1a8:	55 98       	cbi	0x0a, 5	; 10
 1aa:	54 98       	cbi	0x0a, 4	; 10
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <Inicializa_LCD>:
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <Inicializa_LCD+0x12>
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	08 2f       	mov	r16, r24
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	9a 83       	std	Y+2, r25	; 0x02
 1da:	ab 83       	std	Y+3, r26	; 0x03
 1dc:	2a 98       	cbi	0x05, 2	; 5
 1de:	29 98       	cbi	0x05, 1	; 5
 1e0:	28 98       	cbi	0x05, 0	; 5
 1e2:	8a b1       	in	r24, 0x0a	; 10
 1e4:	80 6f       	ori	r24, 0xF0	; 240
 1e6:	8a b9       	out	0x0a, r24	; 10
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	87 60       	ori	r24, 0x07	; 7
 1ec:	84 b9       	out	0x04, r24	; 4
 1ee:	8f e5       	ldi	r24, 0x5F	; 95
 1f0:	9a ee       	ldi	r25, 0xEA	; 234
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <Inicializa_LCD+0x42>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Inicializa_LCD+0x48>
 1f8:	00 00       	nop
 1fa:	13 e0       	ldi	r17, 0x03	; 3
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	80 63       	ori	r24, 0x30	; 48
 202:	8b b9       	out	0x0b, r24	; 11
 204:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 208:	ef e1       	ldi	r30, 0x1F	; 31
 20a:	fe e4       	ldi	r31, 0x4E	; 78
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <Inicializa_LCD+0x5c>
 210:	00 c0       	rjmp	.+0      	; 0x212 <Inicializa_LCD+0x62>
 212:	00 00       	nop
 214:	11 50       	subi	r17, 0x01	; 1
 216:	91 f7       	brne	.-28     	; 0x1fc <Inicializa_LCD+0x4c>
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 224:	f5 ed       	ldi	r31, 0xD5	; 213
 226:	fa 95       	dec	r31
 228:	f1 f7       	brne	.-4      	; 0x226 <Inicializa_LCD+0x76>
 22a:	00 00       	nop
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	80 62       	ori	r24, 0x20	; 32
 232:	8b b9       	out	0x0b, r24	; 11
 234:	00 23       	and	r16, r16
 236:	31 f0       	breq	.+12     	; 0x244 <Inicializa_LCD+0x94>
 238:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	8f 70       	andi	r24, 0x0F	; 15
 240:	80 68       	ori	r24, 0x80	; 128
 242:	04 c0       	rjmp	.+8      	; 0x24c <Inicializa_LCD+0x9c>
 244:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	8b b9       	out	0x0b, r24	; 11
 24e:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 252:	8f e1       	ldi	r24, 0x1F	; 31
 254:	9e e4       	ldi	r25, 0x4E	; 78
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <Inicializa_LCD+0xa6>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <Inicializa_LCD+0xac>
 25c:	00 00       	nop
 25e:	fe 01       	movw	r30, r28
 260:	31 96       	adiw	r30, 0x01	; 1
 262:	7f 01       	movw	r14, r30
 264:	8e 01       	movw	r16, r28
 266:	0c 5f       	subi	r16, 0xFC	; 252
 268:	1f 4f       	sbci	r17, 0xFF	; 255
 26a:	8b b1       	in	r24, 0x0b	; 11
 26c:	67 01       	movw	r12, r14
 26e:	f7 01       	movw	r30, r14
 270:	91 91       	ld	r25, Z+
 272:	7f 01       	movw	r14, r30
 274:	90 7f       	andi	r25, 0xF0	; 240
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	89 2b       	or	r24, r25
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 280:	2b b1       	in	r18, 0x0b	; 11
 282:	f6 01       	movw	r30, r12
 284:	90 81       	ld	r25, Z
 286:	f0 e1       	ldi	r31, 0x10	; 16
 288:	9f 9f       	mul	r25, r31
 28a:	c0 01       	movw	r24, r0
 28c:	11 24       	eor	r1, r1
 28e:	92 2f       	mov	r25, r18
 290:	9f 70       	andi	r25, 0x0F	; 15
 292:	89 2b       	or	r24, r25
 294:	8b b9       	out	0x0b, r24	; 11
 296:	0e 94 85 00 	call	0x10a	; 0x10a <Pulso_Enable>
 29a:	28 98       	cbi	0x05, 0	; 5
 29c:	8f e3       	ldi	r24, 0x3F	; 63
 29e:	9f e1       	ldi	r25, 0x1F	; 31
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <Inicializa_LCD+0xf0>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <Inicializa_LCD+0xf6>
 2a6:	00 00       	nop
 2a8:	e0 16       	cp	r14, r16
 2aa:	f1 06       	cpc	r15, r17
 2ac:	f1 f6       	brne	.-68     	; 0x26a <Inicializa_LCD+0xba>
 2ae:	57 98       	cbi	0x0a, 7	; 10
 2b0:	56 98       	cbi	0x0a, 6	; 10
 2b2:	55 98       	cbi	0x0a, 5	; 10
 2b4:	54 98       	cbi	0x0a, 4	; 10
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	cf 90       	pop	r12
 2cc:	08 95       	ret

000002ce <Limpa_Display>:
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 90 00 	call	0x120	; 0x120 <Escreve_Instrucao>
 2d4:	0e 94 67 00 	call	0xce	; 0xce <Status_BF>
 2d8:	81 11       	cpse	r24, r1
 2da:	fc cf       	rjmp	.-8      	; 0x2d4 <Limpa_Display+0x6>
 2dc:	08 95       	ret

000002de <Cursor_Home>:
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 90 00 	call	0x120	; 0x120 <Escreve_Instrucao>
 2e4:	8f e3       	ldi	r24, 0x3F	; 63
 2e6:	9f e1       	ldi	r25, 0x1F	; 31
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <Cursor_Home+0xa>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <Cursor_Home+0x10>
 2ee:	00 00       	nop
 2f0:	08 95       	ret

000002f2 <Posiciona_Cursor>:
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	19 f0       	breq	.+6      	; 0x2fc <Posiciona_Cursor+0xa>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	29 f0       	breq	.+10     	; 0x304 <Posiciona_Cursor+0x12>
 2fa:	08 95       	ret
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	86 0f       	add	r24, r22
 300:	80 68       	ori	r24, 0x80	; 128
 302:	03 c0       	rjmp	.+6      	; 0x30a <Posiciona_Cursor+0x18>
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	86 0f       	add	r24, r22
 308:	80 6c       	ori	r24, 0xC0	; 192
 30a:	0c 94 90 00 	jmp	0x120	; 0x120 <Escreve_Instrucao>

0000030e <Escreve_S_memdados>:
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
 318:	8e 01       	movw	r16, r28
 31a:	88 81       	ld	r24, Y
 31c:	88 23       	and	r24, r24
 31e:	51 f0       	breq	.+20     	; 0x334 <Escreve_S_memdados+0x26>
 320:	0e 94 67 00 	call	0xce	; 0xce <Status_BF>
 324:	81 11       	cpse	r24, r1
 326:	fc cf       	rjmp	.-8      	; 0x320 <Escreve_S_memdados+0x12>
 328:	21 96       	adiw	r28, 0x01	; 1
 32a:	f8 01       	movw	r30, r16
 32c:	80 81       	ld	r24, Z
 32e:	0e 94 b4 00 	call	0x168	; 0x168 <Escreve_Dado>
 332:	f2 cf       	rjmp	.-28     	; 0x318 <Escreve_S_memdados+0xa>
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	08 95       	ret

0000033e <Cria_Caracteres_memprogm>:

/* Esta função cria oito caracteres da memória de programa */
void Cria_Caracteres_memprogm(const unsigned char *caracteres)
{
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	7c 01       	movw	r14, r24
 34e:	00 e0       	ldi	r16, 0x00	; 0
 350:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i, j, k = 0, end_CGRAM = 0x40; //declaração de variáveis
 352:	c0 e4       	ldi	r28, 0x40	; 64
	for(i = 0; i < 8; i++)
	{
		Escreve_Instrucao(end_CGRAM);
 354:	8c 2f       	mov	r24, r28
 356:	0e 94 90 00 	call	0x120	; 0x120 <Escreve_Instrucao>
 35a:	c1 2c       	mov	r12, r1
 35c:	d1 2c       	mov	r13, r1
		for(j = 0; j < 7; j++)
		{
			Escreve_Dado(pgm_read_byte(&caracteres[k + j]));
 35e:	f6 01       	movw	r30, r12
 360:	e0 0f       	add	r30, r16
 362:	f1 1f       	adc	r31, r17
 364:	ee 0d       	add	r30, r14
 366:	ff 1d       	adc	r31, r15
 368:	84 91       	lpm	r24, Z
 36a:	0e 94 b4 00 	call	0x168	; 0x168 <Escreve_Dado>
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	c8 1a       	sub	r12, r24
 372:	d8 0a       	sbc	r13, r24
{
	unsigned char i, j, k = 0, end_CGRAM = 0x40; //declaração de variáveis
	for(i = 0; i < 8; i++)
	{
		Escreve_Instrucao(end_CGRAM);
		for(j = 0; j < 7; j++)
 374:	87 e0       	ldi	r24, 0x07	; 7
 376:	c8 16       	cp	r12, r24
 378:	d1 04       	cpc	r13, r1
 37a:	89 f7       	brne	.-30     	; 0x35e <Cria_Caracteres_memprogm+0x20>
		{
			Escreve_Dado(pgm_read_byte(&caracteres[k + j]));
		}
		Escreve_Dado(0x00);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 b4 00 	call	0x168	; 0x168 <Escreve_Dado>
		k += 7;         //próximos caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
 382:	c8 5f       	subi	r28, 0xF8	; 248
 384:	09 5f       	subi	r16, 0xF9	; 249
 386:	1f 4f       	sbci	r17, 0xFF	; 255

/* Esta função cria oito caracteres da memória de programa */
void Cria_Caracteres_memprogm(const unsigned char *caracteres)
{
	unsigned char i, j, k = 0, end_CGRAM = 0x40; //declaração de variáveis
	for(i = 0; i < 8; i++)
 388:	c0 38       	cpi	r28, 0x80	; 128
 38a:	21 f7       	brne	.-56     	; 0x354 <Cria_Caracteres_memprogm+0x16>
		}
		Escreve_Dado(0x00);
		k += 7;         //próximos caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
	}
}
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	08 95       	ret

0000039c <main>:

int main(void) //função principal
{
	unsigned char c; //declaração de variável auxiliar

	DDRD = 0xFF; //define todo o PORTD como saída
 39c:	8f ef       	ldi	r24, 0xFF	; 255
 39e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //define todo o PORTB como saída
 3a0:	84 b9       	out	0x04, r24	; 4
	
	PORTD = 0x00; //coloca todo o PORTD em nível baixo
 3a2:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00; //coloca todo o PORTB em nível baixo
 3a4:	15 b8       	out	0x05, r1	; 5

	UCSR0B = 0x00; //desabilita os pinos RX e Tx do Arduino UNO
 3a6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	Inicializa_LCD(LCD_2_N);                   //inicializa o display LCD com duas linhas
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Inicializa_LCD>
	Cria_Caracteres_memprogm(novos_caracteres); //cria caracteres
 3b0:	88 e6       	ldi	r24, 0x68	; 104
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 9f 01 	call	0x33e	; 0x33e <Cria_Caracteres_memprogm>
	Limpa_Display();                           //limpa a tela do display
 3b8:	0e 94 67 01 	call	0x2ce	; 0x2ce <Limpa_Display>
	Cursor_Home();                             //posiciona o cursor na primeira coluna da primeira linha
 3bc:	0e 94 6f 01 	call	0x2de	; 0x2de <Cursor_Home>

	Escreve_S_memdados("Cacacteres novos");
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 87 01 	call	0x30e	; 0x30e <Escreve_S_memdados>
	Posiciona_Cursor(2, 1);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Posiciona_Cursor>

	for(c = 0; c < 8; c++)
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Escreve_Dado(c);    //escreve caractere criado
 3d4:	8c 2f       	mov	r24, r28
 3d6:	0e 94 b4 00 	call	0x168	; 0x168 <Escreve_Dado>
		while(Status_BF());
 3da:	0e 94 67 00 	call	0xce	; 0xce <Status_BF>
 3de:	81 11       	cpse	r24, r1
 3e0:	fc cf       	rjmp	.-8      	; 0x3da <main+0x3e>
		Escreve_Dado(' ');
 3e2:	80 e2       	ldi	r24, 0x20	; 32
 3e4:	0e 94 b4 00 	call	0x168	; 0x168 <Escreve_Dado>
		while(Status_BF());
 3e8:	0e 94 67 00 	call	0xce	; 0xce <Status_BF>
 3ec:	81 11       	cpse	r24, r1
 3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <main+0x4c>
	Cursor_Home();                             //posiciona o cursor na primeira coluna da primeira linha

	Escreve_S_memdados("Cacacteres novos");
	Posiciona_Cursor(2, 1);

	for(c = 0; c < 8; c++)
 3f0:	cf 5f       	subi	r28, 0xFF	; 255
 3f2:	c8 30       	cpi	r28, 0x08	; 8
 3f4:	79 f7       	brne	.-34     	; 0x3d4 <main+0x38>
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <main+0x5a>

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
