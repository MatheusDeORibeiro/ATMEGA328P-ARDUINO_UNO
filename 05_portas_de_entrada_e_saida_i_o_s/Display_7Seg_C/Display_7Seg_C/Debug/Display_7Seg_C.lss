
Display_7Seg_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  00000935  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000037  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <Tabela>:
  68:	3f 06 5b 4f 66 6d 7d 07 7f 67 77 7c 39 5e 79 71     ?.[Ofm}..gw|9^yq

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
//-----------------------------------------------------------------------------------

int main()
{
	unsigned char valor = 0; //declara variável local
	DDRB = 0b11111110;       //PB0 como pino de entrada, os demais pinos como saída
  90:	8e ef       	ldi	r24, 0xFE	; 254
  92:	84 b9       	out	0x04, r24	; 4
	PORTB= 0x01;             //habilita o pull-up do PB0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	85 b9       	out	0x05, r24	; 5
	DDRD = 0xFF;             //PORTD como saída (display)
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0x00;             //desliga o display
  9c:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x00;           //PD0 e PD1 como I/O genérico, para uso no Arduino
  9e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
                                        0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
//-----------------------------------------------------------------------------------

int main()
{
	unsigned char valor = 0; //declara variável local
  a2:	80 e0       	ldi	r24, 0x00	; 0
	DDRD = 0xFF;             //PORTD como saída (display)
	PORTD= 0x00;             //desliga o display
	UCSR0B = 0x00;           //PD0 e PD1 como I/O genérico, para uso no Arduino
	while(1) //laço infinito
	{
		if(!tst_bit(PINB, BOTAO)) //se o botão for pressionado executa
  a4:	18 99       	sbic	0x03, 0	; 3
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x14>
		{
			if(valor == 0x0F)     //se o valor for igual a 0xF, zera o valor,
  a8:	8f 30       	cpi	r24, 0x0F	; 15
  aa:	11 f0       	breq	.+4      	; 0xb0 <main+0x20>
			    valor = 0;
			else                  //se não o incrementa
			    valor++;
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x22>
	while(1) //laço infinito
	{
		if(!tst_bit(PINB, BOTAO)) //se o botão for pressionado executa
		{
			if(valor == 0x0F)     //se o valor for igual a 0xF, zera o valor,
			    valor = 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
			else                  //se não o incrementa
			    valor++;
			//decodifica o valor e mostra no display, busca o valor na Tabela.
			DISPLAY = pgm_read_byte(&Tabela[valor]);
  b2:	e8 2f       	mov	r30, r24
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	e8 59       	subi	r30, 0x98	; 152
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	e4 91       	lpm	r30, Z
  bc:	eb b9       	out	0x0b, r30	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	33 ec       	ldi	r19, 0xC3	; 195
  c2:	99 e0       	ldi	r25, 0x09	; 9
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x34>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x3e>
  ce:	00 00       	nop
  d0:	e9 cf       	rjmp	.-46     	; 0xa4 <main+0x14>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
