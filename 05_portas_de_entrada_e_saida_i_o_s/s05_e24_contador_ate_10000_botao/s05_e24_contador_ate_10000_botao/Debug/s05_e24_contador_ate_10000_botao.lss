
s05_e24_contador_ate_10000_botao.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000004b2  00000546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800114  00800114  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a8  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000959  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d7  00000000  00000000  00002485  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c1  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e0a  00000000  00000000  00003619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00004423  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  9e:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Status_BF>:
		}
		Escreve_Dado(0x00);
		k += 7;         //próximo caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
	}
}
  a6:	2a 98       	cbi	0x05, 2	; 5
  a8:	29 9a       	sbi	0x05, 1	; 5
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <Status_BF+0x6>
  b0:	00 00       	nop
  b2:	28 9a       	sbi	0x05, 0	; 5
  b4:	95 e0       	ldi	r25, 0x05	; 5
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <Status_BF+0x10>
  ba:	00 00       	nop
  bc:	89 b1       	in	r24, 0x09	; 9
  be:	28 98       	cbi	0x05, 0	; 5
  c0:	95 e0       	ldi	r25, 0x05	; 5
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <Status_BF+0x1c>
  c6:	00 00       	nop
  c8:	28 9a       	sbi	0x05, 0	; 5
  ca:	95 e0       	ldi	r25, 0x05	; 5
  cc:	9a 95       	dec	r25
  ce:	f1 f7       	brne	.-4      	; 0xcc <Status_BF+0x26>
  d0:	00 00       	nop
  d2:	28 98       	cbi	0x05, 0	; 5
  d4:	29 98       	cbi	0x05, 1	; 5
  d6:	87 ff       	sbrs	r24, 7
  d8:	02 c0       	rjmp	.+4      	; 0xde <Status_BF+0x38>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	08 95       	ret
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <Pulso_Enable>:
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <Pulso_Enable+0x2>
  e8:	00 c0       	rjmp	.+0      	; 0xea <Pulso_Enable+0x8>
  ea:	28 9a       	sbi	0x05, 0	; 5
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <Pulso_Enable+0xc>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <Pulso_Enable+0x12>
  f4:	28 98       	cbi	0x05, 0	; 5
  f6:	08 95       	ret

000000f8 <Escreve_Instrucao>:
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	80 6f       	ori	r24, 0xF0	; 240
 100:	8a b9       	out	0x0a, r24	; 10
 102:	2a 98       	cbi	0x05, 2	; 5
 104:	29 98       	cbi	0x05, 1	; 5
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	9c 2f       	mov	r25, r28
 10c:	90 7f       	andi	r25, 0xF0	; 240
 10e:	89 2b       	or	r24, r25
 110:	8b b9       	out	0x0b, r24	; 11
 112:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	28 2f       	mov	r18, r24
 11a:	2f 70       	andi	r18, 0x0F	; 15
 11c:	30 e1       	ldi	r19, 0x10	; 16
 11e:	c3 9f       	mul	r28, r19
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	82 2b       	or	r24, r18
 126:	8b b9       	out	0x0b, r24	; 11
 128:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 12c:	80 ef       	ldi	r24, 0xF0	; 240
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <Escreve_Instrucao+0x36>
 132:	29 98       	cbi	0x05, 1	; 5
 134:	57 98       	cbi	0x0a, 7	; 10
 136:	56 98       	cbi	0x0a, 6	; 10
 138:	55 98       	cbi	0x0a, 5	; 10
 13a:	54 98       	cbi	0x0a, 4	; 10
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <Escreve_Dado>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	80 6f       	ori	r24, 0xF0	; 240
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	2a 9a       	sbi	0x05, 2	; 5
 14c:	29 98       	cbi	0x05, 1	; 5
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	9c 2f       	mov	r25, r28
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	89 2b       	or	r24, r25
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	28 2f       	mov	r18, r24
 162:	2f 70       	andi	r18, 0x0F	; 15
 164:	30 e1       	ldi	r19, 0x10	; 16
 166:	c3 9f       	mul	r28, r19
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	82 2b       	or	r24, r18
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 174:	2a 98       	cbi	0x05, 2	; 5
 176:	80 ef       	ldi	r24, 0xF0	; 240
 178:	8a 95       	dec	r24
 17a:	f1 f7       	brne	.-4      	; 0x178 <Escreve_Dado+0x38>
 17c:	57 98       	cbi	0x0a, 7	; 10
 17e:	56 98       	cbi	0x0a, 6	; 10
 180:	55 98       	cbi	0x0a, 5	; 10
 182:	54 98       	cbi	0x0a, 4	; 10
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <Inicializa_LCD>:
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	00 d0       	rcall	.+0      	; 0x19a <Inicializa_LCD+0x12>
 19a:	1f 92       	push	r1
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	08 2f       	mov	r16, r24
 1a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ae:	89 83       	std	Y+1, r24	; 0x01
 1b0:	9a 83       	std	Y+2, r25	; 0x02
 1b2:	ab 83       	std	Y+3, r26	; 0x03
 1b4:	2a 98       	cbi	0x05, 2	; 5
 1b6:	29 98       	cbi	0x05, 1	; 5
 1b8:	28 98       	cbi	0x05, 0	; 5
 1ba:	8a b1       	in	r24, 0x0a	; 10
 1bc:	80 6f       	ori	r24, 0xF0	; 240
 1be:	8a b9       	out	0x0a, r24	; 10
 1c0:	84 b1       	in	r24, 0x04	; 4
 1c2:	87 60       	ori	r24, 0x07	; 7
 1c4:	84 b9       	out	0x04, r24	; 4
 1c6:	8f e5       	ldi	r24, 0x5F	; 95
 1c8:	9a ee       	ldi	r25, 0xEA	; 234
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <Inicializa_LCD+0x42>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <Inicializa_LCD+0x48>
 1d0:	00 00       	nop
 1d2:	13 e0       	ldi	r17, 0x03	; 3
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 63       	ori	r24, 0x30	; 48
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 1e0:	ef e1       	ldi	r30, 0x1F	; 31
 1e2:	fe e4       	ldi	r31, 0x4E	; 78
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <Inicializa_LCD+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <Inicializa_LCD+0x62>
 1ea:	00 00       	nop
 1ec:	11 50       	subi	r17, 0x01	; 1
 1ee:	91 f7       	brne	.-28     	; 0x1d4 <Inicializa_LCD+0x4c>
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	8b b9       	out	0x0b, r24	; 11
 1f8:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 1fc:	f5 ed       	ldi	r31, 0xD5	; 213
 1fe:	fa 95       	dec	r31
 200:	f1 f7       	brne	.-4      	; 0x1fe <Inicializa_LCD+0x76>
 202:	00 00       	nop
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	00 23       	and	r16, r16
 20e:	31 f0       	breq	.+12     	; 0x21c <Inicializa_LCD+0x94>
 210:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	04 c0       	rjmp	.+8      	; 0x224 <Inicializa_LCD+0x9c>
 21c:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	8f 70       	andi	r24, 0x0F	; 15
 224:	8b b9       	out	0x0b, r24	; 11
 226:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 22a:	8f e1       	ldi	r24, 0x1F	; 31
 22c:	9e e4       	ldi	r25, 0x4E	; 78
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <Inicializa_LCD+0xa6>
 232:	00 c0       	rjmp	.+0      	; 0x234 <Inicializa_LCD+0xac>
 234:	00 00       	nop
 236:	fe 01       	movw	r30, r28
 238:	31 96       	adiw	r30, 0x01	; 1
 23a:	7f 01       	movw	r14, r30
 23c:	8e 01       	movw	r16, r28
 23e:	0c 5f       	subi	r16, 0xFC	; 252
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	67 01       	movw	r12, r14
 246:	f7 01       	movw	r30, r14
 248:	91 91       	ld	r25, Z+
 24a:	7f 01       	movw	r14, r30
 24c:	90 7f       	andi	r25, 0xF0	; 240
 24e:	8f 70       	andi	r24, 0x0F	; 15
 250:	89 2b       	or	r24, r25
 252:	8b b9       	out	0x0b, r24	; 11
 254:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 258:	2b b1       	in	r18, 0x0b	; 11
 25a:	f6 01       	movw	r30, r12
 25c:	90 81       	ld	r25, Z
 25e:	f0 e1       	ldi	r31, 0x10	; 16
 260:	9f 9f       	mul	r25, r31
 262:	c0 01       	movw	r24, r0
 264:	11 24       	eor	r1, r1
 266:	92 2f       	mov	r25, r18
 268:	9f 70       	andi	r25, 0x0F	; 15
 26a:	89 2b       	or	r24, r25
 26c:	8b b9       	out	0x0b, r24	; 11
 26e:	0e 94 71 00 	call	0xe2	; 0xe2 <Pulso_Enable>
 272:	28 98       	cbi	0x05, 0	; 5
 274:	8f e3       	ldi	r24, 0x3F	; 63
 276:	9f e1       	ldi	r25, 0x1F	; 31
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <Inicializa_LCD+0xf0>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <Inicializa_LCD+0xf6>
 27e:	00 00       	nop
 280:	e0 16       	cp	r14, r16
 282:	f1 06       	cpc	r15, r17
 284:	f1 f6       	brne	.-68     	; 0x242 <Inicializa_LCD+0xba>
 286:	57 98       	cbi	0x0a, 7	; 10
 288:	56 98       	cbi	0x0a, 6	; 10
 28a:	55 98       	cbi	0x0a, 5	; 10
 28c:	54 98       	cbi	0x0a, 4	; 10
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	08 95       	ret

000002a6 <Limpa_Display>:
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 7c 00 	call	0xf8	; 0xf8 <Escreve_Instrucao>
 2ac:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 2b0:	81 11       	cpse	r24, r1
 2b2:	fc cf       	rjmp	.-8      	; 0x2ac <Limpa_Display+0x6>
 2b4:	08 95       	ret

000002b6 <Cursor_Home>:
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 7c 00 	call	0xf8	; 0xf8 <Escreve_Instrucao>
 2bc:	8f e3       	ldi	r24, 0x3F	; 63
 2be:	9f e1       	ldi	r25, 0x1F	; 31
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <Cursor_Home+0xa>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <Cursor_Home+0x10>
 2c6:	00 00       	nop
 2c8:	08 95       	ret

000002ca <Desloca_Mensagem>:
 2ca:	0e 94 7c 00 	call	0xf8	; 0xf8 <Escreve_Instrucao>
 2ce:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 2d2:	81 11       	cpse	r24, r1
 2d4:	fc cf       	rjmp	.-8      	; 0x2ce <Desloca_Mensagem+0x4>
 2d6:	08 95       	ret

000002d8 <Display_Cursor_ON_OFF>:
 2d8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <Desloca_Mensagem>

000002dc <Posiciona_Cursor>:
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	19 f0       	breq	.+6      	; 0x2e6 <Posiciona_Cursor+0xa>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	29 f0       	breq	.+10     	; 0x2ee <Posiciona_Cursor+0x12>
 2e4:	08 95       	ret
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	86 0f       	add	r24, r22
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <Posiciona_Cursor+0x18>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	86 0f       	add	r24, r22
 2f2:	80 6c       	ori	r24, 0xC0	; 192
 2f4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <Escreve_Instrucao>

000002f8 <Escreve_S_memdados>:
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
 302:	8e 01       	movw	r16, r28
 304:	88 81       	ld	r24, Y
 306:	88 23       	and	r24, r24
 308:	51 f0       	breq	.+20     	; 0x31e <Escreve_S_memdados+0x26>
 30a:	0e 94 53 00 	call	0xa6	; 0xa6 <Status_BF>
 30e:	81 11       	cpse	r24, r1
 310:	fc cf       	rjmp	.-8      	; 0x30a <Escreve_S_memdados+0x12>
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	f8 01       	movw	r30, r16
 316:	80 81       	ld	r24, Z
 318:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
 31c:	f2 cf       	rjmp	.-28     	; 0x302 <Escreve_S_memdados+0xa>
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <Decodifica_Dig_Ind>:

/* Esta função armazena os digitos individuais de um número inteiro em um vetor */
void Decodifica_Dig_Ind(unsigned int numero, unsigned char *digitos)
{
 328:	fb 01       	movw	r30, r22
 32a:	db 01       	movw	r26, r22
 32c:	9b 01       	movw	r18, r22
 32e:	2b 5f       	subi	r18, 0xFB	; 251
 330:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char n;                             //declaração de variável auxiliar
	for(n = 0; n < _tam_vetor; n++)
	    digitos[n] = 0 + _valor_decod;           //limpa o vetor
 332:	40 e3       	ldi	r20, 0x30	; 48
 334:	4d 93       	st	X+, r20

/* Esta função armazena os digitos individuais de um número inteiro em um vetor */
void Decodifica_Dig_Ind(unsigned int numero, unsigned char *digitos)
{
	unsigned char n;                             //declaração de variável auxiliar
	for(n = 0; n < _tam_vetor; n++)
 336:	a2 17       	cp	r26, r18
 338:	b3 07       	cpc	r27, r19
 33a:	e1 f7       	brne	.-8      	; 0x334 <Decodifica_Dig_Ind+0xc>
	    digitos[n] = 0 + _valor_decod;           //limpa o vetor
	do
	{
		*digitos = (numero % 10) + _valor_decod; //armazena o resto da divisão
 33c:	2a e0       	ldi	r18, 0x0A	; 10
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	b9 01       	movw	r22, r18
 342:	0e 94 43 02 	call	0x486	; 0x486 <__udivmodhi4>
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	81 93       	st	Z+, r24
		numero /= 10;                            //divide o valor por 10
 34a:	cb 01       	movw	r24, r22
		digitos++;
	}while(numero != 0);                         //decodifica enquanto o número for diferente de 0
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	c1 f7       	brne	.-16     	; 0x340 <Decodifica_Dig_Ind+0x18>
}
 350:	08 95       	ret

00000352 <main>:

int main(void) //função principal
{
	unsigned int contador; //declaração de variável local não inicializada
	
	DDRD = 0xFF; //configura todo o PORTD como saída
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xF7; //configura o pino 4 do PORTB como entrada e os pinos restantes como saída
 356:	87 ef       	ldi	r24, 0xF7	; 247
 358:	84 b9       	out	0x04, r24	; 4

	PORTD = 0x00; //coloca todo o PORTD em nível baixo
 35a:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x08; //habilita o resisitor pull-up da entrada e coloca os pinos restantes em nível baixo
 35c:	88 e0       	ldi	r24, 0x08	; 8
 35e:	85 b9       	out	0x05, r24	; 5
	
	Inicializa_LCD(LCD_1_N);                  //inicializa display com uma linha
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 c4 00 	call	0x188	; 0x188 <Inicializa_LCD>
	Display_Cursor_ON_OFF(LCD_DSP_ON_CS_OFF); //mantém a tela do display ligada e desliga o cursor
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <Display_Cursor_ON_OFF>
	Limpa_Display();                          //limpa a tela do display
 36c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Limpa_Display>
	Cursor_Home();                            //posiciona o cursor na primeira coluna da primeira linha
 370:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Cursor_Home>
	Escreve_S_memdados("Press. o botao!");
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <Escreve_S_memdados>

	while(1) //loop infinito
	{
		contador = 0; //inicia variável
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	d0 e0       	ldi	r29, 0x00	; 0
		while(contador < 10001)
 380:	c1 31       	cpi	r28, 0x11	; 17
 382:	87 e2       	ldi	r24, 0x27	; 39
 384:	d8 07       	cpc	r29, r24
 386:	d1 f3       	breq	.-12     	; 0x37c <main+0x2a>
		{
			if(!tst_bit(PINB, BOTAO)) //verifica se o botão foi pressionado
 388:	1b 99       	sbic	0x03, 3	; 3
 38a:	fa cf       	rjmp	.-12     	; 0x380 <main+0x2e>
			{
				while(!tst_bit(PINB, BOTAO));
 38c:	1b 9b       	sbis	0x03, 3	; 3
 38e:	fe cf       	rjmp	.-4      	; 0x38c <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	9c e9       	ldi	r25, 0x9C	; 156
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0x42>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x48>
 39a:	00 00       	nop
				_delay_ms(10);
				contador++;                            //incrementa o contador
 39c:	21 96       	adiw	r28, 0x01	; 1
				Decodifica_Dig_Ind(contador, digitos); //decodifica digitos individualmente
 39e:	64 e1       	ldi	r22, 0x14	; 20
 3a0:	71 e0       	ldi	r23, 0x01	; 1
 3a2:	ce 01       	movw	r24, r28
 3a4:	0e 94 94 01 	call	0x328	; 0x328 <Decodifica_Dig_Ind>
				Limpa_Display();                       //limpa tela do displa
 3a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Limpa_Display>
				if(contador == 10000)                  //imprime a dezena de milhar
 3ac:	c0 31       	cpi	r28, 0x10	; 16
 3ae:	97 e2       	ldi	r25, 0x27	; 39
 3b0:	d9 07       	cpc	r29, r25
 3b2:	d1 f4       	brne	.+52     	; 0x3e8 <main+0x96>
				{
					Posiciona_Cursor(1, 12);
 3b4:	6c e0       	ldi	r22, 0x0C	; 12
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Posiciona_Cursor>
					Escreve_Dado(digitos[4]);
 3be:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end+0x4>
 3c2:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[3]);
 3c6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0x3>
 3ca:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[2]);
 3ce:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 3d2:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[1]);
 3d6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x1>
 3da:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[0]);
 3de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 3e2:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <main+0x9e>
				}
				if(contador >= 1000)                   //imprime a unidade de milhar
 3e8:	c8 3e       	cpi	r28, 0xE8	; 232
 3ea:	23 e0       	ldi	r18, 0x03	; 3
 3ec:	d2 07       	cpc	r29, r18
 3ee:	b0 f0       	brcs	.+44     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				{
					Posiciona_Cursor(1, 13);
 3f0:	6d e0       	ldi	r22, 0x0D	; 13
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Posiciona_Cursor>
					Escreve_Dado(digitos[3]);
 3fa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0x3>
 3fe:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[2]);
 402:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 406:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[1]);
 40a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x1>
 40e:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[0]);
 412:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 416:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
 41a:	03 c0       	rjmp	.+6      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
				}
				if(contador >= 100)                    //imprime a centena
 41c:	c4 36       	cpi	r28, 0x64	; 100
 41e:	d1 05       	cpc	r29, r1
 420:	90 f0       	brcs	.+36     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
				{
					Posiciona_Cursor(1, 14);
 422:	6e e0       	ldi	r22, 0x0E	; 14
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Posiciona_Cursor>
					Escreve_Dado(digitos[2]);
 42c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 430:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[1]);
 434:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x1>
 438:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
					Escreve_Dado(digitos[0]);
 43c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 440:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
 444:	03 c0       	rjmp	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				}
				if(contador >= 10)                     //imprime a dezena
 446:	ca 30       	cpi	r28, 0x0A	; 10
 448:	d1 05       	cpc	r29, r1
 44a:	50 f0       	brcs	.+20     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				{
					Posiciona_Cursor(1, 15);
 44c:	6f e0       	ldi	r22, 0x0F	; 15
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Posiciona_Cursor>
					Escreve_Dado(digitos[1]);
 456:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <__data_end+0x1>
 45a:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
 45e:	05 c0       	rjmp	.+10     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
					Escreve_Dado(digitos[0]);
				}
				else                                   //imprime a unidade
				{
					Posiciona_Cursor(1, 16);
 460:	60 e1       	ldi	r22, 0x10	; 16
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Posiciona_Cursor>
					Escreve_Dado(digitos[0]);
 46a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 46e:	0e 94 a0 00 	call	0x140	; 0x140 <Escreve_Dado>
 472:	8f ef       	ldi	r24, 0xFF	; 255
 474:	91 ee       	ldi	r25, 0xE1	; 225
 476:	24 e0       	ldi	r18, 0x04	; 4
 478:	81 50       	subi	r24, 0x01	; 1
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	20 40       	sbci	r18, 0x00	; 0
 47e:	e1 f7       	brne	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 482:	00 00       	nop
 484:	7d cf       	rjmp	.-262    	; 0x380 <main+0x2e>

00000486 <__udivmodhi4>:
 486:	aa 1b       	sub	r26, r26
 488:	bb 1b       	sub	r27, r27
 48a:	51 e1       	ldi	r21, 0x11	; 17
 48c:	07 c0       	rjmp	.+14     	; 0x49c <__udivmodhi4_ep>

0000048e <__udivmodhi4_loop>:
 48e:	aa 1f       	adc	r26, r26
 490:	bb 1f       	adc	r27, r27
 492:	a6 17       	cp	r26, r22
 494:	b7 07       	cpc	r27, r23
 496:	10 f0       	brcs	.+4      	; 0x49c <__udivmodhi4_ep>
 498:	a6 1b       	sub	r26, r22
 49a:	b7 0b       	sbc	r27, r23

0000049c <__udivmodhi4_ep>:
 49c:	88 1f       	adc	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	5a 95       	dec	r21
 4a2:	a9 f7       	brne	.-22     	; 0x48e <__udivmodhi4_loop>
 4a4:	80 95       	com	r24
 4a6:	90 95       	com	r25
 4a8:	bc 01       	movw	r22, r24
 4aa:	cd 01       	movw	r24, r26
 4ac:	08 95       	ret

000004ae <_exit>:
 4ae:	f8 94       	cli

000004b0 <__stop_program>:
 4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <__stop_program>
