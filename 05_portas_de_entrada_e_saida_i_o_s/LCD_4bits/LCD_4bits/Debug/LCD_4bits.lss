
LCD_4bits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000028e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f13  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000807  00000000  00000000  000012f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000056a  00000000  00000000  00001afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000444  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ec  00000000  00000000  00002548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002d34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	20 44       	sbci	r18, 0x40	; 64
  6a:	41 44       	sbci	r20, 0x41	; 65
  6c:	4f 53       	subi	r20, 0x3F	; 63
  6e:	20 44       	sbci	r18, 0x40	; 64
  70:	45 20       	and	r4, r5
  72:	34 42       	sbci	r19, 0x24	; 36
  74:	49 54       	subi	r20, 0x49	; 73
  76:	53 21       	and	r21, r3
	...

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	ee e8       	ldi	r30, 0x8E	; 142
  8e:	f2 e0       	ldi	r31, 0x02	; 2
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	ae 30       	cpi	r26, 0x0E	; 14
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>
  9c:	0e 94 33 01 	call	0x266	; 0x266 <main>
  a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <cmd_LCD>:
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//-----------------------------------------------------------------------------------
//c é o dado e cd indica se é instrução ou caractere (0 ou 1)
void cmd_LCD(unsigned char c, char cd)
{
	if(cd == 0)                //instrução
  a8:	61 11       	cpse	r22, r1
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <cmd_LCD+0xc>
	    clr_bit(CONTR_LCD,RS);
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	9e 7f       	andi	r25, 0xFE	; 254
  b0:	95 b9       	out	0x05, r25	; 5
  b2:	03 c0       	rjmp	.+6      	; 0xba <cmd_LCD+0x12>
	else                       //caractere
	    set_bit(CONTR_LCD,RS);
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	91 60       	ori	r25, 0x01	; 1
  b8:	95 b9       	out	0x05, r25	; 5
		
	//primeiro nibble de dados - 4 MSB
	#if (nibble_dados) //compila o código para os pinos de dados do LCD nos 4 MSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & c);
  ba:	9b b1       	in	r25, 0x0b	; 11
  bc:	9f 70       	andi	r25, 0x0F	; 15
  be:	28 2f       	mov	r18, r24
  c0:	20 7f       	andi	r18, 0xF0	; 240
  c2:	92 2b       	or	r25, r18
  c4:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	45 e0       	ldi	r20, 0x05	; 5
  c8:	4a 95       	dec	r20
  ca:	f1 f7       	brne	.-4      	; 0xc8 <cmd_LCD+0x20>
  cc:	00 00       	nop
	#else              //compila o código para os pinos de dados do LCD nos 4 LSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0xF0) | (c >> 4);
	#endif
	
	pulso_enable();
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	92 60       	ori	r25, 0x02	; 2
  d2:	95 b9       	out	0x05, r25	; 5
  d4:	95 e0       	ldi	r25, 0x05	; 5
  d6:	9a 95       	dec	r25
  d8:	f1 f7       	brne	.-4      	; 0xd6 <cmd_LCD+0x2e>
  da:	00 00       	nop
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	9d 7f       	andi	r25, 0xFD	; 253
  e0:	95 b9       	out	0x05, r25	; 5
  e2:	40 ef       	ldi	r20, 0xF0	; 240
  e4:	4a 95       	dec	r20
  e6:	f1 f7       	brne	.-4      	; 0xe4 <cmd_LCD+0x3c>
	
	//segundo nibble de dados - 4 LSB
	#if (nibble_dados) //compila o código para os pinos de dados do LCD nos 4 MSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & (c << 4));
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	40 e1       	ldi	r20, 0x10	; 16
  ec:	84 9f       	mul	r24, r20
  ee:	90 01       	movw	r18, r0
  f0:	11 24       	eor	r1, r1
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	29 2b       	or	r18, r25
  f6:	2b b9       	out	0x0b, r18	; 11
  f8:	95 e0       	ldi	r25, 0x05	; 5
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <cmd_LCD+0x52>
  fe:	00 00       	nop
	#else              //compila o código para os pinos de dados do LCD nos 4 LSB do PORT
	    DADOS_LCD = (DADOS_LCD & 0xF0) | (0x0F & c);
	#endif
	
	pulso_enable();
 100:	95 b1       	in	r25, 0x05	; 5
 102:	92 60       	ori	r25, 0x02	; 2
 104:	95 b9       	out	0x05, r25	; 5
 106:	45 e0       	ldi	r20, 0x05	; 5
 108:	4a 95       	dec	r20
 10a:	f1 f7       	brne	.-4      	; 0x108 <cmd_LCD+0x60>
 10c:	00 00       	nop
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	9d 7f       	andi	r25, 0xFD	; 253
 112:	95 b9       	out	0x05, r25	; 5
 114:	90 ef       	ldi	r25, 0xF0	; 240
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <cmd_LCD+0x6e>
	
	if((cd == 0) && (c < 4)) //se for instrução de retorno ou limpeza espera LCD estar pronto
 11a:	61 11       	cpse	r22, r1
 11c:	08 c0       	rjmp	.+16     	; 0x12e <cmd_LCD+0x86>
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	30 f4       	brcc	.+12     	; 0x12e <cmd_LCD+0x86>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9f e1       	ldi	r25, 0x1F	; 31
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <cmd_LCD+0x7e>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <cmd_LCD+0x84>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <inic_LCD_4bits>:
//Sub-rotina para inicialização do LCD com via de dados de 4 bits
//-----------------------------------------------------------------------------------
void inic_LCD_4bits()//sequência ditada pelo fabricando do circuito integrado HD44780
{                    //o LCD será só escrito. Então, R/W é sempre zero.
	
	clr_bit(CONTR_LCD, RS); //RS em zero indicando que o dado para o LCD será uma instrução
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	85 b9       	out	0x05, r24	; 5
	clr_bit(CONTR_LCD, E); //pino de habilitação em zero
 136:	85 b1       	in	r24, 0x05	; 5
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	85 b9       	out	0x05, r24	; 5
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <inic_LCD_4bits+0x12>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <inic_LCD_4bits+0x1c>
 14c:	00 00       	nop
	
	_delay_ms(20); /* tempo para estabilizar a tensão do LCD, após VCC
	                  ultrapassar 4.5 V (na prática pode ser maior). */
	//interface de 8 bits
	#if (nibble_dados)
	    DADOS_LCD = (DADOS_LCD & 0x0F) | 0x30;
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	80 63       	ori	r24, 0x30	; 48
 154:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	25 e0       	ldi	r18, 0x05	; 5
 158:	2a 95       	dec	r18
 15a:	f1 f7       	brne	.-4      	; 0x158 <inic_LCD_4bits+0x28>
 15c:	00 00       	nop
	#else
	    DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;
	#endif
	
	pulso_enable(); //habilitação respeitando os tempos de resposta do LCD
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	82 60       	ori	r24, 0x02	; 2
 162:	85 b9       	out	0x05, r24	; 5
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <inic_LCD_4bits+0x36>
 16a:	00 00       	nop
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	85 b9       	out	0x05, r24	; 5
 172:	90 ef       	ldi	r25, 0xF0	; 240
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <inic_LCD_4bits+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f e1       	ldi	r24, 0x1F	; 31
 17a:	9e e4       	ldi	r25, 0x4E	; 78
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <inic_LCD_4bits+0x4c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <inic_LCD_4bits+0x52>
 182:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	95 e0       	ldi	r25, 0x05	; 5
 186:	9a 95       	dec	r25
 188:	f1 f7       	brne	.-4      	; 0x186 <inic_LCD_4bits+0x56>
 18a:	00 00       	nop
	_delay_ms(5);
	pulso_enable();
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	85 b9       	out	0x05, r24	; 5
 192:	25 e0       	ldi	r18, 0x05	; 5
 194:	2a 95       	dec	r18
 196:	f1 f7       	brne	.-4      	; 0x194 <inic_LCD_4bits+0x64>
 198:	00 00       	nop
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	80 ef       	ldi	r24, 0xF0	; 240
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <inic_LCD_4bits+0x72>
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <inic_LCD_4bits+0x7a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <inic_LCD_4bits+0x80>
 1b0:	00 00       	nop
 1b2:	95 e0       	ldi	r25, 0x05	; 5
 1b4:	9a 95       	dec	r25
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <inic_LCD_4bits+0x84>
 1b8:	00 00       	nop
	_delay_us(200);
	pulso_enable(); //até aqui ainda é uma interface de 8 bits.
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	85 b9       	out	0x05, r24	; 5
 1c0:	25 e0       	ldi	r18, 0x05	; 5
 1c2:	2a 95       	dec	r18
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <inic_LCD_4bits+0x92>
 1c6:	00 00       	nop
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	8d 7f       	andi	r24, 0xFD	; 253
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	80 ef       	ldi	r24, 0xF0	; 240
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <inic_LCD_4bits+0xa0>
	
	//interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
	#if (nibble_dados)
	    DADOS_LCD = (DADOS_LCD & 0x0F) | 0x20;
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	95 e0       	ldi	r25, 0x05	; 5
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <inic_LCD_4bits+0xae>
 1e2:	00 00       	nop
	#else
	    DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;
	#endif
	
	pulso_enable();
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	85 b9       	out	0x05, r24	; 5
 1ea:	25 e0       	ldi	r18, 0x05	; 5
 1ec:	2a 95       	dec	r18
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <inic_LCD_4bits+0xbc>
 1f0:	00 00       	nop
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	80 ef       	ldi	r24, 0xF0	; 240
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <inic_LCD_4bits+0xca>
	cmd_LCD(0x28, 0);  //interface de 4 bits 2 linhas (aqui se habilita as 2 linhas)
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
	                  //são enviados os 2 nibbles (0x2 e 0x8)
	cmd_LCD(0x08, 0); //desliga o display
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
	cmd_LCD(0x01, 0); //limpa todo o display
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
	cmd_LCD(0x0C, 0); //mensagem aparente cursor inativo não piscando
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
	cmd_LCD(0x80, 0); //inicializa cursor na primeira posição a esquerda - 1a linha
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
 226:	08 95       	ret

00000228 <escreve_LCD>:
}
//------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD - dados armazenados na RAM
//------------------------------------------------------------------------------------
void escreve_LCD(char *c)
{
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	ec 01       	movw	r28, r24
	for (; *c != 0; c++) cmd_LCD(*c, 1);
 22e:	04 c0       	rjmp	.+8      	; 0x238 <escreve_LCD+0x10>
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
 236:	21 96       	adiw	r28, 0x01	; 1
 238:	88 81       	ld	r24, Y
 23a:	81 11       	cpse	r24, r1
 23c:	f9 cf       	rjmp	.-14     	; 0x230 <escreve_LCD+0x8>
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <escreve_LCD_Flash>:
//------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD - dados armazenados na FLASH
//------------------------------------------------------------------------------------
void escreve_LCD_Flash(const char *c)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	ec 01       	movw	r28, r24
	for (; pgm_read_byte(&(*c)) != 0; c++) cmd_LCD(pgm_read_byte(&(*c)), 1);
 24a:	06 c0       	rjmp	.+12     	; 0x258 <escreve_LCD_Flash+0x14>
 24c:	fe 01       	movw	r30, r28
 24e:	84 91       	lpm	r24, Z
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	fe 01       	movw	r30, r28
 25a:	84 91       	lpm	r24, Z
 25c:	81 11       	cpse	r24, r1
 25e:	f6 cf       	rjmp	.-20     	; 0x24c <escreve_LCD_Flash+0x8>
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <main>:
//prog_char mensagem[] = " DADOS DE 4BITS!\0"; //mensagem armazenada na memória flash
const char mensagem[] PROGMEM = " DADOS DE 4BITS!\0"; //mensagem armazenada na memória flash
//-----------------------------------------------------------------------------------
int main()
{
	DDRD = 0xFF; //PORTD como saída
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //PORTB como saída
 26a:	84 b9       	out	0x04, r24	; 4
	
	inic_LCD_4bits();             //inicializa o LCD
 26c:	0e 94 98 00 	call	0x130	; 0x130 <inic_LCD_4bits>
	escreve_LCD(" INTERFACE DE"); //string armazenada na RAM
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 14 01 	call	0x228	; 0x228 <escreve_LCD>
	cmd_LCD(0xC0,0);              //desloca cursor para a segunda linha
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	80 ec       	ldi	r24, 0xC0	; 192
 27c:	0e 94 54 00 	call	0xa8	; 0xa8 <cmd_LCD>
	escreve_LCD_Flash(mensagem);  //string armazenada na flash
 280:	88 e6       	ldi	r24, 0x68	; 104
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 22 01 	call	0x244	; 0x244 <escreve_LCD_Flash>
 288:	ff cf       	rjmp	.-2      	; 0x288 <main+0x22>

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
