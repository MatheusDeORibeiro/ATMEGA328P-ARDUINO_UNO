
s05_e18_animacao_sequencial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000035e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ac  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fb  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000863  00000000  00000000  00001f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052e  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa7  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003951  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  8e:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Status_BF>:
/* Esta função desloca o display/cursor */
void Desloca_Mensagem(unsigned char deslocamento)
{
	Escreve_Instrucao(deslocamento);
	while(Status_BF());
}
  96:	2a 98       	cbi	0x05, 2	; 5
  98:	29 9a       	sbi	0x05, 1	; 5
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <Status_BF+0x6>
  a0:	00 00       	nop
  a2:	28 9a       	sbi	0x05, 0	; 5
  a4:	95 e0       	ldi	r25, 0x05	; 5
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <Status_BF+0x10>
  aa:	00 00       	nop
  ac:	89 b1       	in	r24, 0x09	; 9
  ae:	28 98       	cbi	0x05, 0	; 5
  b0:	95 e0       	ldi	r25, 0x05	; 5
  b2:	9a 95       	dec	r25
  b4:	f1 f7       	brne	.-4      	; 0xb2 <Status_BF+0x1c>
  b6:	00 00       	nop
  b8:	28 9a       	sbi	0x05, 0	; 5
  ba:	95 e0       	ldi	r25, 0x05	; 5
  bc:	9a 95       	dec	r25
  be:	f1 f7       	brne	.-4      	; 0xbc <Status_BF+0x26>
  c0:	00 00       	nop
  c2:	28 98       	cbi	0x05, 0	; 5
  c4:	29 98       	cbi	0x05, 1	; 5
  c6:	87 ff       	sbrs	r24, 7
  c8:	02 c0       	rjmp	.+4      	; 0xce <Status_BF+0x38>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	08 95       	ret
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret

000000d2 <Pulso_Enable>:
  d2:	8a e0       	ldi	r24, 0x0A	; 10
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <Pulso_Enable+0x2>
  d8:	00 c0       	rjmp	.+0      	; 0xda <Pulso_Enable+0x8>
  da:	28 9a       	sbi	0x05, 0	; 5
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <Pulso_Enable+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <Pulso_Enable+0x12>
  e4:	28 98       	cbi	0x05, 0	; 5
  e6:	08 95       	ret

000000e8 <Escreve_Instrucao>:
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	80 6f       	ori	r24, 0xF0	; 240
  f0:	8a b9       	out	0x0a, r24	; 10
  f2:	2a 98       	cbi	0x05, 2	; 5
  f4:	29 98       	cbi	0x05, 1	; 5
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	9c 2f       	mov	r25, r28
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	89 2b       	or	r24, r25
 100:	8b b9       	out	0x0b, r24	; 11
 102:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	28 2f       	mov	r18, r24
 10a:	2f 70       	andi	r18, 0x0F	; 15
 10c:	30 e1       	ldi	r19, 0x10	; 16
 10e:	c3 9f       	mul	r28, r19
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b b9       	out	0x0b, r24	; 11
 118:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 11c:	80 ef       	ldi	r24, 0xF0	; 240
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <Escreve_Instrucao+0x36>
 122:	29 98       	cbi	0x05, 1	; 5
 124:	57 98       	cbi	0x0a, 7	; 10
 126:	56 98       	cbi	0x0a, 6	; 10
 128:	55 98       	cbi	0x0a, 5	; 10
 12a:	54 98       	cbi	0x0a, 4	; 10
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <Escreve_Dado>:
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	80 6f       	ori	r24, 0xF0	; 240
 138:	8a b9       	out	0x0a, r24	; 10
 13a:	2a 9a       	sbi	0x05, 2	; 5
 13c:	29 98       	cbi	0x05, 1	; 5
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	9c 2f       	mov	r25, r28
 144:	90 7f       	andi	r25, 0xF0	; 240
 146:	89 2b       	or	r24, r25
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 14e:	8b b1       	in	r24, 0x0b	; 11
 150:	28 2f       	mov	r18, r24
 152:	2f 70       	andi	r18, 0x0F	; 15
 154:	30 e1       	ldi	r19, 0x10	; 16
 156:	c3 9f       	mul	r28, r19
 158:	c0 01       	movw	r24, r0
 15a:	11 24       	eor	r1, r1
 15c:	82 2b       	or	r24, r18
 15e:	8b b9       	out	0x0b, r24	; 11
 160:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 164:	2a 98       	cbi	0x05, 2	; 5
 166:	80 ef       	ldi	r24, 0xF0	; 240
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <Escreve_Dado+0x38>
 16c:	57 98       	cbi	0x0a, 7	; 10
 16e:	56 98       	cbi	0x0a, 6	; 10
 170:	55 98       	cbi	0x0a, 5	; 10
 172:	54 98       	cbi	0x0a, 4	; 10
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <Inicializa_LCD>:
 178:	cf 92       	push	r12
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	00 d0       	rcall	.+0      	; 0x18a <Inicializa_LCD+0x12>
 18a:	1f 92       	push	r1
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	08 2f       	mov	r16, r24
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19e:	89 83       	std	Y+1, r24	; 0x01
 1a0:	9a 83       	std	Y+2, r25	; 0x02
 1a2:	ab 83       	std	Y+3, r26	; 0x03
 1a4:	2a 98       	cbi	0x05, 2	; 5
 1a6:	29 98       	cbi	0x05, 1	; 5
 1a8:	28 98       	cbi	0x05, 0	; 5
 1aa:	8a b1       	in	r24, 0x0a	; 10
 1ac:	80 6f       	ori	r24, 0xF0	; 240
 1ae:	8a b9       	out	0x0a, r24	; 10
 1b0:	84 b1       	in	r24, 0x04	; 4
 1b2:	87 60       	ori	r24, 0x07	; 7
 1b4:	84 b9       	out	0x04, r24	; 4
 1b6:	8f e5       	ldi	r24, 0x5F	; 95
 1b8:	9a ee       	ldi	r25, 0xEA	; 234
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <Inicializa_LCD+0x42>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <Inicializa_LCD+0x48>
 1c0:	00 00       	nop
 1c2:	13 e0       	ldi	r17, 0x03	; 3
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	80 63       	ori	r24, 0x30	; 48
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 1d0:	ef e1       	ldi	r30, 0x1F	; 31
 1d2:	fe e4       	ldi	r31, 0x4E	; 78
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <Inicializa_LCD+0x5c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <Inicializa_LCD+0x62>
 1da:	00 00       	nop
 1dc:	11 50       	subi	r17, 0x01	; 1
 1de:	91 f7       	brne	.-28     	; 0x1c4 <Inicializa_LCD+0x4c>
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	8b b9       	out	0x0b, r24	; 11
 1e8:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 1ec:	f5 ed       	ldi	r31, 0xD5	; 213
 1ee:	fa 95       	dec	r31
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <Inicializa_LCD+0x76>
 1f2:	00 00       	nop
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	80 62       	ori	r24, 0x20	; 32
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	00 23       	and	r16, r16
 1fe:	31 f0       	breq	.+12     	; 0x20c <Inicializa_LCD+0x94>
 200:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	04 c0       	rjmp	.+8      	; 0x214 <Inicializa_LCD+0x9c>
 20c:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	8f 70       	andi	r24, 0x0F	; 15
 214:	8b b9       	out	0x0b, r24	; 11
 216:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 21a:	8f e1       	ldi	r24, 0x1F	; 31
 21c:	9e e4       	ldi	r25, 0x4E	; 78
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <Inicializa_LCD+0xa6>
 222:	00 c0       	rjmp	.+0      	; 0x224 <Inicializa_LCD+0xac>
 224:	00 00       	nop
 226:	fe 01       	movw	r30, r28
 228:	31 96       	adiw	r30, 0x01	; 1
 22a:	7f 01       	movw	r14, r30
 22c:	8e 01       	movw	r16, r28
 22e:	0c 5f       	subi	r16, 0xFC	; 252
 230:	1f 4f       	sbci	r17, 0xFF	; 255
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	67 01       	movw	r12, r14
 236:	f7 01       	movw	r30, r14
 238:	91 91       	ld	r25, Z+
 23a:	7f 01       	movw	r14, r30
 23c:	90 7f       	andi	r25, 0xF0	; 240
 23e:	8f 70       	andi	r24, 0x0F	; 15
 240:	89 2b       	or	r24, r25
 242:	8b b9       	out	0x0b, r24	; 11
 244:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 248:	2b b1       	in	r18, 0x0b	; 11
 24a:	f6 01       	movw	r30, r12
 24c:	90 81       	ld	r25, Z
 24e:	f0 e1       	ldi	r31, 0x10	; 16
 250:	9f 9f       	mul	r25, r31
 252:	c0 01       	movw	r24, r0
 254:	11 24       	eor	r1, r1
 256:	92 2f       	mov	r25, r18
 258:	9f 70       	andi	r25, 0x0F	; 15
 25a:	89 2b       	or	r24, r25
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	0e 94 69 00 	call	0xd2	; 0xd2 <Pulso_Enable>
 262:	28 98       	cbi	0x05, 0	; 5
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	9f e1       	ldi	r25, 0x1F	; 31
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <Inicializa_LCD+0xf0>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <Inicializa_LCD+0xf6>
 26e:	00 00       	nop
 270:	e0 16       	cp	r14, r16
 272:	f1 06       	cpc	r15, r17
 274:	f1 f6       	brne	.-68     	; 0x232 <Inicializa_LCD+0xba>
 276:	57 98       	cbi	0x0a, 7	; 10
 278:	56 98       	cbi	0x0a, 6	; 10
 27a:	55 98       	cbi	0x0a, 5	; 10
 27c:	54 98       	cbi	0x0a, 4	; 10
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	df 90       	pop	r13
 292:	cf 90       	pop	r12
 294:	08 95       	ret

00000296 <Limpa_Display>:
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 74 00 	call	0xe8	; 0xe8 <Escreve_Instrucao>
 29c:	0e 94 4b 00 	call	0x96	; 0x96 <Status_BF>
 2a0:	81 11       	cpse	r24, r1
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <Limpa_Display+0x6>
 2a4:	08 95       	ret

000002a6 <Cursor_Home>:
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 74 00 	call	0xe8	; 0xe8 <Escreve_Instrucao>
 2ac:	8f e3       	ldi	r24, 0x3F	; 63
 2ae:	9f e1       	ldi	r25, 0x1F	; 31
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <Cursor_Home+0xa>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <Cursor_Home+0x10>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <Posiciona_Cursor>:

/* Esta função posiciona o cursor em uma determinda coluna de determinada linha */
void Posiciona_Cursor(unsigned char linha, unsigned coluna)
{
	switch(linha)
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <Posiciona_Cursor+0xa>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	29 f0       	breq	.+10     	; 0x2cc <Posiciona_Cursor+0x12>
 2c2:	08 95       	ret
	{
		case 1:                                     //posiciona na primeira linha
		    Escreve_Instrucao(0x80 | (coluna - 1));
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	86 0f       	add	r24, r22
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <Posiciona_Cursor+0x18>
			break;
		case 2:			                            //posiciona na segunda linha
			Escreve_Instrucao(0xC0 | (coluna - 1));
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	86 0f       	add	r24, r22
 2d0:	80 6c       	ori	r24, 0xC0	; 192
 2d2:	0c 94 74 00 	jmp	0xe8	; 0xe8 <Escreve_Instrucao>

000002d6 <main>:

int main() //função principal
{
	unsigned char i; //declaração de variável não inicializada

	DDRD = 0xFF; //configura todo o PORTD como saída
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF; //configura todo o PORTB como saída
 2da:	84 b9       	out	0x04, r24	; 4

	PORTD = 0x00; //coloca o PORTD em nível baixo
 2dc:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00; //coloca o PORTB em nível baixo
 2de:	15 b8       	out	0x05, r1	; 5

    UCSR0B = 0x00; //desabilita os pinos RX e Tx do Arduino UNO
 2e0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	Inicializa_LCD(LCD_2_N); //inicializa o display LCD com duas linhas
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 bc 00 	call	0x178	; 0x178 <Inicializa_LCD>

	while(1) //loop infinito
	{
		Limpa_Display(); //limpa a tela do display
 2ea:	0e 94 4b 01 	call	0x296	; 0x296 <Limpa_Display>
		Cursor_Home();   //posiciona o cursor na primeira coluna da primeira linha
 2ee:	0e 94 53 01 	call	0x2a6	; 0x2a6 <Cursor_Home>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	83 ed       	ldi	r24, 0xD3	; 211
 2f6:	90 e3       	ldi	r25, 0x30	; 48
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x22>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x2c>
 302:	00 00       	nop
		_delay_ms(1000);
		for(i = 0; i < 32; i++)
 304:	c0 e0       	ldi	r28, 0x00	; 0
		{
			if(i < 16)
 306:	c0 31       	cpi	r28, 0x10	; 16
 308:	40 f4       	brcc	.+16     	; 0x31a <main+0x44>
			{
				while(Status_BF());
 30a:	0e 94 4b 00 	call	0x96	; 0x96 <Status_BF>
 30e:	81 11       	cpse	r24, r1
 310:	fc cf       	rjmp	.-8      	; 0x30a <main+0x34>
				Escreve_Dado(0xFF);
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	0e 94 98 00 	call	0x130	; 0x130 <Escreve_Dado>
 318:	0c c0       	rjmp	.+24     	; 0x332 <main+0x5c>
			}
			if(i == 16)
 31a:	c0 31       	cpi	r28, 0x10	; 16
 31c:	51 f4       	brne	.+20     	; 0x332 <main+0x5c>
			{
				while(Status_BF());
 31e:	0e 94 4b 00 	call	0x96	; 0x96 <Status_BF>
 322:	81 11       	cpse	r24, r1
 324:	fc cf       	rjmp	.-8      	; 0x31e <main+0x48>
				Posiciona_Cursor(2, 1);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Posiciona_Cursor>
 330:	04 c0       	rjmp	.+8      	; 0x33a <main+0x64>
				Escreve_Dado(0xFF);
			}
			else
			{
				while(Status_BF());
 332:	0e 94 4b 00 	call	0x96	; 0x96 <Status_BF>
 336:	81 11       	cpse	r24, r1
 338:	fc cf       	rjmp	.-8      	; 0x332 <main+0x5c>
				Escreve_Dado(0xFF);
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	0e 94 98 00 	call	0x130	; 0x130 <Escreve_Dado>
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	83 ed       	ldi	r24, 0xD3	; 211
 344:	90 e3       	ldi	r25, 0x30	; 48
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x70>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x7a>
 350:	00 00       	nop
	while(1) //loop infinito
	{
		Limpa_Display(); //limpa a tela do display
		Cursor_Home();   //posiciona o cursor na primeira coluna da primeira linha
		_delay_ms(1000);
		for(i = 0; i < 32; i++)
 352:	cf 5f       	subi	r28, 0xFF	; 255
 354:	c0 32       	cpi	r28, 0x20	; 32
 356:	b9 f6       	brne	.-82     	; 0x306 <main+0x30>
 358:	c8 cf       	rjmp	.-112    	; 0x2ea <main+0x14>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
