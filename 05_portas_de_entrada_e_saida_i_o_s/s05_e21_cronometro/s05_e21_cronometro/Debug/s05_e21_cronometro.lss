
s05_e21_cronometro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000644  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800120  00800120  000006f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173d  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b5  00000000  00000000  00001f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a35  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e4  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fbc  00000000  00000000  00003b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 01       	movw	r0, r0
  6a:	4c 02       	muls	r20, r28
  6c:	20 7c       	andi	r18, 0xC0	; 192
  6e:	20 7c       	andi	r18, 0xC0	; 192
  70:	03 04       	cpc	r0, r3
  72:	4c 5f       	subi	r20, 0xFC	; 252
  74:	03 04       	cpc	r0, r3
  76:	5f 02       	muls	r21, r31
  78:	4c 02       	muls	r20, r28
  7a:	20 06       	cpc	r2, r16
  7c:	05 03       	mulsu	r16, r21
  7e:	5f 02       	muls	r21, r31
  80:	05 03       	mulsu	r16, r21
  82:	4c 02       	muls	r20, r28
  84:	07 01       	movw	r0, r14
  86:	20 06       	cpc	r2, r16
  88:	05 04       	cpc	r0, r5
  8a:	4c 02       	muls	r20, r28
  8c:	05 04       	cpc	r0, r5
  8e:	20 06       	cpc	r2, r16

00000090 <novos_caracteres>:
  90:	1f 10 10 10 10 10 10 0f 01 01 01 01 01 01 01 01     ................
  a0:	01 01 01 01 1f 1f 00 00 00 00 00 1f 1f 01 01 01     ................
  b0:	01 01 1f 1f 10 10 10 10 10 1f 01 01 01 01 01 01     ................
  c0:	01 1f 00 00 00 00 00 00                             ........

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e4 e4       	ldi	r30, 0x44	; 68
  dc:	f6 e0       	ldi	r31, 0x06	; 6
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a0 32       	cpi	r26, 0x20	; 32
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a0 e2       	ldi	r26, 0x20	; 32
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a1 32       	cpi	r26, 0x21	; 33
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 34 02 	call	0x468	; 0x468 <main>
  fe:	0c 94 20 03 	jmp	0x640	; 0x640 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <Status_BF>:
		}
		Escreve_Dado(0x00);
		k += 7;         //próximos caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
	}
}
 106:	2a 98       	cbi	0x05, 2	; 5
 108:	29 9a       	sbi	0x05, 1	; 5
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <Status_BF+0x6>
 110:	00 00       	nop
 112:	28 9a       	sbi	0x05, 0	; 5
 114:	95 e0       	ldi	r25, 0x05	; 5
 116:	9a 95       	dec	r25
 118:	f1 f7       	brne	.-4      	; 0x116 <Status_BF+0x10>
 11a:	00 00       	nop
 11c:	89 b1       	in	r24, 0x09	; 9
 11e:	28 98       	cbi	0x05, 0	; 5
 120:	95 e0       	ldi	r25, 0x05	; 5
 122:	9a 95       	dec	r25
 124:	f1 f7       	brne	.-4      	; 0x122 <Status_BF+0x1c>
 126:	00 00       	nop
 128:	28 9a       	sbi	0x05, 0	; 5
 12a:	95 e0       	ldi	r25, 0x05	; 5
 12c:	9a 95       	dec	r25
 12e:	f1 f7       	brne	.-4      	; 0x12c <Status_BF+0x26>
 130:	00 00       	nop
 132:	28 98       	cbi	0x05, 0	; 5
 134:	29 98       	cbi	0x05, 1	; 5
 136:	87 ff       	sbrs	r24, 7
 138:	02 c0       	rjmp	.+4      	; 0x13e <Status_BF+0x38>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret

00000142 <Pulso_Enable>:
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <Pulso_Enable+0x2>
 148:	00 c0       	rjmp	.+0      	; 0x14a <Pulso_Enable+0x8>
 14a:	28 9a       	sbi	0x05, 0	; 5
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <Pulso_Enable+0xc>
 152:	00 c0       	rjmp	.+0      	; 0x154 <Pulso_Enable+0x12>
 154:	28 98       	cbi	0x05, 0	; 5
 156:	08 95       	ret

00000158 <Escreve_Instrucao>:
 158:	cf 93       	push	r28
 15a:	c8 2f       	mov	r28, r24
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	80 6f       	ori	r24, 0xF0	; 240
 160:	8a b9       	out	0x0a, r24	; 10
 162:	2a 98       	cbi	0x05, 2	; 5
 164:	29 98       	cbi	0x05, 1	; 5
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	9c 2f       	mov	r25, r28
 16c:	90 7f       	andi	r25, 0xF0	; 240
 16e:	89 2b       	or	r24, r25
 170:	8b b9       	out	0x0b, r24	; 11
 172:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	28 2f       	mov	r18, r24
 17a:	2f 70       	andi	r18, 0x0F	; 15
 17c:	30 e1       	ldi	r19, 0x10	; 16
 17e:	c3 9f       	mul	r28, r19
 180:	c0 01       	movw	r24, r0
 182:	11 24       	eor	r1, r1
 184:	82 2b       	or	r24, r18
 186:	8b b9       	out	0x0b, r24	; 11
 188:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 18c:	80 ef       	ldi	r24, 0xF0	; 240
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <Escreve_Instrucao+0x36>
 192:	29 98       	cbi	0x05, 1	; 5
 194:	57 98       	cbi	0x0a, 7	; 10
 196:	56 98       	cbi	0x0a, 6	; 10
 198:	55 98       	cbi	0x0a, 5	; 10
 19a:	54 98       	cbi	0x0a, 4	; 10
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <Escreve_Dado>:
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
 1a4:	8a b1       	in	r24, 0x0a	; 10
 1a6:	80 6f       	ori	r24, 0xF0	; 240
 1a8:	8a b9       	out	0x0a, r24	; 10
 1aa:	2a 9a       	sbi	0x05, 2	; 5
 1ac:	29 98       	cbi	0x05, 1	; 5
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	9c 2f       	mov	r25, r28
 1b4:	90 7f       	andi	r25, 0xF0	; 240
 1b6:	89 2b       	or	r24, r25
 1b8:	8b b9       	out	0x0b, r24	; 11
 1ba:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	28 2f       	mov	r18, r24
 1c2:	2f 70       	andi	r18, 0x0F	; 15
 1c4:	30 e1       	ldi	r19, 0x10	; 16
 1c6:	c3 9f       	mul	r28, r19
 1c8:	c0 01       	movw	r24, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	82 2b       	or	r24, r18
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 1d4:	2a 98       	cbi	0x05, 2	; 5
 1d6:	80 ef       	ldi	r24, 0xF0	; 240
 1d8:	8a 95       	dec	r24
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <Escreve_Dado+0x38>
 1dc:	57 98       	cbi	0x0a, 7	; 10
 1de:	56 98       	cbi	0x0a, 6	; 10
 1e0:	55 98       	cbi	0x0a, 5	; 10
 1e2:	54 98       	cbi	0x0a, 4	; 10
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <Inicializa_LCD>:
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <Inicializa_LCD+0x12>
 1fa:	1f 92       	push	r1
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	08 2f       	mov	r16, r24
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 20e:	89 83       	std	Y+1, r24	; 0x01
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	ab 83       	std	Y+3, r26	; 0x03
 214:	2a 98       	cbi	0x05, 2	; 5
 216:	29 98       	cbi	0x05, 1	; 5
 218:	28 98       	cbi	0x05, 0	; 5
 21a:	8a b1       	in	r24, 0x0a	; 10
 21c:	80 6f       	ori	r24, 0xF0	; 240
 21e:	8a b9       	out	0x0a, r24	; 10
 220:	84 b1       	in	r24, 0x04	; 4
 222:	87 60       	ori	r24, 0x07	; 7
 224:	84 b9       	out	0x04, r24	; 4
 226:	8f e5       	ldi	r24, 0x5F	; 95
 228:	9a ee       	ldi	r25, 0xEA	; 234
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <Inicializa_LCD+0x42>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <Inicializa_LCD+0x48>
 230:	00 00       	nop
 232:	13 e0       	ldi	r17, 0x03	; 3
 234:	8b b1       	in	r24, 0x0b	; 11
 236:	8f 70       	andi	r24, 0x0F	; 15
 238:	80 63       	ori	r24, 0x30	; 48
 23a:	8b b9       	out	0x0b, r24	; 11
 23c:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 240:	ef e1       	ldi	r30, 0x1F	; 31
 242:	fe e4       	ldi	r31, 0x4E	; 78
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <Inicializa_LCD+0x5c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <Inicializa_LCD+0x62>
 24a:	00 00       	nop
 24c:	11 50       	subi	r17, 0x01	; 1
 24e:	91 f7       	brne	.-28     	; 0x234 <Inicializa_LCD+0x4c>
 250:	8b b1       	in	r24, 0x0b	; 11
 252:	8f 70       	andi	r24, 0x0F	; 15
 254:	80 62       	ori	r24, 0x20	; 32
 256:	8b b9       	out	0x0b, r24	; 11
 258:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 25c:	f5 ed       	ldi	r31, 0xD5	; 213
 25e:	fa 95       	dec	r31
 260:	f1 f7       	brne	.-4      	; 0x25e <Inicializa_LCD+0x76>
 262:	00 00       	nop
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	00 23       	and	r16, r16
 26e:	31 f0       	breq	.+12     	; 0x27c <Inicializa_LCD+0x94>
 270:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	04 c0       	rjmp	.+8      	; 0x284 <Inicializa_LCD+0x9c>
 27c:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	8b b9       	out	0x0b, r24	; 11
 286:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 28a:	8f e1       	ldi	r24, 0x1F	; 31
 28c:	9e e4       	ldi	r25, 0x4E	; 78
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <Inicializa_LCD+0xa6>
 292:	00 c0       	rjmp	.+0      	; 0x294 <Inicializa_LCD+0xac>
 294:	00 00       	nop
 296:	fe 01       	movw	r30, r28
 298:	31 96       	adiw	r30, 0x01	; 1
 29a:	7f 01       	movw	r14, r30
 29c:	8e 01       	movw	r16, r28
 29e:	0c 5f       	subi	r16, 0xFC	; 252
 2a0:	1f 4f       	sbci	r17, 0xFF	; 255
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	67 01       	movw	r12, r14
 2a6:	f7 01       	movw	r30, r14
 2a8:	91 91       	ld	r25, Z+
 2aa:	7f 01       	movw	r14, r30
 2ac:	90 7f       	andi	r25, 0xF0	; 240
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	89 2b       	or	r24, r25
 2b2:	8b b9       	out	0x0b, r24	; 11
 2b4:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 2b8:	2b b1       	in	r18, 0x0b	; 11
 2ba:	f6 01       	movw	r30, r12
 2bc:	90 81       	ld	r25, Z
 2be:	f0 e1       	ldi	r31, 0x10	; 16
 2c0:	9f 9f       	mul	r25, r31
 2c2:	c0 01       	movw	r24, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	92 2f       	mov	r25, r18
 2c8:	9f 70       	andi	r25, 0x0F	; 15
 2ca:	89 2b       	or	r24, r25
 2cc:	8b b9       	out	0x0b, r24	; 11
 2ce:	0e 94 a1 00 	call	0x142	; 0x142 <Pulso_Enable>
 2d2:	28 98       	cbi	0x05, 0	; 5
 2d4:	8f e3       	ldi	r24, 0x3F	; 63
 2d6:	9f e1       	ldi	r25, 0x1F	; 31
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <Inicializa_LCD+0xf0>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <Inicializa_LCD+0xf6>
 2de:	00 00       	nop
 2e0:	e0 16       	cp	r14, r16
 2e2:	f1 06       	cpc	r15, r17
 2e4:	f1 f6       	brne	.-68     	; 0x2a2 <Inicializa_LCD+0xba>
 2e6:	57 98       	cbi	0x0a, 7	; 10
 2e8:	56 98       	cbi	0x0a, 6	; 10
 2ea:	55 98       	cbi	0x0a, 5	; 10
 2ec:	54 98       	cbi	0x0a, 4	; 10
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	08 95       	ret

00000306 <Limpa_Display>:
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 ac 00 	call	0x158	; 0x158 <Escreve_Instrucao>
 30c:	0e 94 83 00 	call	0x106	; 0x106 <Status_BF>
 310:	81 11       	cpse	r24, r1
 312:	fc cf       	rjmp	.-8      	; 0x30c <Limpa_Display+0x6>
 314:	08 95       	ret

00000316 <Cursor_Home>:
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	0e 94 ac 00 	call	0x158	; 0x158 <Escreve_Instrucao>
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	9f e1       	ldi	r25, 0x1F	; 31
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <Cursor_Home+0xa>
 324:	00 c0       	rjmp	.+0      	; 0x326 <Cursor_Home+0x10>
 326:	00 00       	nop
 328:	08 95       	ret

0000032a <Desloca_Mensagem>:
 32a:	0e 94 ac 00 	call	0x158	; 0x158 <Escreve_Instrucao>
 32e:	0e 94 83 00 	call	0x106	; 0x106 <Status_BF>
 332:	81 11       	cpse	r24, r1
 334:	fc cf       	rjmp	.-8      	; 0x32e <Desloca_Mensagem+0x4>
 336:	08 95       	ret

00000338 <Display_Cursor_ON_OFF>:
 338:	0c 94 95 01 	jmp	0x32a	; 0x32a <Desloca_Mensagem>

0000033c <Posiciona_Cursor>:
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	19 f0       	breq	.+6      	; 0x346 <Posiciona_Cursor+0xa>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	29 f0       	breq	.+10     	; 0x34e <Posiciona_Cursor+0x12>
 344:	08 95       	ret
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	86 0f       	add	r24, r22
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	03 c0       	rjmp	.+6      	; 0x354 <Posiciona_Cursor+0x18>
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	86 0f       	add	r24, r22
 352:	80 6c       	ori	r24, 0xC0	; 192
 354:	0c 94 ac 00 	jmp	0x158	; 0x158 <Escreve_Instrucao>

00000358 <Escreve_S_memdados>:
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ec 01       	movw	r28, r24
 362:	8e 01       	movw	r16, r28
 364:	88 81       	ld	r24, Y
 366:	88 23       	and	r24, r24
 368:	51 f0       	breq	.+20     	; 0x37e <Escreve_S_memdados+0x26>
 36a:	0e 94 83 00 	call	0x106	; 0x106 <Status_BF>
 36e:	81 11       	cpse	r24, r1
 370:	fc cf       	rjmp	.-8      	; 0x36a <Escreve_S_memdados+0x12>
 372:	21 96       	adiw	r28, 0x01	; 1
 374:	f8 01       	movw	r30, r16
 376:	80 81       	ld	r24, Z
 378:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
 37c:	f2 cf       	rjmp	.-28     	; 0x362 <Escreve_S_memdados+0xa>
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	08 95       	ret

00000388 <Cria_Caracteres_memprogm>:

/* Esta função cria oito caracteres da memória de programa */
void Cria_Caracteres_memprogm(const unsigned char *caracteres)
{
 388:	cf 92       	push	r12
 38a:	df 92       	push	r13
 38c:	ef 92       	push	r14
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	7c 01       	movw	r14, r24
 398:	00 e0       	ldi	r16, 0x00	; 0
 39a:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char i, j, k = 0, end_CGRAM = 0x40; //declaração de variáveis
 39c:	c0 e4       	ldi	r28, 0x40	; 64
	for(i = 0; i < 8; i++)
	{
		Escreve_Instrucao(end_CGRAM);
 39e:	8c 2f       	mov	r24, r28
 3a0:	0e 94 ac 00 	call	0x158	; 0x158 <Escreve_Instrucao>
 3a4:	c1 2c       	mov	r12, r1
 3a6:	d1 2c       	mov	r13, r1
		for(j = 0; j < 7; j++)
		{
			Escreve_Dado(pgm_read_byte(&caracteres[k + j]));
 3a8:	f6 01       	movw	r30, r12
 3aa:	e0 0f       	add	r30, r16
 3ac:	f1 1f       	adc	r31, r17
 3ae:	ee 0d       	add	r30, r14
 3b0:	ff 1d       	adc	r31, r15
 3b2:	84 91       	lpm	r24, Z
 3b4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	c8 1a       	sub	r12, r24
 3bc:	d8 0a       	sbc	r13, r24
{
	unsigned char i, j, k = 0, end_CGRAM = 0x40; //declaração de variáveis
	for(i = 0; i < 8; i++)
	{
		Escreve_Instrucao(end_CGRAM);
		for(j = 0; j < 7; j++)
 3be:	87 e0       	ldi	r24, 0x07	; 7
 3c0:	c8 16       	cp	r12, r24
 3c2:	d1 04       	cpc	r13, r1
 3c4:	89 f7       	brne	.-30     	; 0x3a8 <Cria_Caracteres_memprogm+0x20>
		{
			Escreve_Dado(pgm_read_byte(&caracteres[k + j]));
		}
		Escreve_Dado(0x00);
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
		k += 7;         //próximos caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
 3cc:	c8 5f       	subi	r28, 0xF8	; 248
 3ce:	09 5f       	subi	r16, 0xF9	; 249
 3d0:	1f 4f       	sbci	r17, 0xFF	; 255

/* Esta função cria oito caracteres da memória de programa */
void Cria_Caracteres_memprogm(const unsigned char *caracteres)
{
	unsigned char i, j, k = 0, end_CGRAM = 0x40; //declaração de variáveis
	for(i = 0; i < 8; i++)
 3d2:	c0 38       	cpi	r28, 0x80	; 128
 3d4:	21 f7       	brne	.-56     	; 0x39e <Cria_Caracteres_memprogm+0x16>
		}
		Escreve_Dado(0x00);
		k += 7;         //próximos caractere armazenados no vetor
		end_CGRAM += 8; //endereço do próximo caractere
	}
}
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	08 95       	ret

000003e6 <status_botao>:
//implementando funções

/* Esta função testa o status do botão e complementa o valor da variável inicia */
void status_botao(void)
{
	if(!tst_bit(PINB, BOTAO))         //verifica se o botão foi pressionado
 3e6:	1b 99       	sbic	0x03, 3	; 3
 3e8:	0f c0       	rjmp	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		while(!tst_bit(PINB, BOTAO)); //aguarda botão ser solto
 3ea:	1b 9b       	sbis	0x03, 3	; 3
 3ec:	fe cf       	rjmp	.-4      	; 0x3ea <status_botao+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ee:	8f e3       	ldi	r24, 0x3F	; 63
 3f0:	9c e9       	ldi	r25, 0x9C	; 156
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <status_botao+0xc>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <status_botao+0x12>
 3f8:	00 00       	nop
		_delay_ms(10);                //atraso para eliminar ruídos
		inicia = !inicia;             //complementa o valor da variável inicia
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <__data_end>
 400:	91 11       	cpse	r25, r1
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 408:	08 95       	ret

0000040a <Escreve_Numero_Grande>:
	}
}

/* Esta função escreve um número grande */
void Escreve_Numero_Grande(unsigned char numero, unsigned char coluna)
{
 40a:	0f 93       	push	r16
 40c:	1f 93       	push	r17
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	c8 2f       	mov	r28, r24
	Posiciona_Cursor(1, coluna); //posicina o cursor na coluna da primeira linha
 414:	06 2f       	mov	r16, r22
 416:	10 e0       	ldi	r17, 0x00	; 0
 418:	b8 01       	movw	r22, r16
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][0]));
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	c8 9f       	mul	r28, r24
 424:	e0 01       	movw	r28, r0
 426:	11 24       	eor	r1, r1
 428:	fe 01       	movw	r30, r28
 42a:	e8 59       	subi	r30, 0x98	; 152
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	84 91       	lpm	r24, Z
 430:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][1]));
 434:	fe 01       	movw	r30, r28
 436:	e7 59       	subi	r30, 0x97	; 151
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	84 91       	lpm	r24, Z
 43c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>

	Posiciona_Cursor(2, coluna); //posicina o cursor na coluna da segunda linha
 440:	b8 01       	movw	r22, r16
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][2]));
 448:	fe 01       	movw	r30, r28
 44a:	e6 59       	subi	r30, 0x96	; 150
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	84 91       	lpm	r24, Z
 450:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][3]));
 454:	fe 01       	movw	r30, r28
 456:	e5 59       	subi	r30, 0x95	; 149
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	84 91       	lpm	r24, Z
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][0]));
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][1]));

	Posiciona_Cursor(2, coluna); //posicina o cursor na coluna da segunda linha
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][2]));
	Escreve_Dado(pgm_read_byte(&numeros_grandes[numero][3]));
 464:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <Escreve_Dado>

00000468 <main>:
void status_botao(void);
void Escreve_Numero_Grande(unsigned char numero, unsigned char coluna);

int main(void) //função principal
{
	inicia = 0; //inicializa a variável global
 468:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
	unsigned char hora = 0, minuto = 0, segundo = 0, dezena, unidade; //variáveis locais inicializadas

	DDRD = 0xFF; //configura todo o PORTD como saída
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xF7; //configura o pino 3 do PORTB como entrada e os pinos restantes como saída
 470:	87 ef       	ldi	r24, 0xF7	; 247
 472:	84 b9       	out	0x04, r24	; 4

	PORTD = 0x00; //coloca todo o PORTD em nível baixo
 474:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x08; //habilita o resistor pull-up da entrada e coloca os pinos restantes em nível baixo
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	85 b9       	out	0x05, r24	; 5

	Inicializa_LCD(LCD_2_N);                    //inicializa o dispay com duas linhas
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Inicializa_LCD>
	Display_Cursor_ON_OFF(LCD_DSP_ON_CS_OFF);   //mantém a tela dos dispay ligada e desliga o cursor
 480:	8c e0       	ldi	r24, 0x0C	; 12
 482:	0e 94 9c 01 	call	0x338	; 0x338 <Display_Cursor_ON_OFF>
	Cria_Caracteres_memprogm(novos_caracteres); //armazena os caracteres na memória do display
 486:	80 e9       	ldi	r24, 0x90	; 144
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 c4 01 	call	0x388	; 0x388 <Cria_Caracteres_memprogm>
	Limpa_Display();                            //limpa a tela do display
 48e:	0e 94 83 01 	call	0x306	; 0x306 <Limpa_Display>
	Cursor_Home();                              //posiciona o cursor na primeira coluna da primeira linha
 492:	0e 94 8b 01 	call	0x316	; 0x316 <Cursor_Home>
	Posiciona_Cursor(1, 4);                     //posiciona o cursor na quarta coluna da primeira linha
 496:	64 e0       	ldi	r22, 0x04	; 4
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
	Escreve_S_memdados("Cronometro");           //escrve uma string
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	0e 94 ac 01 	call	0x358	; 0x358 <Escreve_S_memdados>
	Posiciona_Cursor(2, 1);                     //posicione o cursor na primeira coluna da segunda linha
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
	Escreve_S_memdados("Pressione botao!");     //escreve uma string
 4b2:	8e e0       	ldi	r24, 0x0E	; 14
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 ac 01 	call	0x358	; 0x358 <Escreve_S_memdados>

		while(inicia) //inicia a contagem com o cronômetro zerado
		{
			Limpa_Display(); //limpa a tela do display
			Cursor_Home();   //posiciona o cursor na primeira coluna da primeira linha
			unidade = hora % 10;
 4ba:	0a e0       	ldi	r16, 0x0A	; 10
			dezena = (unsigned char)((hora - unidade) / 10);

			Escreve_Numero_Grande(dezena, 1); //escreve as horas
 4bc:	8a e0       	ldi	r24, 0x0A	; 10
 4be:	e8 2e       	mov	r14, r24
 4c0:	f1 2c       	mov	r15, r1
	Escreve_S_memdados("Pressione botao!");     //escreve uma string
	
	while(1) //loop infinito
	{
		hora = 0, minuto = 0, segundo = 0; //zera o cronômetro
		status_botao();                    //verifica status do botão
 4c2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <status_botao>
	Posiciona_Cursor(2, 1);                     //posicione o cursor na primeira coluna da segunda linha
	Escreve_S_memdados("Pressione botao!");     //escreve uma string
	
	while(1) //loop infinito
	{
		hora = 0, minuto = 0, segundo = 0; //zera o cronômetro
 4c6:	d0 e0       	ldi	r29, 0x00	; 0
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	10 e0       	ldi	r17, 0x00	; 0
		status_botao();                    //verifica status do botão

		while(inicia) //inicia a contagem com o cronômetro zerado
 4cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 4d0:	88 23       	and	r24, r24
 4d2:	b9 f3       	breq	.-18     	; 0x4c2 <main+0x5a>
		{
			Limpa_Display(); //limpa a tela do display
 4d4:	0e 94 83 01 	call	0x306	; 0x306 <Limpa_Display>
			Cursor_Home();   //posiciona o cursor na primeira coluna da primeira linha
 4d8:	0e 94 8b 01 	call	0x316	; 0x316 <Cursor_Home>
			unidade = hora % 10;
 4dc:	81 2f       	mov	r24, r17
 4de:	60 2f       	mov	r22, r16
 4e0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__udivmodqi4>
 4e4:	d9 2e       	mov	r13, r25
			dezena = (unsigned char)((hora - unidade) / 10);

			Escreve_Numero_Grande(dezena, 1); //escreve as horas
 4e6:	81 2f       	mov	r24, r17
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	8d 19       	sub	r24, r13
 4ec:	91 09       	sbc	r25, r1
 4ee:	b7 01       	movw	r22, r14
 4f0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__divmodhi4>
 4f4:	86 2f       	mov	r24, r22
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	0e 94 05 02 	call	0x40a	; 0x40a <Escreve_Numero_Grande>
			Escreve_Numero_Grande(unidade, 3);
 4fc:	63 e0       	ldi	r22, 0x03	; 3
 4fe:	8d 2d       	mov	r24, r13
 500:	0e 94 05 02 	call	0x40a	; 0x40a <Escreve_Numero_Grande>
			Posiciona_Cursor(1, 5);
 504:	65 e0       	ldi	r22, 0x05	; 5
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
			Escreve_Dado(0xA5); //ponto
 50e:	85 ea       	ldi	r24, 0xA5	; 165
 510:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
			Posiciona_Cursor(2, 5);
 514:	65 e0       	ldi	r22, 0x05	; 5
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
			Escreve_Dado(0xA5); //ponto
 51e:	85 ea       	ldi	r24, 0xA5	; 165
 520:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>

			unidade = minuto % 10;
 524:	8c 2f       	mov	r24, r28
 526:	60 2f       	mov	r22, r16
 528:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__udivmodqi4>
 52c:	d9 2e       	mov	r13, r25
			dezena = (unsigned char)((minuto - unidade) / 10);

			Escreve_Numero_Grande(dezena, 6); //escreve os minutos
 52e:	8c 2f       	mov	r24, r28
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	8d 19       	sub	r24, r13
 534:	91 09       	sbc	r25, r1
 536:	b7 01       	movw	r22, r14
 538:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__divmodhi4>
 53c:	86 2f       	mov	r24, r22
 53e:	66 e0       	ldi	r22, 0x06	; 6
 540:	0e 94 05 02 	call	0x40a	; 0x40a <Escreve_Numero_Grande>
			Escreve_Numero_Grande(unidade, 8);
 544:	68 e0       	ldi	r22, 0x08	; 8
 546:	8d 2d       	mov	r24, r13
 548:	0e 94 05 02 	call	0x40a	; 0x40a <Escreve_Numero_Grande>
			Posiciona_Cursor(1, 10);
 54c:	6a e0       	ldi	r22, 0x0A	; 10
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
			Escreve_Dado(0xA5); //ponto
 556:	85 ea       	ldi	r24, 0xA5	; 165
 558:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
			Posiciona_Cursor(2, 10);
 55c:	6a e0       	ldi	r22, 0x0A	; 10
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
			Escreve_Dado(0xA5); //ponto
 566:	85 ea       	ldi	r24, 0xA5	; 165
 568:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>

			unidade = segundo % 10;
 56c:	8d 2f       	mov	r24, r29
 56e:	60 2f       	mov	r22, r16
 570:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__udivmodqi4>
 574:	d9 2e       	mov	r13, r25
			dezena = (unsigned char)((segundo - unidade) / 10);

			Escreve_Numero_Grande(dezena, 11);  //escreve os segundos
 576:	8d 2f       	mov	r24, r29
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	8d 19       	sub	r24, r13
 57c:	91 09       	sbc	r25, r1
 57e:	b7 01       	movw	r22, r14
 580:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__divmodhi4>
 584:	86 2f       	mov	r24, r22
 586:	6b e0       	ldi	r22, 0x0B	; 11
 588:	0e 94 05 02 	call	0x40a	; 0x40a <Escreve_Numero_Grande>
			Escreve_Numero_Grande(unidade, 13);
 58c:	6d e0       	ldi	r22, 0x0D	; 13
 58e:	8d 2d       	mov	r24, r13
 590:	0e 94 05 02 	call	0x40a	; 0x40a <Escreve_Numero_Grande>
			Posiciona_Cursor(2, 15);
 594:	6f e0       	ldi	r22, 0x0F	; 15
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	0e 94 9e 01 	call	0x33c	; 0x33c <Posiciona_Cursor>
			Escreve_Dado('s');
 59e:	83 e7       	ldi	r24, 0x73	; 115
 5a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Escreve_Dado>
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	83 ed       	ldi	r24, 0xD3	; 211
 5a8:	90 e3       	ldi	r25, 0x30	; 48
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	90 40       	sbci	r25, 0x00	; 0
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <main+0x142>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <main+0x14c>
 5b4:	00 00       	nop

			_delay_ms(1000); //delay de um segundo

			segundo++;
 5b6:	df 5f       	subi	r29, 0xFF	; 255
			if(segundo == 60)
 5b8:	dc 33       	cpi	r29, 0x3C	; 60
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <main+0x158>
			{
				segundo = 0;
				minuto++;
 5bc:	cf 5f       	subi	r28, 0xFF	; 255
			_delay_ms(1000); //delay de um segundo

			segundo++;
			if(segundo == 60)
			{
				segundo = 0;
 5be:	d0 e0       	ldi	r29, 0x00	; 0
				minuto++;
			}
			if(minuto == 60)
 5c0:	cc 33       	cpi	r28, 0x3C	; 60
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <main+0x160>
			{
				minuto = 0;
				hora++;
 5c4:	1f 5f       	subi	r17, 0xFF	; 255
				segundo = 0;
				minuto++;
			}
			if(minuto == 60)
			{
				minuto = 0;
 5c6:	c0 e0       	ldi	r28, 0x00	; 0
				hora++;
			}
			if(hora == 99)
 5c8:	13 36       	cpi	r17, 0x63	; 99
 5ca:	19 f4       	brne	.+6      	; 0x5d2 <main+0x16a>
			{
				hora = 0;
				minuto = 0;
				segundo = 0;
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
				hora++;
			}
			if(hora == 99)
			{
				hora = 0;
				minuto = 0;
 5ce:	c0 e0       	ldi	r28, 0x00	; 0
				minuto = 0;
				hora++;
			}
			if(hora == 99)
			{
				hora = 0;
 5d0:	10 e0       	ldi	r17, 0x00	; 0
				minuto = 0;
				segundo = 0;
			}

			status_botao(); //verifica status do botão
 5d2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <status_botao>
 5d6:	7a cf       	rjmp	.-268    	; 0x4cc <main+0x64>

000005d8 <__udivmodqi4>:
 5d8:	99 1b       	sub	r25, r25
 5da:	79 e0       	ldi	r23, 0x09	; 9
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__udivmodqi4_ep>

000005de <__udivmodqi4_loop>:
 5de:	99 1f       	adc	r25, r25
 5e0:	96 17       	cp	r25, r22
 5e2:	08 f0       	brcs	.+2      	; 0x5e6 <__udivmodqi4_ep>
 5e4:	96 1b       	sub	r25, r22

000005e6 <__udivmodqi4_ep>:
 5e6:	88 1f       	adc	r24, r24
 5e8:	7a 95       	dec	r23
 5ea:	c9 f7       	brne	.-14     	; 0x5de <__udivmodqi4_loop>
 5ec:	80 95       	com	r24
 5ee:	08 95       	ret

000005f0 <__divmodhi4>:
 5f0:	97 fb       	bst	r25, 7
 5f2:	07 2e       	mov	r0, r23
 5f4:	16 f4       	brtc	.+4      	; 0x5fa <__divmodhi4+0xa>
 5f6:	00 94       	com	r0
 5f8:	07 d0       	rcall	.+14     	; 0x608 <__divmodhi4_neg1>
 5fa:	77 fd       	sbrc	r23, 7
 5fc:	09 d0       	rcall	.+18     	; 0x610 <__divmodhi4_neg2>
 5fe:	0e 94 0c 03 	call	0x618	; 0x618 <__udivmodhi4>
 602:	07 fc       	sbrc	r0, 7
 604:	05 d0       	rcall	.+10     	; 0x610 <__divmodhi4_neg2>
 606:	3e f4       	brtc	.+14     	; 0x616 <__divmodhi4_exit>

00000608 <__divmodhi4_neg1>:
 608:	90 95       	com	r25
 60a:	81 95       	neg	r24
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	08 95       	ret

00000610 <__divmodhi4_neg2>:
 610:	70 95       	com	r23
 612:	61 95       	neg	r22
 614:	7f 4f       	sbci	r23, 0xFF	; 255

00000616 <__divmodhi4_exit>:
 616:	08 95       	ret

00000618 <__udivmodhi4>:
 618:	aa 1b       	sub	r26, r26
 61a:	bb 1b       	sub	r27, r27
 61c:	51 e1       	ldi	r21, 0x11	; 17
 61e:	07 c0       	rjmp	.+14     	; 0x62e <__udivmodhi4_ep>

00000620 <__udivmodhi4_loop>:
 620:	aa 1f       	adc	r26, r26
 622:	bb 1f       	adc	r27, r27
 624:	a6 17       	cp	r26, r22
 626:	b7 07       	cpc	r27, r23
 628:	10 f0       	brcs	.+4      	; 0x62e <__udivmodhi4_ep>
 62a:	a6 1b       	sub	r26, r22
 62c:	b7 0b       	sbc	r27, r23

0000062e <__udivmodhi4_ep>:
 62e:	88 1f       	adc	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	5a 95       	dec	r21
 634:	a9 f7       	brne	.-22     	; 0x620 <__udivmodhi4_loop>
 636:	80 95       	com	r24
 638:	90 95       	com	r25
 63a:	bc 01       	movw	r22, r24
 63c:	cd 01       	movw	r24, r26
 63e:	08 95       	ret

00000640 <_exit>:
 640:	f8 94       	cli

00000642 <__stop_program>:
 642:	ff cf       	rjmp	.-2      	; 0x642 <__stop_program>
