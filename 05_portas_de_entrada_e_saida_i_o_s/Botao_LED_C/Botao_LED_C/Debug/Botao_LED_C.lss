
Botao_LED_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fc  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026f  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED PD2                               //LED é o substituto de PD2 na programação
#define BOTAO PD7                             //BOTAO é o substituto de PD7 na programação
//------------------------------------------------------------------------------------
int main()
{
	DDRD = 0b00000100;   //configura o PORTD, PD2 saída, os demais pinos entradas
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0b11111011;   /*habilita o pull-up para o botão e apaga o LED (todas as
  84:	8b ef       	ldi	r24, 0xFB	; 251
  86:	8b b9       	out	0x0b, r24	; 11
	                       entradas com pull-ups habilitados)*/
	while(1) //laço infinito
	{
		if(!tst_bit(PIND, BOTAO)) //se o botão for pressionado executa o if
  88:	4f 99       	sbic	0x09, 7	; 9
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x8>
		{
			while(!tst_bit(PIND, BOTAO)); //fica preso até soltar o botão
  8c:	4f 9b       	sbis	0x09, 7	; 9
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e3       	ldi	r24, 0x3F	; 63
  92:	9c e9       	ldi	r25, 0x9C	; 156
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x14>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x1a>
  9a:	00 00       	nop
			_delay_ms(10); //atraso de 10 ms para eliminar o ruído do botão
			if(tst_bit(PORTD, LED)) //se o LED estiver apagado, liga o LED
  9c:	5a 9b       	sbis	0x0b, 2	; 11
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x24>
			clr_bit(PORTD, LED);
  a0:	5a 98       	cbi	0x0b, 2	; 11
  a2:	f2 cf       	rjmp	.-28     	; 0x88 <main+0x8>
			else //se não apaga o LED
			set_bit(PORTD, LED);
  a4:	5a 9a       	sbi	0x0b, 2	; 11
  a6:	f0 cf       	rjmp	.-32     	; 0x88 <main+0x8>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
