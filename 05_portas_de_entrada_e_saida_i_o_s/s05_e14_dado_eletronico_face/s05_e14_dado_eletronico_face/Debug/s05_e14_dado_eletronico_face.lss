
s05_e14_dado_eletronico_face.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a2  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000287  00000000  00000000  00000fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   8:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
   c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  10:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  14:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  18:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  1c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  20:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  24:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  28:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  2c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  30:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  34:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  38:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  3c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  40:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  44:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  48:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  4c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  50:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  54:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  58:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  5c:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  60:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>
  64:	0c 94 41 00 	jmp	0x82	; 0x82 <__bad_interrupt>

00000068 <Dado_Eletronico>:
  68:	40 12 52 36 76 3f                                   @.R6v?

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61
  7a:	0e 94 43 00 	call	0x86	; 0x86 <main>
  7e:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000082 <__bad_interrupt>:
  82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000086 <main>:
//                                                  1     2     3     4     5     6

int main()
{
	unsigned char dado = 1; //declaração de variável local inicializada
	DDRC = 0xFE;   //configura o pino RC0 como entrada e o restante do PORTC como saída
  86:	8e ef       	ldi	r24, 0xFE	; 254
  88:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x01;  //habilita o resistor pull-up do pino RC0 e desliga os pinos restantes do PORTC
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF;   //configura todo o PORTD como saída
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a b9       	out	0x0a, r24	; 10
	UCSR0B = 0x00; //desabilita os pinos RX e TX e configura PD0 e PD1 como pinos I/Os digitais para o Arduino
  92:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
const unsigned char Dado_Eletronico[] PROGMEM = {0x40, 0x12, 0x52, 0x36, 0x76, 0x3F};
//                                                  1     2     3     4     5     6

int main()
{
	unsigned char dado = 1; //declaração de variável local inicializada
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <main+0x16>
			//quando o botão for solto, será exibido o valor da face do dado
			DISPLAY = pgm_read_byte(&Dado_Eletronico[dado - 1]);
			_delay_ms(150);               //delay de 150ms
		}
		dado++;                           //incrementa variável
		if(dado == 7) dado = 1;           //reinicia valor da variável
  9a:	81 e0       	ldi	r24, 0x01	; 1
	DDRD = 0xFF;   //configura todo o PORTD como saída
	UCSR0B = 0x00; //desabilita os pinos RX e TX e configura PD0 e PD1 como pinos I/Os digitais para o Arduino

	while(1)
	{
		if(!tst_bit(PINC, BOTAO))         //verifica se o botão foi pressionado
  9c:	30 99       	sbic	0x06, 0	; 6
  9e:	11 c0       	rjmp	.+34     	; 0xc2 <main+0x3c>
		{
			while(!tst_bit(PINC, BOTAO)); //verifica se o botão foi solto
  a0:	30 9b       	sbis	0x06, 0	; 6
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x1a>
			//quando o botão for solto, será exibido o valor da face do dado
			DISPLAY = pgm_read_byte(&Dado_Eletronico[dado - 1]);
  a4:	e8 2f       	mov	r30, r24
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	e9 59       	subi	r30, 0x99	; 153
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	e4 91       	lpm	r30, Z
  ae:	eb b9       	out	0x0b, r30	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	32 e5       	ldi	r19, 0x52	; 82
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x30>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x3a>
  c0:	00 00       	nop
			_delay_ms(150);               //delay de 150ms
		}
		dado++;                           //incrementa variável
  c2:	8f 5f       	subi	r24, 0xFF	; 255
		if(dado == 7) dado = 1;           //reinicia valor da variável
  c4:	87 30       	cpi	r24, 0x07	; 7
  c6:	51 f7       	brne	.-44     	; 0x9c <main+0x16>
  c8:	e8 cf       	rjmp	.-48     	; 0x9a <main+0x14>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
