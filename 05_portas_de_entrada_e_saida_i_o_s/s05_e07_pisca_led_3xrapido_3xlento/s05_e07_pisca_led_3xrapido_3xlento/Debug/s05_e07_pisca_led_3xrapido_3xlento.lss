
s05_e07_pisca_led_3xrapido_3xlento.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075f  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003df  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000106  00000000  00000000  00001617  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define LED PB5 //LED é substituído por PB5 na programação

int main()
{
	DDRB = 0xFF;  //configura todo o PORTB como saída
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	{
		//utilizando estruturas de repetição e otimização o programa consumiu 206 bytes
		//piscando led rapidamente
		for(unsigned int i = 6; i > 0; i--)
		{
			cpl_bit(PORTB, LED);
  84:	30 e2       	ldi	r19, 0x20	; 32
#define cpl_bit(Y, bit_x) (Y ^= (1 << bit_x))  //complemanta o bit x do PORTY

#define LED PB5 //LED é substituído por PB5 na programação

int main()
{
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	90 e0       	ldi	r25, 0x00	; 0
	{
		//utilizando estruturas de repetição e otimização o programa consumiu 206 bytes
		//piscando led rapidamente
		for(unsigned int i = 6; i > 0; i--)
		{
			cpl_bit(PORTB, LED);
  8a:	25 b1       	in	r18, 0x05	; 5
  8c:	23 27       	eor	r18, r19
  8e:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	43 ec       	ldi	r20, 0xC3	; 195
  94:	59 e0       	ldi	r21, 0x09	; 9
  96:	21 50       	subi	r18, 0x01	; 1
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	50 40       	sbci	r21, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
  a2:	01 97       	sbiw	r24, 0x01	; 1
	
	while(1)
	{
		//utilizando estruturas de repetição e otimização o programa consumiu 206 bytes
		//piscando led rapidamente
		for(unsigned int i = 6; i > 0; i--)
  a4:	91 f7       	brne	.-28     	; 0x8a <main+0xa>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(200);
		}
		//piscando led lentamente
		for(unsigned int i = 6; i > 0; i--)
		{
			cpl_bit(PORTB, LED);
  aa:	25 b1       	in	r18, 0x05	; 5
  ac:	23 27       	eor	r18, r19
  ae:	25 b9       	out	0x05, r18	; 5
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	43 ed       	ldi	r20, 0xD3	; 211
  b4:	50 e3       	ldi	r21, 0x30	; 48
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	40 40       	sbci	r20, 0x00	; 0
  ba:	50 40       	sbci	r21, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
  c2:	01 97       	sbiw	r24, 0x01	; 1
		{
			cpl_bit(PORTB, LED);
			_delay_ms(200);
		}
		//piscando led lentamente
		for(unsigned int i = 6; i > 0; i--)
  c4:	91 f7       	brne	.-28     	; 0xaa <main+0x2a>
  c6:	df cf       	rjmp	.-66     	; 0x86 <main+0x6>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
